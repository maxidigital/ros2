/*
 *
 * Copyright (C) German Aerospace Center e.V. (https://www.dlr.de)
 * Institute of Transportation Systems. (https://www.dlr.de/ts/)
 *
 * 
 * Eclipse ADORe, Automated Driving Open Research https://eclipse.org/adore
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 *
 * 
 * File automatically generated with DLR Wind v2
 * 
 * This file belongs to the DLR Wind project de.dlr.ts.v2x:dsrc_v2:4.0
 * 
 * Module: IVIM_PDU_Descriptions {itu-t(0) identified-organization(4) etsi(0) itsDomain(5) 
 *         wg1(1) en(103301) ivim(2) version2(2)}
 * 
 * For support contact v2x-ts@dlr.de
 * 
 *
 */
#include <dsrc_v2_ivim_pdu_descriptions_wer_encoder.h>

namespace wind
{
    namespace encoder_dsrc_v2_ivim_pdu_descriptions
    {
        WerEncoder::WerEncoder(ScreenLogger* logger, bool debug) 
            : logger(logger), debug(debug) {
        }

        WerEncoder::~WerEncoder() {            
        }
        

        #if WIND_ROS_VERSION == 1
          int WerEncoder::encode(const dsrc_v2_ivim_pdu_descriptions_msgs::IVIM::ConstPtr& ros, const uint8_t *buffer)
		#else
		  int WerEncoder::encode(const std::shared_ptr<dsrc_v2_ivim_pdu_descriptions_msgs::msg::IVIM>& ros, const uint8_t *buffer)
          //int WerEncoder::encode(const dsrc_v2_ivim_pdu_descriptions_msgs::msg::IVIM* ros, const uint8_t *buffer)
		#endif
		{
            const uint8_t *start = buffer;
            int64_t __aux64__;

    // IVIM  SEQUENCE
        //  header     ItsPduHeader     
        //  ivi        IviStructure     
    // Optional fields bytemap
    
    // Field:  type(ItsPduHeader) name(hheader) extGroup(0)
        // ItsPduHeader  SEQUENCE
            //  protocolVersion ItsPduHeader_protocolVersion     
            //  messageID       ItsPduHeader_messageID           
            //  stationID       StationID                        
        // Optional fields bytemap
        
        // Field:  type(ItsPduHeader_protocolVersion) name(protocol_version) extGroup(0)
        // Integer
        
        // UINT8  min(0) max(255) span(256) dataType(UInt8)
        if(debug) {
            logger->debug() << "|\033[38;5;94m004728\033[0m| " << tools::getTypeName(ros->hheader.protocol_version.value) << 
                         " hheader.protocol_version.value: " << static_cast<int>(ros->hheader.protocol_version.value);
        }
        
        uint8_t* _tmp_5344 = (uint8_t*) buffer++;
        *_tmp_5344 = ros->hheader.protocol_version.value; 
        __aux64__ = ros->hheader.protocol_version.value;
        
        // MIN validator
        if (VALIDATORS_ENABLED && __aux64__ < 0) {
            logger->warning() << "Error: Value in 'hheader.protocol_version.value' (" << __aux64__ << ") less than (0); message dropped.";
            return -1;
        }
        // MAX validator
        if (VALIDATORS_ENABLED && __aux64__ > 255) {
            logger->warning() << "Error: Value in 'hheader.protocol_version.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
            return -1;
        }
        
        // Field:  type(ItsPduHeader_messageID) name(message_id) extGroup(0)
        // Integer
        
        // UINT8  min(0) max(255) span(256) dataType(UInt8)
        if(debug) {
            logger->debug() << "|\033[38;5;94m004729\033[0m| " << tools::getTypeName(ros->hheader.message_id.value) << 
                         " hheader.message_id.value: " << static_cast<int>(ros->hheader.message_id.value);
        }
        
        uint8_t* _tmp_5345 = (uint8_t*) buffer++;
        *_tmp_5345 = ros->hheader.message_id.value; 
        __aux64__ = ros->hheader.message_id.value;
        
        // MIN validator
        if (VALIDATORS_ENABLED && __aux64__ < 0) {
            logger->warning() << "Error: Value in 'hheader.message_id.value' (" << __aux64__ << ") less than (0); message dropped.";
            return -1;
        }
        // MAX validator
        if (VALIDATORS_ENABLED && __aux64__ > 255) {
            logger->warning() << "Error: Value in 'hheader.message_id.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
            return -1;
        }
        
        // Field:  type(StationID) name(station_id) extGroup(0)
        // Integer
        
        // UINT32  min(0) max(4294967295) span(4294967296) dataType(UInt32)
        if(debug) {
            logger->debug() << "|\033[38;5;94m004730\033[0m| " << tools::getTypeName(ros->hheader.station_id.value) << 
                         " hheader.station_id.value: " << ros->hheader.station_id.value;
        }
        
        uint32_t* _tmp_5346 = (uint32_t*) buffer; buffer += 4;
        *_tmp_5346 = ros->hheader.station_id.value; 
        __aux64__ = ros->hheader.station_id.value;
        
        // MIN validator
        if (VALIDATORS_ENABLED && __aux64__ < 0) {
            logger->warning() << "Error: Value in 'hheader.station_id.value' (" << __aux64__ << ") less than (0); message dropped.";
            return -1;
        }
        // MAX validator
        if (VALIDATORS_ENABLED && __aux64__ > 4294967295) {
            logger->warning() << "Error: Value in 'hheader.station_id.value' (" << __aux64__ << ") exceeds max allowable (4294967295); message dropped.";
            return -1;
        }
    
    // Field:  type(IviStructure) name(ivi) extGroup(0)
        // IviStructure  SEQUENCE
            //  mandatory  IVIManagementContainer     
            //  optional   IviStructure_optional    OPTIONAL  
        // Optional fields bytemap
        char* _tmp_5347 = (char*) buffer++;
        *_tmp_5347 = (ros->ivi.optional.size() != 0 ? 1 : 0);
        if(debug)
            logger->debug() << "|\033[38;5;94m004731\033[0m| Optional field optional = " << *_tmp_5347;
        
        // Field:  type(IVIManagementContainer) name(mandatory) extGroup(0)
            // IVIManagementContainer  SEQUENCE
                //  serviceProviderId       Provider                                          
                //  iviIdentificationNumber IviIdentificationNumber                           
                //  timeStamp               TimestampIts                                    OPTIONAL  
                //  validFrom               TimestampIts                                    OPTIONAL  
                //  validTo                 TimestampIts                                    OPTIONAL  
                //  connectedIviStructures  IVIManagementContainer_connectedIviStructures   OPTIONAL  
                //  iviStatus               IviStatus                                         
                //  ...
            uint8_t* _ext_flag_2394 = (uint8_t*) buffer++;  // Write extension flag for IVIManagementContainer
            *_ext_flag_2394 = 0;  
            
            // Optional fields bytemap
            char* _tmp_5348 = (char*) buffer++;
            *_tmp_5348 = (ros->ivi.mandatory.time_stamp.size() != 0 ? 1 : 0);
            if(debug)
                logger->debug() << "|\033[38;5;94m004732\033[0m| Optional field time_stamp = " << *_tmp_5348;
            char* _tmp_5349 = (char*) buffer++;
            *_tmp_5349 = (ros->ivi.mandatory.valid_from.size() != 0 ? 1 : 0);
            if(debug)
                logger->debug() << "|\033[38;5;94m004733\033[0m| Optional field valid_from = " << *_tmp_5349;
            char* _tmp_5350 = (char*) buffer++;
            *_tmp_5350 = (ros->ivi.mandatory.valid_to.size() != 0 ? 1 : 0);
            if(debug)
                logger->debug() << "|\033[38;5;94m004734\033[0m| Optional field valid_to = " << *_tmp_5350;
            char* _tmp_5351 = (char*) buffer++;
            *_tmp_5351 = (ros->ivi.mandatory.connected_ivi_structures.size() != 0 ? 1 : 0);
            if(debug)
                logger->debug() << "|\033[38;5;94m004735\033[0m| Optional field connected_ivi_structures = " << *_tmp_5351;
            
            // Field:  type(Provider) name(service_provider_id) extGroup(0)
                // Provider  SEQUENCE
                    //  countryCode        CountryCode          
                    //  providerIdentifier IssuerIdentifier     
                // Optional fields bytemap
                
                // Field:  type(CountryCode) name(country_code) extGroup(0)
                // BitString
                // BIT_STRING  min(10) max(10) span(1)
                if(debug)
                    logger->debug() << "|\033[38;5;94m004736\033[0m| ivi.mandatory.service_provider_id.country_code.value: " << static_cast<int>(ros->ivi.mandatory.service_provider_id.country_code.values.size());
                
                if(ros->ivi.mandatory.service_provider_id.country_code.values.size() < 10) {
                        logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.country_code.value' " << (ros->ivi.mandatory.service_provider_id.country_code.values.size()) << " is less than allowable (10); message dropped.";
                    return -1;
                }
                if(ros->ivi.mandatory.service_provider_id.country_code.values.size() > 10) {
                        logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.country_code.value' " << (ros->ivi.mandatory.service_provider_id.country_code.values.size()) << " exceeds max allowable (10); message dropped.";
                    return -1;
                }
                
                uint8_t* _tmp_5352 = (uint8_t*)buffer;
                __aux64__ = ros->ivi.mandatory.service_provider_id.country_code.values.size();
                if(__aux64__ > 10) __aux64__ = 10;
                *_tmp_5352 = __aux64__ - 10;
                buffer += 1;
                
                int __ifc = __aux64__;
                for(int c = 0; c < __ifc; c++) {
                    uint8_t* __b__ = (uint8_t*)buffer++;
                    *__b__ = (ros->ivi.mandatory.service_provider_id.country_code.values[c]? 1: 0);
                }
                
                // Field:  type(IssuerIdentifier) name(provider_identifier) extGroup(0)
                // Integer
                
                // UINT16  min(0) max(16383) span(16384) dataType(UInt16)
                if(debug) {
                    logger->debug() << "|\033[38;5;94m004737\033[0m| " << tools::getTypeName(ros->ivi.mandatory.service_provider_id.provider_identifier.value) << 
                                 " ivi.mandatory.service_provider_id.provider_identifier.value: " << ros->ivi.mandatory.service_provider_id.provider_identifier.value;
                }
                
                uint16_t* _tmp_5353 = (uint16_t*) buffer; buffer += 2;
                *_tmp_5353 = ros->ivi.mandatory.service_provider_id.provider_identifier.value; 
                __aux64__ = ros->ivi.mandatory.service_provider_id.provider_identifier.value;
                
                // MIN validator
                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.provider_identifier.value' (" << __aux64__ << ") less than (0); message dropped.";
                    return -1;
                }
                // MAX validator
                if (VALIDATORS_ENABLED && __aux64__ > 16383) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.provider_identifier.value' (" << __aux64__ << ") exceeds max allowable (16383); message dropped.";
                    return -1;
                }
            
            // Field:  type(IviIdentificationNumber) name(ivi_identification_number) extGroup(0)
            // Integer
            
            // UINT16  min(1) max(32767) span(32767) dataType(UInt16)
            if(debug) {
                logger->debug() << "|\033[38;5;94m004738\033[0m| " << tools::getTypeName(ros->ivi.mandatory.ivi_identification_number.value) << 
                             " ivi.mandatory.ivi_identification_number.value: " << ros->ivi.mandatory.ivi_identification_number.value;
            }
            
            uint8_t* _ext_flag_2396 = (uint8_t*) buffer++; // Extension flag for ros->ivi.mandatory.ivi_identification_number.
            *_ext_flag_2396 = (ros->ivi.mandatory.ivi_identification_number.value >= 1 && ros->ivi.mandatory.ivi_identification_number.value <= 32767) ? 0 : 1;
            
            if(*_ext_flag_2396) {
                uint8_t* _tmp_5355 = (uint8_t*) buffer++; 
                if(ros->ivi.mandatory.ivi_identification_number.value >= 0 && ros->ivi.mandatory.ivi_identification_number.value <= INT32_MAX) {
                    *_tmp_5355 = 0;
                
                    uint32_t* _tmp_5354 = (uint32_t*)buffer; buffer += 4;
                    __aux64__ = ros->ivi.mandatory.ivi_identification_number.value;
                    __aux64__ -= INT32_MIN;
                    *_tmp_5354 = __aux64__;
                } 
                else
                {
                    *_tmp_5355 = 1;
                
                    uint64_t* _tmp_5354 = (uint64_t*)buffer; buffer += 8;
                    __aux64__ = ros->ivi.mandatory.ivi_identification_number.value;
                    __aux64__ -= INT64_MIN;
                    *_tmp_5354 = __aux64__;
                }
            } else {
                uint16_t* _tmp_5354 = (uint16_t*) buffer; buffer += 2;
                __aux64__ = ros->ivi.mandatory.ivi_identification_number.value - 1;
                *_tmp_5354 = __aux64__;
                __aux64__ = ros->ivi.mandatory.ivi_identification_number.value;
            }
            
            if(ros->ivi.mandatory.time_stamp.size() != 0) {
                // Field:  type(TimestampIts) name(time_stamp) extGroup(0)
                // Integer
                
                // INT64  min(0) max(4398046511103) span(4398046511104) dataType(Int64)
                if(debug) {
                    logger->debug() << "|\033[38;5;94m004739\033[0m| " << tools::getTypeName(ros->ivi.mandatory.time_stamp[0].value) << 
                                 " ivi.mandatory.time_stamp[0].value: " << ros->ivi.mandatory.time_stamp[0].value;
                }
                
                uint64_t* _tmp_5356 = (uint64_t*)buffer; buffer += 8;
                *_tmp_5356 = ros->ivi.mandatory.time_stamp[0].value; 
                __aux64__ = ros->ivi.mandatory.time_stamp[0].value;
                
                // MIN validator
                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.time_stamp[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                    return -1;
                }
                // MAX validator
                if (VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.time_stamp[0].value' (" << __aux64__ << ") exceeds max allowable (4398046511103); message dropped.";
                    return -1;
                }
            }
            
            if(ros->ivi.mandatory.valid_from.size() != 0) {
                // Field:  type(TimestampIts) name(valid_from) extGroup(0)
                // Integer
                
                // INT64  min(0) max(4398046511103) span(4398046511104) dataType(Int64)
                if(debug) {
                    logger->debug() << "|\033[38;5;94m004740\033[0m| " << tools::getTypeName(ros->ivi.mandatory.valid_from[0].value) << 
                                 " ivi.mandatory.valid_from[0].value: " << ros->ivi.mandatory.valid_from[0].value;
                }
                
                uint64_t* _tmp_5357 = (uint64_t*)buffer; buffer += 8;
                *_tmp_5357 = ros->ivi.mandatory.valid_from[0].value; 
                __aux64__ = ros->ivi.mandatory.valid_from[0].value;
                
                // MIN validator
                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_from[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                    return -1;
                }
                // MAX validator
                if (VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_from[0].value' (" << __aux64__ << ") exceeds max allowable (4398046511103); message dropped.";
                    return -1;
                }
            }
            
            if(ros->ivi.mandatory.valid_to.size() != 0) {
                // Field:  type(TimestampIts) name(valid_to) extGroup(0)
                // Integer
                
                // INT64  min(0) max(4398046511103) span(4398046511104) dataType(Int64)
                if(debug) {
                    logger->debug() << "|\033[38;5;94m004741\033[0m| " << tools::getTypeName(ros->ivi.mandatory.valid_to[0].value) << 
                                 " ivi.mandatory.valid_to[0].value: " << ros->ivi.mandatory.valid_to[0].value;
                }
                
                uint64_t* _tmp_5358 = (uint64_t*)buffer; buffer += 8;
                *_tmp_5358 = ros->ivi.mandatory.valid_to[0].value; 
                __aux64__ = ros->ivi.mandatory.valid_to[0].value;
                
                // MIN validator
                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_to[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                    return -1;
                }
                // MAX validator
                if (VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_to[0].value' (" << __aux64__ << ") exceeds max allowable (4398046511103); message dropped.";
                    return -1;
                }
            }
            
            if(ros->ivi.mandatory.connected_ivi_structures.size() != 0) {
                // Field:  type(IVIManagementContainer_connectedIviStructures) name(connected_ivi_structures) extGroup(0)
                // SequenceOf
                // Data Type UInt8
                // SEQUENCE_OF  min(1) max(8) span(8) ext(false)
                __aux64__ = ros->ivi.mandatory.connected_ivi_structures[0].elements.size();
                if(__aux64__ > 8) __aux64__ = 8;
                uint16_t* _tmp_5359 = (uint16_t*)buffer;
                buffer += 2;
                *_tmp_5359 = __aux64__ - 1;
                
                int __ifd = __aux64__;
                for(int d = 0; d < __ifd; d++) { 
                    
                    // Integer
                    
                    // UINT16  min(1) max(32767) span(32767) dataType(UInt16)
                    if(debug) {
                        logger->debug() << "|\033[38;5;94m004743\033[0m| " << tools::getTypeName(ros->ivi.mandatory.connected_ivi_structures[0].elements[d].value) << 
                                     " ivi.mandatory.connected_ivi_structures[0].elements[d].value: " << ros->ivi.mandatory.connected_ivi_structures[0].elements[d].value;
                    }
                    
                    uint8_t* _ext_flag_2400 = (uint8_t*) buffer++; // Extension flag for ros->ivi.mandatory.connected_ivi_structures[0].elements[d].
                    *_ext_flag_2400 = (ros->ivi.mandatory.connected_ivi_structures[0].elements[d].value >= 1 && ros->ivi.mandatory.connected_ivi_structures[0].elements[d].value <= 32767) ? 0 : 1;
                    
                    if(*_ext_flag_2400) {
                        uint8_t* _tmp_5361 = (uint8_t*) buffer++; 
                        if(ros->ivi.mandatory.connected_ivi_structures[0].elements[d].value >= 0 && ros->ivi.mandatory.connected_ivi_structures[0].elements[d].value <= INT32_MAX) {
                            *_tmp_5361 = 0;
                        
                            uint32_t* _tmp_5360 = (uint32_t*)buffer; buffer += 4;
                            __aux64__ = ros->ivi.mandatory.connected_ivi_structures[0].elements[d].value;
                            __aux64__ -= INT32_MIN;
                            *_tmp_5360 = __aux64__;
                        } 
                        else
                        {
                            *_tmp_5361 = 1;
                        
                            uint64_t* _tmp_5360 = (uint64_t*)buffer; buffer += 8;
                            __aux64__ = ros->ivi.mandatory.connected_ivi_structures[0].elements[d].value;
                            __aux64__ -= INT64_MIN;
                            *_tmp_5360 = __aux64__;
                        }
                    } else {
                        uint16_t* _tmp_5360 = (uint16_t*) buffer; buffer += 2;
                        __aux64__ = ros->ivi.mandatory.connected_ivi_structures[0].elements[d].value - 1;
                        *_tmp_5360 = __aux64__;
                        __aux64__ = ros->ivi.mandatory.connected_ivi_structures[0].elements[d].value;
                    }
                }
            }
            
            // Field:  type(IviStatus) name(ivi_status) extGroup(0)
            // Integer
            
            // UINT8  min(0) max(7) span(8) dataType(UInt8)
            if(debug) {
                logger->debug() << "|\033[38;5;94m004744\033[0m| " << tools::getTypeName(ros->ivi.mandatory.ivi_status.value) << 
                             " ivi.mandatory.ivi_status.value: " << static_cast<int>(ros->ivi.mandatory.ivi_status.value);
            }
            
            uint8_t* _tmp_5362 = (uint8_t*) buffer++;
            *_tmp_5362 = ros->ivi.mandatory.ivi_status.value; 
            __aux64__ = ros->ivi.mandatory.ivi_status.value;
            
            // MIN validator
            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                logger->warning() << "Error: Value in 'ivi.mandatory.ivi_status.value' (" << __aux64__ << ") less than (0); message dropped.";
                return -1;
            }
            // MAX validator
            if (VALIDATORS_ENABLED && __aux64__ > 7) {
                logger->warning() << "Error: Value in 'ivi.mandatory.ivi_status.value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                return -1;
            }
            
            if(*_ext_flag_2394) {
            }
        
        if(ros->ivi.optional.size() != 0) {
            // Field:  type(IviStructure_optional) name(optional) extGroup(0)
            // SequenceOf
            // Data Type UInt8
            // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
            uint8_t* _ext_flag_2402 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].
            *_ext_flag_2402 = 0; 
            
            __aux64__ = ros->ivi.optional[0].elements.size();
            if(__aux64__ > 8) __aux64__ = 8;
            uint16_t* _tmp_5364 = (uint16_t*)buffer;
            buffer += 2;
            *_tmp_5364 = __aux64__ - 1;
            
            int __ife = __aux64__;
            for(int e = 0; e < __ife; e++) { 
                
                // Choice
                   // #0  glc   GeographicLocationContainer
                   // #1  giv   GeneralIviContainer
                   // #2  rcc   RoadConfigurationContainer
                   // #3  tc   TextContainer
                   // #4  lac   LayoutContainer
                uint8_t* _ext_flag_2403 = (uint8_t*) buffer; 
                buffer++;
                *_ext_flag_2403 = 0; 
                
                uint8_t* _choice_159 = (uint8_t*) buffer;
                buffer++;
                
                if(ros->ivi.optional[0].elements[e].glc.size() != 0) {  // CHOICE 0  fieldType(IviContainer) 
                    *_choice_159 = 0;  // Setting choice selection
                
                    if(debug)
                        logger->debug() << "|\033[38;5;94m004746\033[0m| Choice selection: 0";
                
                        // GeographicLocationContainer  SEQUENCE
                            //  referencePosition        ReferencePosition                     
                            //  referencePositionTime    TimestampIts                        OPTIONAL  
                            //  referencePositionHeading Heading                             OPTIONAL  
                            //  referencePositionSpeed   Speed                               OPTIONAL  
                            //  parts                    GeographicLocationContainer_parts     
                            //  ...
                        uint8_t* _ext_flag_2404 = (uint8_t*) buffer++;  // Write extension flag for GeographicLocationContainer
                        *_ext_flag_2404 = 0;  
                        
                        // Optional fields bytemap
                        char* _tmp_5365 = (char*) buffer++;
                        *_tmp_5365 = (ros->ivi.optional[0].elements[e].glc[0].reference_position_time.size() != 0 ? 1 : 0);
                        if(debug)
                            logger->debug() << "|\033[38;5;94m004747\033[0m| Optional field reference_position_time = " << *_tmp_5365;
                        char* _tmp_5366 = (char*) buffer++;
                        *_tmp_5366 = (ros->ivi.optional[0].elements[e].glc[0].reference_position_heading.size() != 0 ? 1 : 0);
                        if(debug)
                            logger->debug() << "|\033[38;5;94m004748\033[0m| Optional field reference_position_heading = " << *_tmp_5366;
                        char* _tmp_5367 = (char*) buffer++;
                        *_tmp_5367 = (ros->ivi.optional[0].elements[e].glc[0].reference_position_speed.size() != 0 ? 1 : 0);
                        if(debug)
                            logger->debug() << "|\033[38;5;94m004749\033[0m| Optional field reference_position_speed = " << *_tmp_5367;
                        
                        // Field:  type(ReferencePosition) name(reference_position) extGroup(0)
                            // ReferencePosition  SEQUENCE
                                //  latitude                  Latitude                 
                                //  longitude                 Longitude                
                                //  positionConfidenceEllipse PosConfidenceEllipse     
                                //  altitude                  Altitude                 
                            // Optional fields bytemap
                            
                            // Field:  type(Latitude) name(latitude) extGroup(0)
                            // Real
                            
                            // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m004750\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].reference_position.latitude.value) << 
                                             " ivi.optional[0].elements[e].glc[0].reference_position.latitude.value: " << ros->ivi.optional[0].elements[e].glc[0].reference_position.latitude.value;
                            }
                            
                            double _tmp_5369 = ros->ivi.optional[0].elements[e].glc[0].reference_position.latitude.value;
                            _tmp_5369 *= 1.0E7;
                            __aux64__ = static_cast<uint64_t>(_tmp_5369);
                            _tmp_5369 -= -900000000;
                            uint32_t* _tmp_5368 = (uint32_t*) buffer; buffer += 4;
                            *_tmp_5368 = static_cast<uint32_t>(_tmp_5369);
                            
                            // MIN validator
                            if (VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position.latitude.value' (" << __aux64__ << ") less than (-900000000); message dropped.";
                                return -1;
                            }
                            // MAX validator
                            if (VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position.latitude.value' (" << __aux64__ << ") exceeds max allowable (900000001); message dropped.";
                                return -1;
                            }
                            
                            // Field:  type(Longitude) name(longitude) extGroup(0)
                            // Real
                            
                            // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m004751\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].reference_position.longitude.value) << 
                                             " ivi.optional[0].elements[e].glc[0].reference_position.longitude.value: " << ros->ivi.optional[0].elements[e].glc[0].reference_position.longitude.value;
                            }
                            
                            double _tmp_5371 = ros->ivi.optional[0].elements[e].glc[0].reference_position.longitude.value;
                            _tmp_5371 *= 1.0E7;
                            __aux64__ = static_cast<uint64_t>(_tmp_5371);
                            _tmp_5371 -= -1800000000;
                            uint32_t* _tmp_5370 = (uint32_t*) buffer; buffer += 4;
                            *_tmp_5370 = static_cast<uint32_t>(_tmp_5371);
                            
                            // MIN validator
                            if (VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position.longitude.value' (" << __aux64__ << ") less than (-1800000000); message dropped.";
                                return -1;
                            }
                            // MAX validator
                            if (VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position.longitude.value' (" << __aux64__ << ") exceeds max allowable (1800000001); message dropped.";
                                return -1;
                            }
                            
                            // Field:  type(PosConfidenceEllipse) name(position_confidence_ellipse) extGroup(0)
                                // PosConfidenceEllipse  SEQUENCE
                                    //  semiMajorConfidence  SemiAxisLength     
                                    //  semiMinorConfidence  SemiAxisLength     
                                    //  semiMajorOrientation HeadingValue       
                                // Optional fields bytemap
                                
                                // Field:  type(SemiAxisLength) name(semi_major_confidence) extGroup(0)
                                // Integer
                                
                                // UINT16  min(0) max(4095) span(4096) dataType(UInt16)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m004752\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value) << 
                                                 " ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value: " << ros->ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value;
                                }
                                
                                uint16_t* _tmp_5372 = (uint16_t*) buffer; buffer += 2;
                                *_tmp_5372 = ros->ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value; 
                                __aux64__ = ros->ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 4095) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value' (" << __aux64__ << ") exceeds max allowable (4095); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(SemiAxisLength) name(semi_minor_confidence) extGroup(0)
                                // Integer
                                
                                // UINT16  min(0) max(4095) span(4096) dataType(UInt16)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m004753\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value) << 
                                                 " ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value: " << ros->ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value;
                                }
                                
                                uint16_t* _tmp_5373 = (uint16_t*) buffer; buffer += 2;
                                *_tmp_5373 = ros->ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value; 
                                __aux64__ = ros->ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 4095) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value' (" << __aux64__ << ") exceeds max allowable (4095); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(HeadingValue) name(semi_major_orientation) extGroup(0)
                                // Real
                                
                                // FLOAT  min(0) max(3601) span(3602) scaleDivisor(10.0) dataType(Float)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m004754\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value) << 
                                                 " ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value: " << ros->ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value;
                                }
                                
                                float _tmp_5375 = ros->ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value;
                                _tmp_5375 *= 10.0;
                                __aux64__ = static_cast<uint64_t>(_tmp_5375);
                                uint16_t* _tmp_5374 = (uint16_t*) buffer; buffer += 2;
                                *_tmp_5374 = static_cast<uint16_t>(_tmp_5375);
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 3601) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value' (" << __aux64__ << ") exceeds max allowable (3601); message dropped.";
                                    return -1;
                                }
                            
                            // Field:  type(Altitude) name(altitude) extGroup(0)
                                // Altitude  SEQUENCE
                                    //  altitudeValue      AltitudeValue          
                                    //  altitudeConfidence AltitudeConfidence     
                                // Optional fields bytemap
                                
                                // Field:  type(AltitudeValue) name(altitude_value) extGroup(0)
                                // Real
                                
                                // FLOAT  min(-100000) max(800001) span(900002) scaleDivisor(100.0) dataType(Float)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m004755\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].reference_position.altitude.altitude_value.value) << 
                                                 " ivi.optional[0].elements[e].glc[0].reference_position.altitude.altitude_value.value: " << ros->ivi.optional[0].elements[e].glc[0].reference_position.altitude.altitude_value.value;
                                }
                                
                                float _tmp_5377 = ros->ivi.optional[0].elements[e].glc[0].reference_position.altitude.altitude_value.value;
                                _tmp_5377 *= 100.0;
                                __aux64__ = static_cast<uint64_t>(_tmp_5377);
                                _tmp_5377 -= -100000;
                                uint32_t* _tmp_5376 = (uint32_t*) buffer; buffer += 4;
                                *_tmp_5376 = static_cast<uint32_t>(_tmp_5377);
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < -100000) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position.altitude.altitude_value.value' (" << __aux64__ << ") less than (-100000); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 800001) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position.altitude.altitude_value.value' (" << __aux64__ << ") exceeds max allowable (800001); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(AltitudeConfidence) name(altitude_confidence) extGroup(0)
                                // Enumerated
                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m004756\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].reference_position.altitude.altitude_confidence.value) << 
                                                 " ivi.optional[0].elements[e].glc[0].reference_position.altitude.altitude_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].glc[0].reference_position.altitude.altitude_confidence.value);
                                }
                                
                                uint8_t* _tmp_5378 = (uint8_t*)buffer;
                                buffer += 1;
                                *_tmp_5378 = ros->ivi.optional[0].elements[e].glc[0].reference_position.altitude.altitude_confidence.value; 
                                __aux64__ = ros->ivi.optional[0].elements[e].glc[0].reference_position.altitude.altitude_confidence.value; 
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position.altitude.altitude_confidence.value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position.altitude.altitude_confidence.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                    return -1;
                                }
                        
                        if(ros->ivi.optional[0].elements[e].glc[0].reference_position_time.size() != 0) {
                            // Field:  type(TimestampIts) name(reference_position_time) extGroup(0)
                            // Integer
                            
                            // INT64  min(0) max(4398046511103) span(4398046511104) dataType(Int64)
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m004757\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].reference_position_time[0].value) << 
                                             " ivi.optional[0].elements[e].glc[0].reference_position_time[0].value: " << ros->ivi.optional[0].elements[e].glc[0].reference_position_time[0].value;
                            }
                            
                            uint64_t* _tmp_5379 = (uint64_t*)buffer; buffer += 8;
                            *_tmp_5379 = ros->ivi.optional[0].elements[e].glc[0].reference_position_time[0].value; 
                            __aux64__ = ros->ivi.optional[0].elements[e].glc[0].reference_position_time[0].value;
                            
                            // MIN validator
                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position_time[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                return -1;
                            }
                            // MAX validator
                            if (VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position_time[0].value' (" << __aux64__ << ") exceeds max allowable (4398046511103); message dropped.";
                                return -1;
                            }
                        }
                        
                        if(ros->ivi.optional[0].elements[e].glc[0].reference_position_heading.size() != 0) {
                            // Field:  type(Heading) name(reference_position_heading) extGroup(0)
                                // Heading  SEQUENCE
                                    //  headingValue      HeadingValue          
                                    //  headingConfidence HeadingConfidence     
                                // Optional fields bytemap
                                
                                // Field:  type(HeadingValue) name(heading_value) extGroup(0)
                                // Real
                                
                                // FLOAT  min(0) max(3601) span(3602) scaleDivisor(10.0) dataType(Float)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m004758\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].reference_position_heading[0].heading_value.value) << 
                                                 " ivi.optional[0].elements[e].glc[0].reference_position_heading[0].heading_value.value: " << ros->ivi.optional[0].elements[e].glc[0].reference_position_heading[0].heading_value.value;
                                }
                                
                                float _tmp_5381 = ros->ivi.optional[0].elements[e].glc[0].reference_position_heading[0].heading_value.value;
                                _tmp_5381 *= 10.0;
                                __aux64__ = static_cast<uint64_t>(_tmp_5381);
                                uint16_t* _tmp_5380 = (uint16_t*) buffer; buffer += 2;
                                *_tmp_5380 = static_cast<uint16_t>(_tmp_5381);
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position_heading[0].heading_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 3601) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position_heading[0].heading_value.value' (" << __aux64__ << ") exceeds max allowable (3601); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(HeadingConfidence) name(heading_confidence) extGroup(0)
                                // Real
                                
                                // FLOAT  min(1) max(127) span(127) scaleDivisor(10.0) dataType(Float)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m004759\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].reference_position_heading[0].heading_confidence.value) << 
                                                 " ivi.optional[0].elements[e].glc[0].reference_position_heading[0].heading_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].glc[0].reference_position_heading[0].heading_confidence.value);
                                }
                                
                                float _tmp_5383 = ros->ivi.optional[0].elements[e].glc[0].reference_position_heading[0].heading_confidence.value;
                                _tmp_5383 *= 10.0;
                                __aux64__ = static_cast<uint64_t>(_tmp_5383);
                                _tmp_5383 -= 1;
                                uint8_t* _tmp_5382 = (uint8_t*) buffer; buffer += 1;
                                *_tmp_5382 = static_cast<uint8_t>(_tmp_5383);
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position_heading[0].heading_confidence.value' (" << __aux64__ << ") less than (1); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 127) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position_heading[0].heading_confidence.value' (" << __aux64__ << ") exceeds max allowable (127); message dropped.";
                                    return -1;
                                }
                        }
                        
                        if(ros->ivi.optional[0].elements[e].glc[0].reference_position_speed.size() != 0) {
                            // Field:  type(Speed) name(reference_position_speed) extGroup(0)
                                // Speed  SEQUENCE
                                    //  speedValue      SpeedValue          
                                    //  speedConfidence SpeedConfidence     
                                // Optional fields bytemap
                                
                                // Field:  type(SpeedValue) name(speed_value) extGroup(0)
                                // Real
                                
                                // FLOAT  min(0) max(16383) span(16384) scaleDivisor(100.0) dataType(Float)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m004760\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].reference_position_speed[0].speed_value.value) << 
                                                 " ivi.optional[0].elements[e].glc[0].reference_position_speed[0].speed_value.value: " << ros->ivi.optional[0].elements[e].glc[0].reference_position_speed[0].speed_value.value;
                                }
                                
                                float _tmp_5385 = ros->ivi.optional[0].elements[e].glc[0].reference_position_speed[0].speed_value.value;
                                _tmp_5385 *= 100.0;
                                __aux64__ = static_cast<uint64_t>(_tmp_5385);
                                uint16_t* _tmp_5384 = (uint16_t*) buffer; buffer += 2;
                                *_tmp_5384 = static_cast<uint16_t>(_tmp_5385);
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position_speed[0].speed_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 16383) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position_speed[0].speed_value.value' (" << __aux64__ << ") exceeds max allowable (16383); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(SpeedConfidence) name(speed_confidence) extGroup(0)
                                // Real
                                
                                // FLOAT  min(1) max(127) span(127) scaleDivisor(100.0) dataType(Float)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m004761\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].reference_position_speed[0].speed_confidence.value) << 
                                                 " ivi.optional[0].elements[e].glc[0].reference_position_speed[0].speed_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].glc[0].reference_position_speed[0].speed_confidence.value);
                                }
                                
                                float _tmp_5387 = ros->ivi.optional[0].elements[e].glc[0].reference_position_speed[0].speed_confidence.value;
                                _tmp_5387 *= 100.0;
                                __aux64__ = static_cast<uint64_t>(_tmp_5387);
                                _tmp_5387 -= 1;
                                uint8_t* _tmp_5386 = (uint8_t*) buffer; buffer += 1;
                                *_tmp_5386 = static_cast<uint8_t>(_tmp_5387);
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position_speed[0].speed_confidence.value' (" << __aux64__ << ") less than (1); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 127) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].reference_position_speed[0].speed_confidence.value' (" << __aux64__ << ") exceeds max allowable (127); message dropped.";
                                    return -1;
                                }
                        }
                        
                        // Field:  type(GeographicLocationContainer_parts) name(parts) extGroup(0)
                        // SequenceOf
                        // Data Type UInt8
                        // SEQUENCE_OF  min(1) max(16) span(16) ext(true)
                        uint8_t* _ext_flag_2417 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].glc[0].parts.
                        *_ext_flag_2417 = 0; 
                        
                        __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements.size();
                        if(__aux64__ > 16) __aux64__ = 16;
                        uint16_t* _tmp_5388 = (uint16_t*)buffer;
                        buffer += 2;
                        *_tmp_5388 = __aux64__ - 1;
                        
                        int __iff = __aux64__;
                        for(int f = 0; f < __iff; f++) { 
                            
                                // GlcPart  SEQUENCE
                                    //  zoneId        Zid                       
                                    //  laneNumber    LanePosition            OPTIONAL  
                                    //  zoneExtension GlcPart_zoneExtension   OPTIONAL  
                                    //  zoneHeading   HeadingValue            OPTIONAL  
                                    //  zone          Zone                    OPTIONAL  
                                    //  ...
                                uint8_t* _ext_flag_2418 = (uint8_t*) buffer++;  // Write extension flag for GlcPart
                                *_ext_flag_2418 = 0;  
                                
                                // Optional fields bytemap
                                char* _tmp_5389 = (char*) buffer++;
                                *_tmp_5389 = (ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].lane_number.size() != 0 ? 1 : 0);
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m004763\033[0m| Optional field lane_number = " << *_tmp_5389;
                                char* _tmp_5390 = (char*) buffer++;
                                *_tmp_5390 = (ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_extension.size() != 0 ? 1 : 0);
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m004764\033[0m| Optional field zone_extension = " << *_tmp_5390;
                                char* _tmp_5391 = (char*) buffer++;
                                *_tmp_5391 = (ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_heading.size() != 0 ? 1 : 0);
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m004765\033[0m| Optional field zone_heading = " << *_tmp_5391;
                                char* _tmp_5392 = (char*) buffer++;
                                *_tmp_5392 = (ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone.size() != 0 ? 1 : 0);
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m004766\033[0m| Optional field zone = " << *_tmp_5392;
                                
                                // Field:  type(Zid) name(zone_id) extGroup(0)
                                // Integer
                                
                                // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m004767\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_id.value) << 
                                                 " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_id.value);
                                }
                                
                                uint8_t* _ext_flag_2419 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_id.
                                *_ext_flag_2419 = (ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_id.value >= 1 && ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_id.value <= 32) ? 0 : 1;
                                
                                if(*_ext_flag_2419) {
                                    uint8_t* _tmp_5394 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_id.value >= 0 && ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_id.value <= INT32_MAX) {
                                        *_tmp_5394 = 0;
                                    
                                        uint32_t* _tmp_5393 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_id.value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_5393 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_5394 = 1;
                                    
                                        uint64_t* _tmp_5393 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_id.value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_5393 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_5393 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_id.value - 1;
                                    *_tmp_5393 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_id.value;
                                }
                                
                                if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].lane_number.size() != 0) {
                                    // Field:  type(LanePosition) name(lane_number) extGroup(0)
                                    // Integer
                                    
                                    // INT8  min(-1) max(14) span(16) dataType(Int8)
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m004768\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].lane_number[0].value) << 
                                                     " ivi.optional[0].elements[e].glc[0].parts.elements[f].lane_number[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].lane_number[0].value);
                                    }
                                    
                                    uint8_t* _tmp_5395 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].lane_number[0].value - -1;
                                    *_tmp_5395 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].lane_number[0].value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].lane_number[0].value' (" << __aux64__ << ") less than (-1); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].lane_number[0].value' (" << __aux64__ << ") exceeds max allowable (14); message dropped.";
                                        return -1;
                                    }
                                }
                                
                                if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_extension.size() != 0) {
                                    // Field:  type(GlcPart_zoneExtension) name(zone_extension) extGroup(0)
                                    // Integer
                                    
                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m004769\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_extension[0].value) << 
                                                     " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_extension[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_extension[0].value);
                                    }
                                    
                                    uint8_t* _tmp_5396 = (uint8_t*) buffer++;
                                    *_tmp_5396 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_extension[0].value; 
                                    __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_extension[0].value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_extension[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_extension[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                        return -1;
                                    }
                                }
                                
                                if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_heading.size() != 0) {
                                    // Field:  type(HeadingValue) name(zone_heading) extGroup(0)
                                    // Real
                                    
                                    // FLOAT  min(0) max(3601) span(3602) scaleDivisor(10.0) dataType(Float)
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m004770\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_heading[0].value) << 
                                                     " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_heading[0].value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_heading[0].value;
                                    }
                                    
                                    float _tmp_5398 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_heading[0].value;
                                    _tmp_5398 *= 10.0;
                                    __aux64__ = static_cast<uint64_t>(_tmp_5398);
                                    uint16_t* _tmp_5397 = (uint16_t*) buffer; buffer += 2;
                                    *_tmp_5397 = static_cast<uint16_t>(_tmp_5398);
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_heading[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 3601) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone_heading[0].value' (" << __aux64__ << ") exceeds max allowable (3601); message dropped.";
                                        return -1;
                                    }
                                }
                                
                                if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone.size() != 0) {
                                    // Field:  type(Zone) name(zone) extGroup(0)
                                    // Choice
                                       // #0  segment   Segment
                                       // #1  area   PolygonalLine
                                       // #2  computedSegment   ComputedSegment
                                    uint8_t* _ext_flag_2423 = (uint8_t*) buffer; 
                                    buffer++;
                                    *_ext_flag_2423 = 0; 
                                    
                                    uint8_t* _choice_160 = (uint8_t*) buffer;
                                    buffer++;
                                    
                                    if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment.size() != 0) {  // CHOICE 0  fieldType(Zone) 
                                        *_choice_160 = 0;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m004771\033[0m| Choice selection: 0";
                                    
                                            // Segment  SEQUENCE
                                                //  line       PolygonalLine     
                                                //  laneWidth  IVILaneWidth    OPTIONAL  
                                            // Optional fields bytemap
                                            char* _tmp_5399 = (char*) buffer++;
                                            *_tmp_5399 = (ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].lane_width.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m004772\033[0m| Optional field lane_width = " << *_tmp_5399;
                                            
                                            // Field:  type(PolygonalLine) name(line) extGroup(0)
                                            // Choice
                                               // #0  deltaPositions   PolygonalLine_deltaPositions
                                               // #1  deltaPositionsWithAltitude   PolygonalLine_deltaPositionsWithAltitude
                                               // #2  absolutePositions   PolygonalLine_absolutePositions
                                               // #3  absolutePositionsWithAltitude   PolygonalLine_absolutePositionsWithAltitude
                                            uint8_t* _ext_flag_2424 = (uint8_t*) buffer; 
                                            buffer++;
                                            *_ext_flag_2424 = 0; 
                                            
                                            uint8_t* _choice_161 = (uint8_t*) buffer;
                                            buffer++;
                                            
                                            if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions.size() != 0) {  // CHOICE 0  fieldType(PolygonalLine) 
                                                *_choice_161   = 0 - 4;  // Setting choice selection
                                                *_ext_flag_2424 = 1;      // setting ext flag
                                            
                                                uint16_t* _tmp_5400_openType = (uint16_t*) buffer;  // OpenType length variable 
                                                buffer += 2;
                                                const uint8_t *_tmp_5401_start = buffer; // Starting point
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m004773\033[0m| Choice selection: 0";
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(32) span(32) ext(true)
                                                uint8_t* _ext_flag_2425 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions[0].
                                                *_ext_flag_2425 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions[0].elements.size();
                                                if(__aux64__ > 32) __aux64__ = 32;
                                                uint16_t* _tmp_5402 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_5402 = __aux64__ - 1;
                                                
                                                int __ifg = __aux64__;
                                                for(int g = 0; g < __ifg; g++) { 
                                                    
                                                        // DeltaPosition  SEQUENCE
                                                            //  deltaLatitude  DeltaLatitude      
                                                            //  deltaLongitude DeltaLongitude     
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(DeltaLatitude) name(delta_latitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m004775\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions[0].elements[g].delta_latitude.value) << 
                                                                         " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions[0].elements[g].delta_latitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions[0].elements[g].delta_latitude.value;
                                                        }
                                                        
                                                        double _tmp_5404 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions[0].elements[g].delta_latitude.value;
                                                        _tmp_5404 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_5404);
                                                        _tmp_5404 -= -131071;
                                                        uint32_t* _tmp_5403 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_5403 = static_cast<uint32_t>(_tmp_5404);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions[0].elements[g].delta_latitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions[0].elements[g].delta_latitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(DeltaLongitude) name(delta_longitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m004776\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions[0].elements[g].delta_longitude.value) << 
                                                                         " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions[0].elements[g].delta_longitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions[0].elements[g].delta_longitude.value;
                                                        }
                                                        
                                                        double _tmp_5406 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions[0].elements[g].delta_longitude.value;
                                                        _tmp_5406 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_5406);
                                                        _tmp_5406 -= -131071;
                                                        uint32_t* _tmp_5405 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_5405 = static_cast<uint32_t>(_tmp_5406);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions[0].elements[g].delta_longitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions[0].elements[g].delta_longitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                }
                                            
                                                *_tmp_5400_openType = buffer - _tmp_5401_start;  // OpenType length  
                                            }
                                            else if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude.size() != 0)  // CHOICE 1  fieldType(PolygonalLine) 
                                            {
                                                *_choice_161   = 1 - 4;  // Setting choice selection
                                                *_ext_flag_2424 = 1;      // setting ext flag
                                            
                                                uint16_t* _tmp_5407_openType = (uint16_t*) buffer;  // OpenType length variable 
                                                buffer += 2;
                                                const uint8_t *_tmp_5408_start = buffer; // Starting point
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m004777\033[0m| Choice selection: 1";
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(32) span(32) ext(true)
                                                uint8_t* _ext_flag_2428 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].
                                                *_ext_flag_2428 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements.size();
                                                if(__aux64__ > 32) __aux64__ = 32;
                                                uint16_t* _tmp_5409 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_5409 = __aux64__ - 1;
                                                
                                                int __ifh = __aux64__;
                                                for(int h = 0; h < __ifh; h++) { 
                                                    
                                                        // DeltaReferencePosition  SEQUENCE
                                                            //  deltaLatitude  DeltaLatitude      
                                                            //  deltaLongitude DeltaLongitude     
                                                            //  deltaAltitude  DeltaAltitude      
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(DeltaLatitude) name(delta_latitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m004779\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_latitude.value) << 
                                                                         " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_latitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_latitude.value;
                                                        }
                                                        
                                                        double _tmp_5411 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_latitude.value;
                                                        _tmp_5411 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_5411);
                                                        _tmp_5411 -= -131071;
                                                        uint32_t* _tmp_5410 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_5410 = static_cast<uint32_t>(_tmp_5411);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_latitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_latitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(DeltaLongitude) name(delta_longitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m004780\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_longitude.value) << 
                                                                         " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_longitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_longitude.value;
                                                        }
                                                        
                                                        double _tmp_5413 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_longitude.value;
                                                        _tmp_5413 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_5413);
                                                        _tmp_5413 -= -131071;
                                                        uint32_t* _tmp_5412 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_5412 = static_cast<uint32_t>(_tmp_5413);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_longitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_longitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(DeltaAltitude) name(delta_altitude) extGroup(0)
                                                        // Real
                                                        
                                                        // FLOAT  min(-12700) max(12800) span(25501) scaleDivisor(100.0) dataType(Float)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m004781\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_altitude.value) << 
                                                                         " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_altitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_altitude.value;
                                                        }
                                                        
                                                        float _tmp_5415 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_altitude.value;
                                                        _tmp_5415 *= 100.0;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_5415);
                                                        _tmp_5415 -= -12700;
                                                        uint16_t* _tmp_5414 = (uint16_t*) buffer; buffer += 2;
                                                        *_tmp_5414 = static_cast<uint16_t>(_tmp_5415);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -12700) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_altitude.value' (" << __aux64__ << ") less than (-12700); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 12800) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[h].delta_altitude.value' (" << __aux64__ << ") exceeds max allowable (12800); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                }
                                            
                                                *_tmp_5407_openType = buffer - _tmp_5408_start;  // OpenType length  
                                            }
                                            else if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions.size() != 0)  // CHOICE 2  fieldType(PolygonalLine) 
                                            {
                                                *_choice_161   = 2 - 4;  // Setting choice selection
                                                *_ext_flag_2424 = 1;      // setting ext flag
                                            
                                                uint16_t* _tmp_5416_openType = (uint16_t*) buffer;  // OpenType length variable 
                                                buffer += 2;
                                                const uint8_t *_tmp_5417_start = buffer; // Starting point
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m004782\033[0m| Choice selection: 2";
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                                uint8_t* _ext_flag_2432 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions[0].
                                                *_ext_flag_2432 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions[0].elements.size();
                                                if(__aux64__ > 8) __aux64__ = 8;
                                                uint16_t* _tmp_5418 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_5418 = __aux64__ - 1;
                                                
                                                int __ifi = __aux64__;
                                                for(int i = 0; i < __ifi; i++) { 
                                                    
                                                        // AbsolutePosition  SEQUENCE
                                                            //  latitude   Latitude       
                                                            //  longitude  Longitude      
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(Latitude) name(latitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m004784\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions[0].elements[i].latitude.value) << 
                                                                         " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions[0].elements[i].latitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions[0].elements[i].latitude.value;
                                                        }
                                                        
                                                        double _tmp_5420 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions[0].elements[i].latitude.value;
                                                        _tmp_5420 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_5420);
                                                        _tmp_5420 -= -900000000;
                                                        uint32_t* _tmp_5419 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_5419 = static_cast<uint32_t>(_tmp_5420);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions[0].elements[i].latitude.value' (" << __aux64__ << ") less than (-900000000); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions[0].elements[i].latitude.value' (" << __aux64__ << ") exceeds max allowable (900000001); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(Longitude) name(longitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m004785\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions[0].elements[i].longitude.value) << 
                                                                         " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions[0].elements[i].longitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions[0].elements[i].longitude.value;
                                                        }
                                                        
                                                        double _tmp_5422 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions[0].elements[i].longitude.value;
                                                        _tmp_5422 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_5422);
                                                        _tmp_5422 -= -1800000000;
                                                        uint32_t* _tmp_5421 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_5421 = static_cast<uint32_t>(_tmp_5422);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions[0].elements[i].longitude.value' (" << __aux64__ << ") less than (-1800000000); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions[0].elements[i].longitude.value' (" << __aux64__ << ") exceeds max allowable (1800000001); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                }
                                            
                                                *_tmp_5416_openType = buffer - _tmp_5417_start;  // OpenType length  
                                            }
                                            else if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude.size() != 0)  // CHOICE 3  fieldType(PolygonalLine) 
                                            {
                                                *_choice_161   = 3 - 4;  // Setting choice selection
                                                *_ext_flag_2424 = 1;      // setting ext flag
                                            
                                                uint16_t* _tmp_5423_openType = (uint16_t*) buffer;  // OpenType length variable 
                                                buffer += 2;
                                                const uint8_t *_tmp_5424_start = buffer; // Starting point
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m004786\033[0m| Choice selection: 3";
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                                uint8_t* _ext_flag_2435 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].
                                                *_ext_flag_2435 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements.size();
                                                if(__aux64__ > 8) __aux64__ = 8;
                                                uint16_t* _tmp_5425 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_5425 = __aux64__ - 1;
                                                
                                                int __ifj = __aux64__;
                                                for(int j = 0; j < __ifj; j++) { 
                                                    
                                                        // AbsolutePositionWAltitude  SEQUENCE
                                                            //  latitude   Latitude       
                                                            //  longitude  Longitude      
                                                            //  altitude   Altitude       
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(Latitude) name(latitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m004788\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].latitude.value) << 
                                                                         " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].latitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].latitude.value;
                                                        }
                                                        
                                                        double _tmp_5427 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].latitude.value;
                                                        _tmp_5427 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_5427);
                                                        _tmp_5427 -= -900000000;
                                                        uint32_t* _tmp_5426 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_5426 = static_cast<uint32_t>(_tmp_5427);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].latitude.value' (" << __aux64__ << ") less than (-900000000); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].latitude.value' (" << __aux64__ << ") exceeds max allowable (900000001); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(Longitude) name(longitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m004789\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].longitude.value) << 
                                                                         " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].longitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].longitude.value;
                                                        }
                                                        
                                                        double _tmp_5429 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].longitude.value;
                                                        _tmp_5429 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_5429);
                                                        _tmp_5429 -= -1800000000;
                                                        uint32_t* _tmp_5428 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_5428 = static_cast<uint32_t>(_tmp_5429);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].longitude.value' (" << __aux64__ << ") less than (-1800000000); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].longitude.value' (" << __aux64__ << ") exceeds max allowable (1800000001); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(Altitude) name(altitude) extGroup(0)
                                                            // Altitude  SEQUENCE
                                                                //  altitudeValue      AltitudeValue          
                                                                //  altitudeConfidence AltitudeConfidence     
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(AltitudeValue) name(altitude_value) extGroup(0)
                                                            // Real
                                                            
                                                            // FLOAT  min(-100000) max(800001) span(900002) scaleDivisor(100.0) dataType(Float)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m004790\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].altitude.altitude_value.value) << 
                                                                             " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].altitude.altitude_value.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].altitude.altitude_value.value;
                                                            }
                                                            
                                                            float _tmp_5431 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].altitude.altitude_value.value;
                                                            _tmp_5431 *= 100.0;
                                                            __aux64__ = static_cast<uint64_t>(_tmp_5431);
                                                            _tmp_5431 -= -100000;
                                                            uint32_t* _tmp_5430 = (uint32_t*) buffer; buffer += 4;
                                                            *_tmp_5430 = static_cast<uint32_t>(_tmp_5431);
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < -100000) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].altitude.altitude_value.value' (" << __aux64__ << ") less than (-100000); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 800001) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].altitude.altitude_value.value' (" << __aux64__ << ") exceeds max allowable (800001); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(AltitudeConfidence) name(altitude_confidence) extGroup(0)
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m004791\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].altitude.altitude_confidence.value) << 
                                                                             " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].altitude.altitude_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].altitude.altitude_confidence.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5432 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5432 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].altitude.altitude_confidence.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].altitude.altitude_confidence.value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].altitude.altitude_confidence.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[j].altitude.altitude_confidence.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                }
                                            
                                                *_tmp_5423_openType = buffer - _tmp_5424_start;  // OpenType length  
                                            }
                                            else
                                            {
                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_161) << ") selected in CHOICE PolygonalLine in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].line'; message dropped.";
                                                return -1;
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].lane_width.size() != 0) {
                                                // Field:  type(IVILaneWidth) name(lane_width) extGroup(0)
                                                // Integer
                                                
                                                // UINT16  min(0) max(1023) span(1024) dataType(UInt16)
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m004792\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].lane_width[0].value) << 
                                                                 " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].lane_width[0].value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].lane_width[0].value;
                                                }
                                                
                                                uint16_t* _tmp_5433 = (uint16_t*) buffer; buffer += 2;
                                                *_tmp_5433 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].lane_width[0].value; 
                                                __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].lane_width[0].value;
                                                
                                                // MIN validator
                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].lane_width[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                    return -1;
                                                }
                                                // MAX validator
                                                if (VALIDATORS_ENABLED && __aux64__ > 1023) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].segment[0].lane_width[0].value' (" << __aux64__ << ") exceeds max allowable (1023); message dropped.";
                                                    return -1;
                                                }
                                            }
                                    
                                    }
                                    else if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area.size() != 0)  // CHOICE 1  fieldType(Zone) 
                                    {
                                        *_choice_160 = 1;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m004793\033[0m| Choice selection: 1";
                                    
                                        // Choice
                                           // #0  deltaPositions   PolygonalLine_deltaPositions
                                           // #1  deltaPositionsWithAltitude   PolygonalLine_deltaPositionsWithAltitude
                                           // #2  absolutePositions   PolygonalLine_absolutePositions
                                           // #3  absolutePositionsWithAltitude   PolygonalLine_absolutePositionsWithAltitude
                                        uint8_t* _ext_flag_2441 = (uint8_t*) buffer; 
                                        buffer++;
                                        *_ext_flag_2441 = 0; 
                                        
                                        uint8_t* _choice_162 = (uint8_t*) buffer;
                                        buffer++;
                                        
                                        if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions.size() != 0) {  // CHOICE 0  fieldType(PolygonalLine) 
                                            *_choice_162   = 0 - 4;  // Setting choice selection
                                            *_ext_flag_2441 = 1;      // setting ext flag
                                        
                                            uint16_t* _tmp_5434_openType = (uint16_t*) buffer;  // OpenType length variable 
                                            buffer += 2;
                                            const uint8_t *_tmp_5435_start = buffer; // Starting point
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m004794\033[0m| Choice selection: 0";
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(32) span(32) ext(true)
                                            uint8_t* _ext_flag_2442 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions[0].
                                            *_ext_flag_2442 = 0; 
                                            
                                            __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions[0].elements.size();
                                            if(__aux64__ > 32) __aux64__ = 32;
                                            uint16_t* _tmp_5436 = (uint16_t*)buffer;
                                            buffer += 2;
                                            *_tmp_5436 = __aux64__ - 1;
                                            
                                            int __ifk = __aux64__;
                                            for(int k = 0; k < __ifk; k++) { 
                                                
                                                    // DeltaPosition  SEQUENCE
                                                        //  deltaLatitude  DeltaLatitude      
                                                        //  deltaLongitude DeltaLongitude     
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(DeltaLatitude) name(delta_latitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m004796\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions[0].elements[k].delta_latitude.value) << 
                                                                     " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions[0].elements[k].delta_latitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions[0].elements[k].delta_latitude.value;
                                                    }
                                                    
                                                    double _tmp_5438 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions[0].elements[k].delta_latitude.value;
                                                    _tmp_5438 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_5438);
                                                    _tmp_5438 -= -131071;
                                                    uint32_t* _tmp_5437 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_5437 = static_cast<uint32_t>(_tmp_5438);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions[0].elements[k].delta_latitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions[0].elements[k].delta_latitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(DeltaLongitude) name(delta_longitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m004797\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions[0].elements[k].delta_longitude.value) << 
                                                                     " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions[0].elements[k].delta_longitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions[0].elements[k].delta_longitude.value;
                                                    }
                                                    
                                                    double _tmp_5440 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions[0].elements[k].delta_longitude.value;
                                                    _tmp_5440 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_5440);
                                                    _tmp_5440 -= -131071;
                                                    uint32_t* _tmp_5439 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_5439 = static_cast<uint32_t>(_tmp_5440);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions[0].elements[k].delta_longitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions[0].elements[k].delta_longitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                            }
                                        
                                            *_tmp_5434_openType = buffer - _tmp_5435_start;  // OpenType length  
                                        }
                                        else if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude.size() != 0)  // CHOICE 1  fieldType(PolygonalLine) 
                                        {
                                            *_choice_162   = 1 - 4;  // Setting choice selection
                                            *_ext_flag_2441 = 1;      // setting ext flag
                                        
                                            uint16_t* _tmp_5441_openType = (uint16_t*) buffer;  // OpenType length variable 
                                            buffer += 2;
                                            const uint8_t *_tmp_5442_start = buffer; // Starting point
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m004798\033[0m| Choice selection: 1";
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(32) span(32) ext(true)
                                            uint8_t* _ext_flag_2445 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].
                                            *_ext_flag_2445 = 0; 
                                            
                                            __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements.size();
                                            if(__aux64__ > 32) __aux64__ = 32;
                                            uint16_t* _tmp_5443 = (uint16_t*)buffer;
                                            buffer += 2;
                                            *_tmp_5443 = __aux64__ - 1;
                                            
                                            int __ifl = __aux64__;
                                            for(int l = 0; l < __ifl; l++) { 
                                                
                                                    // DeltaReferencePosition  SEQUENCE
                                                        //  deltaLatitude  DeltaLatitude      
                                                        //  deltaLongitude DeltaLongitude     
                                                        //  deltaAltitude  DeltaAltitude      
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(DeltaLatitude) name(delta_latitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m004800\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_latitude.value) << 
                                                                     " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_latitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_latitude.value;
                                                    }
                                                    
                                                    double _tmp_5445 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_latitude.value;
                                                    _tmp_5445 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_5445);
                                                    _tmp_5445 -= -131071;
                                                    uint32_t* _tmp_5444 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_5444 = static_cast<uint32_t>(_tmp_5445);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_latitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_latitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(DeltaLongitude) name(delta_longitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m004801\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_longitude.value) << 
                                                                     " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_longitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_longitude.value;
                                                    }
                                                    
                                                    double _tmp_5447 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_longitude.value;
                                                    _tmp_5447 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_5447);
                                                    _tmp_5447 -= -131071;
                                                    uint32_t* _tmp_5446 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_5446 = static_cast<uint32_t>(_tmp_5447);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_longitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_longitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(DeltaAltitude) name(delta_altitude) extGroup(0)
                                                    // Real
                                                    
                                                    // FLOAT  min(-12700) max(12800) span(25501) scaleDivisor(100.0) dataType(Float)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m004802\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_altitude.value) << 
                                                                     " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_altitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_altitude.value;
                                                    }
                                                    
                                                    float _tmp_5449 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_altitude.value;
                                                    _tmp_5449 *= 100.0;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_5449);
                                                    _tmp_5449 -= -12700;
                                                    uint16_t* _tmp_5448 = (uint16_t*) buffer; buffer += 2;
                                                    *_tmp_5448 = static_cast<uint16_t>(_tmp_5449);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -12700) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_altitude.value' (" << __aux64__ << ") less than (-12700); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 12800) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].delta_positions_with_altitude[0].elements[l].delta_altitude.value' (" << __aux64__ << ") exceeds max allowable (12800); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                            }
                                        
                                            *_tmp_5441_openType = buffer - _tmp_5442_start;  // OpenType length  
                                        }
                                        else if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions.size() != 0)  // CHOICE 2  fieldType(PolygonalLine) 
                                        {
                                            *_choice_162   = 2 - 4;  // Setting choice selection
                                            *_ext_flag_2441 = 1;      // setting ext flag
                                        
                                            uint16_t* _tmp_5450_openType = (uint16_t*) buffer;  // OpenType length variable 
                                            buffer += 2;
                                            const uint8_t *_tmp_5451_start = buffer; // Starting point
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m004803\033[0m| Choice selection: 2";
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                            uint8_t* _ext_flag_2449 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions[0].
                                            *_ext_flag_2449 = 0; 
                                            
                                            __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions[0].elements.size();
                                            if(__aux64__ > 8) __aux64__ = 8;
                                            uint16_t* _tmp_5452 = (uint16_t*)buffer;
                                            buffer += 2;
                                            *_tmp_5452 = __aux64__ - 1;
                                            
                                            int __ifm = __aux64__;
                                            for(int m = 0; m < __ifm; m++) { 
                                                
                                                    // AbsolutePosition  SEQUENCE
                                                        //  latitude   Latitude       
                                                        //  longitude  Longitude      
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(Latitude) name(latitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m004805\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions[0].elements[m].latitude.value) << 
                                                                     " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions[0].elements[m].latitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions[0].elements[m].latitude.value;
                                                    }
                                                    
                                                    double _tmp_5454 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions[0].elements[m].latitude.value;
                                                    _tmp_5454 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_5454);
                                                    _tmp_5454 -= -900000000;
                                                    uint32_t* _tmp_5453 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_5453 = static_cast<uint32_t>(_tmp_5454);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions[0].elements[m].latitude.value' (" << __aux64__ << ") less than (-900000000); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions[0].elements[m].latitude.value' (" << __aux64__ << ") exceeds max allowable (900000001); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(Longitude) name(longitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m004806\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions[0].elements[m].longitude.value) << 
                                                                     " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions[0].elements[m].longitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions[0].elements[m].longitude.value;
                                                    }
                                                    
                                                    double _tmp_5456 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions[0].elements[m].longitude.value;
                                                    _tmp_5456 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_5456);
                                                    _tmp_5456 -= -1800000000;
                                                    uint32_t* _tmp_5455 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_5455 = static_cast<uint32_t>(_tmp_5456);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions[0].elements[m].longitude.value' (" << __aux64__ << ") less than (-1800000000); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions[0].elements[m].longitude.value' (" << __aux64__ << ") exceeds max allowable (1800000001); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                            }
                                        
                                            *_tmp_5450_openType = buffer - _tmp_5451_start;  // OpenType length  
                                        }
                                        else if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude.size() != 0)  // CHOICE 3  fieldType(PolygonalLine) 
                                        {
                                            *_choice_162   = 3 - 4;  // Setting choice selection
                                            *_ext_flag_2441 = 1;      // setting ext flag
                                        
                                            uint16_t* _tmp_5457_openType = (uint16_t*) buffer;  // OpenType length variable 
                                            buffer += 2;
                                            const uint8_t *_tmp_5458_start = buffer; // Starting point
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m004807\033[0m| Choice selection: 3";
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                            uint8_t* _ext_flag_2452 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].
                                            *_ext_flag_2452 = 0; 
                                            
                                            __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements.size();
                                            if(__aux64__ > 8) __aux64__ = 8;
                                            uint16_t* _tmp_5459 = (uint16_t*)buffer;
                                            buffer += 2;
                                            *_tmp_5459 = __aux64__ - 1;
                                            
                                            int __ifn = __aux64__;
                                            for(int n = 0; n < __ifn; n++) { 
                                                
                                                    // AbsolutePositionWAltitude  SEQUENCE
                                                        //  latitude   Latitude       
                                                        //  longitude  Longitude      
                                                        //  altitude   Altitude       
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(Latitude) name(latitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m004809\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].latitude.value) << 
                                                                     " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].latitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].latitude.value;
                                                    }
                                                    
                                                    double _tmp_5461 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].latitude.value;
                                                    _tmp_5461 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_5461);
                                                    _tmp_5461 -= -900000000;
                                                    uint32_t* _tmp_5460 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_5460 = static_cast<uint32_t>(_tmp_5461);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].latitude.value' (" << __aux64__ << ") less than (-900000000); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].latitude.value' (" << __aux64__ << ") exceeds max allowable (900000001); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(Longitude) name(longitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m004810\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].longitude.value) << 
                                                                     " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].longitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].longitude.value;
                                                    }
                                                    
                                                    double _tmp_5463 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].longitude.value;
                                                    _tmp_5463 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_5463);
                                                    _tmp_5463 -= -1800000000;
                                                    uint32_t* _tmp_5462 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_5462 = static_cast<uint32_t>(_tmp_5463);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].longitude.value' (" << __aux64__ << ") less than (-1800000000); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].longitude.value' (" << __aux64__ << ") exceeds max allowable (1800000001); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(Altitude) name(altitude) extGroup(0)
                                                        // Altitude  SEQUENCE
                                                            //  altitudeValue      AltitudeValue          
                                                            //  altitudeConfidence AltitudeConfidence     
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(AltitudeValue) name(altitude_value) extGroup(0)
                                                        // Real
                                                        
                                                        // FLOAT  min(-100000) max(800001) span(900002) scaleDivisor(100.0) dataType(Float)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m004811\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].altitude.altitude_value.value) << 
                                                                         " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].altitude.altitude_value.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].altitude.altitude_value.value;
                                                        }
                                                        
                                                        float _tmp_5465 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].altitude.altitude_value.value;
                                                        _tmp_5465 *= 100.0;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_5465);
                                                        _tmp_5465 -= -100000;
                                                        uint32_t* _tmp_5464 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_5464 = static_cast<uint32_t>(_tmp_5465);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -100000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].altitude.altitude_value.value' (" << __aux64__ << ") less than (-100000); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 800001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].altitude.altitude_value.value' (" << __aux64__ << ") exceeds max allowable (800001); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(AltitudeConfidence) name(altitude_confidence) extGroup(0)
                                                        // Enumerated
                                                        // INT32  min(0) max(15) span(16) dataType(Int32)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m004812\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].altitude.altitude_confidence.value) << 
                                                                         " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].altitude.altitude_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].altitude.altitude_confidence.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5466 = (uint8_t*)buffer;
                                                        buffer += 1;
                                                        *_tmp_5466 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].altitude.altitude_confidence.value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].altitude.altitude_confidence.value; 
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].altitude.altitude_confidence.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0].absolute_positions_with_altitude[0].elements[n].altitude.altitude_confidence.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                            }
                                        
                                            *_tmp_5457_openType = buffer - _tmp_5458_start;  // OpenType length  
                                        }
                                        else
                                        {
                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_162) << ") selected in CHOICE PolygonalLine in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].area[0]'; message dropped.";
                                            return -1;
                                        }
                                    
                                    }
                                    else if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment.size() != 0)  // CHOICE 2  fieldType(Zone) 
                                    {
                                        *_choice_160 = 2;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m004813\033[0m| Choice selection: 2";
                                    
                                            // ComputedSegment  SEQUENCE
                                                //  zoneId         Zid                                
                                                //  laneNumber     LanePosition                       
                                                //  laneWidth      IVILaneWidth                       
                                                //  offsetDistance ComputedSegment_offsetDistance   OPTIONAL  
                                                //  offsetPosition DeltaReferencePosition           OPTIONAL  
                                            // Optional fields bytemap
                                            char* _tmp_5467 = (char*) buffer++;
                                            *_tmp_5467 = (ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_distance.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m004814\033[0m| Optional field offset_distance = " << *_tmp_5467;
                                            char* _tmp_5468 = (char*) buffer++;
                                            *_tmp_5468 = (ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m004815\033[0m| Optional field offset_position = " << *_tmp_5468;
                                            
                                            // Field:  type(Zid) name(zone_id) extGroup(0)
                                            // Integer
                                            
                                            // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m004816\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].zone_id.value) << 
                                                             " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].zone_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].zone_id.value);
                                            }
                                            
                                            uint8_t* _ext_flag_2457 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].zone_id.
                                            *_ext_flag_2457 = (ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].zone_id.value >= 1 && ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].zone_id.value <= 32) ? 0 : 1;
                                            
                                            if(*_ext_flag_2457) {
                                                uint8_t* _tmp_5470 = (uint8_t*) buffer++; 
                                                if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].zone_id.value >= 0 && ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].zone_id.value <= INT32_MAX) {
                                                    *_tmp_5470 = 0;
                                                
                                                    uint32_t* _tmp_5469 = (uint32_t*)buffer; buffer += 4;
                                                    __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].zone_id.value;
                                                    __aux64__ -= INT32_MIN;
                                                    *_tmp_5469 = __aux64__;
                                                } 
                                                else
                                                {
                                                    *_tmp_5470 = 1;
                                                
                                                    uint64_t* _tmp_5469 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].zone_id.value;
                                                    __aux64__ -= INT64_MIN;
                                                    *_tmp_5469 = __aux64__;
                                                }
                                            } else {
                                                uint8_t* _tmp_5469 = (uint8_t*) buffer++;
                                                __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].zone_id.value - 1;
                                                *_tmp_5469 = __aux64__;
                                                __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].zone_id.value;
                                            }
                                            
                                            // Field:  type(LanePosition) name(lane_number) extGroup(0)
                                            // Integer
                                            
                                            // INT8  min(-1) max(14) span(16) dataType(Int8)
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m004817\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].lane_number.value) << 
                                                             " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].lane_number.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].lane_number.value);
                                            }
                                            
                                            uint8_t* _tmp_5471 = (uint8_t*) buffer++;
                                            __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].lane_number.value - -1;
                                            *_tmp_5471 = __aux64__;
                                            __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].lane_number.value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < -1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].lane_number.value' (" << __aux64__ << ") less than (-1); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 14) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].lane_number.value' (" << __aux64__ << ") exceeds max allowable (14); message dropped.";
                                                return -1;
                                            }
                                            
                                            // Field:  type(IVILaneWidth) name(lane_width) extGroup(0)
                                            // Integer
                                            
                                            // UINT16  min(0) max(1023) span(1024) dataType(UInt16)
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m004818\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].lane_width.value) << 
                                                             " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].lane_width.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].lane_width.value;
                                            }
                                            
                                            uint16_t* _tmp_5472 = (uint16_t*) buffer; buffer += 2;
                                            *_tmp_5472 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].lane_width.value; 
                                            __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].lane_width.value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].lane_width.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 1023) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].lane_width.value' (" << __aux64__ << ") exceeds max allowable (1023); message dropped.";
                                                return -1;
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_distance.size() != 0) {
                                                // Field:  type(ComputedSegment_offsetDistance) name(offset_distance) extGroup(0)
                                                // Integer
                                                
                                                // INT16  min(-32768) max(32767) span(65536) dataType(Int16)
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m004819\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_distance[0].value) << 
                                                                 " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_distance[0].value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_distance[0].value;
                                                }
                                                
                                                uint16_t* _tmp_5473 = (uint16_t*) buffer; buffer += 2;
                                                __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_distance[0].value - -32768;
                                                *_tmp_5473 = __aux64__;
                                                __aux64__ = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_distance[0].value;
                                                
                                                // MIN validator
                                                if (VALIDATORS_ENABLED && __aux64__ < -32768) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_distance[0].value' (" << __aux64__ << ") less than (-32768); message dropped.";
                                                    return -1;
                                                }
                                                // MAX validator
                                                if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_distance[0].value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                    return -1;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position.size() != 0) {
                                                // Field:  type(DeltaReferencePosition) name(offset_position) extGroup(0)
                                                    // DeltaReferencePosition  SEQUENCE
                                                        //  deltaLatitude  DeltaLatitude      
                                                        //  deltaLongitude DeltaLongitude     
                                                        //  deltaAltitude  DeltaAltitude      
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(DeltaLatitude) name(delta_latitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m004820\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_latitude.value) << 
                                                                     " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_latitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_latitude.value;
                                                    }
                                                    
                                                    double _tmp_5475 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_latitude.value;
                                                    _tmp_5475 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_5475);
                                                    _tmp_5475 -= -131071;
                                                    uint32_t* _tmp_5474 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_5474 = static_cast<uint32_t>(_tmp_5475);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_latitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_latitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(DeltaLongitude) name(delta_longitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m004821\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_longitude.value) << 
                                                                     " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_longitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_longitude.value;
                                                    }
                                                    
                                                    double _tmp_5477 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_longitude.value;
                                                    _tmp_5477 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_5477);
                                                    _tmp_5477 -= -131071;
                                                    uint32_t* _tmp_5476 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_5476 = static_cast<uint32_t>(_tmp_5477);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_longitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_longitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(DeltaAltitude) name(delta_altitude) extGroup(0)
                                                    // Real
                                                    
                                                    // FLOAT  min(-12700) max(12800) span(25501) scaleDivisor(100.0) dataType(Float)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m004822\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_altitude.value) << 
                                                                     " ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_altitude.value: " << ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_altitude.value;
                                                    }
                                                    
                                                    float _tmp_5479 = ros->ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_altitude.value;
                                                    _tmp_5479 *= 100.0;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_5479);
                                                    _tmp_5479 -= -12700;
                                                    uint16_t* _tmp_5478 = (uint16_t*) buffer; buffer += 2;
                                                    *_tmp_5478 = static_cast<uint16_t>(_tmp_5479);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -12700) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_altitude.value' (" << __aux64__ << ") less than (-12700); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 12800) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0].computed_segment[0].offset_position[0].delta_altitude.value' (" << __aux64__ << ") exceeds max allowable (12800); message dropped.";
                                                        return -1;
                                                    }
                                            }
                                    
                                    }
                                    else
                                    {
                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_160) << ") selected in CHOICE Zone in 'ivi.optional[0].elements[e].glc[0].parts.elements[f].zone[0]'; message dropped.";
                                        return -1;
                                    }
                                }
                                
                                if(*_ext_flag_2418) {
                                }
                        }
                        
                        if(*_ext_flag_2404) {
                        }
                
                }
                else if(ros->ivi.optional[0].elements[e].giv.size() != 0)  // CHOICE 1  fieldType(IviContainer) 
                {
                    *_choice_159 = 1;  // Setting choice selection
                
                    if(debug)
                        logger->debug() << "|\033[38;5;94m004823\033[0m| Choice selection: 1";
                
                    // SequenceOf
                    // Data Type UInt8
                    // SEQUENCE_OF  min(1) max(16) span(16) ext(true)
                    uint8_t* _ext_flag_2464 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].
                    *_ext_flag_2464 = 0; 
                    
                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements.size();
                    if(__aux64__ > 16) __aux64__ = 16;
                    uint16_t* _tmp_5482 = (uint16_t*)buffer;
                    buffer += 2;
                    *_tmp_5482 = __aux64__ - 1;
                    
                    int __ifo = __aux64__;
                    for(int o = 0; o < __ifo; o++) { 
                        
                            // GicPart  SEQUENCE
                                //  detectionZoneIds       GicPart_detectionZoneIds         OPTIONAL  
                                //  its_Rrid               VarLengthNumber                  OPTIONAL  
                                //  relevanceZoneIds       GicPart_relevanceZoneIds         OPTIONAL  
                                //  direction              Direction                        OPTIONAL  
                                //  driverAwarenessZoneIds GicPart_driverAwarenessZoneIds   OPTIONAL  
                                //  minimumAwarenessTime   GicPart_minimumAwarenessTime     OPTIONAL  
                                //  applicableLanes        GicPart_applicableLanes          OPTIONAL  
                                //  iviType                IviType                            
                                //  iviPurpose             IviPurpose                       OPTIONAL  
                                //  laneStatus             LaneStatus                       OPTIONAL  
                                //  vehicleCharacteristics GicPart_vehicleCharacteristics   OPTIONAL  
                                //  driverCharacteristics  DriverCharacteristics            OPTIONAL  
                                //  layoutId               GicPart_layoutId                 OPTIONAL  
                                //  preStoredlayoutId      GicPart_preStoredlayoutId        OPTIONAL  
                                //  roadSignCodes          GicPart_roadSignCodes              
                                //  extraText              GicPart_extraText                OPTIONAL  
                                //  ...
                            uint8_t* _ext_flag_2465 = (uint8_t*) buffer++;  // Write extension flag for GicPart
                            *_ext_flag_2465 = 0;  
                            
                            // Optional fields bytemap
                            char* _tmp_5483 = (char*) buffer++;
                            *_tmp_5483 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m004825\033[0m| Optional field detection_zone_ids = " << *_tmp_5483;
                            char* _tmp_5484 = (char*) buffer++;
                            *_tmp_5484 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m004826\033[0m| Optional field its_rrid = " << *_tmp_5484;
                            char* _tmp_5485 = (char*) buffer++;
                            *_tmp_5485 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m004827\033[0m| Optional field relevance_zone_ids = " << *_tmp_5485;
                            char* _tmp_5486 = (char*) buffer++;
                            *_tmp_5486 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].direction.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m004828\033[0m| Optional field direction = " << *_tmp_5486;
                            char* _tmp_5487 = (char*) buffer++;
                            *_tmp_5487 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m004829\033[0m| Optional field driver_awareness_zone_ids = " << *_tmp_5487;
                            char* _tmp_5488 = (char*) buffer++;
                            *_tmp_5488 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].minimum_awareness_time.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m004830\033[0m| Optional field minimum_awareness_time = " << *_tmp_5488;
                            char* _tmp_5489 = (char*) buffer++;
                            *_tmp_5489 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].applicable_lanes.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m004831\033[0m| Optional field applicable_lanes = " << *_tmp_5489;
                            char* _tmp_5490 = (char*) buffer++;
                            *_tmp_5490 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].ivi_purpose.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m004832\033[0m| Optional field ivi_purpose = " << *_tmp_5490;
                            char* _tmp_5491 = (char*) buffer++;
                            *_tmp_5491 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].lane_status.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m004833\033[0m| Optional field lane_status = " << *_tmp_5491;
                            char* _tmp_5492 = (char*) buffer++;
                            *_tmp_5492 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m004834\033[0m| Optional field vehicle_characteristics = " << *_tmp_5492;
                            char* _tmp_5493 = (char*) buffer++;
                            *_tmp_5493 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_characteristics.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m004835\033[0m| Optional field driver_characteristics = " << *_tmp_5493;
                            char* _tmp_5494 = (char*) buffer++;
                            *_tmp_5494 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].layout_id.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m004836\033[0m| Optional field layout_id = " << *_tmp_5494;
                            char* _tmp_5495 = (char*) buffer++;
                            *_tmp_5495 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].pre_storedlayout_id.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m004837\033[0m| Optional field pre_storedlayout_id = " << *_tmp_5495;
                            char* _tmp_5496 = (char*) buffer++;
                            *_tmp_5496 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m004838\033[0m| Optional field extra_text = " << *_tmp_5496;
                            
                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids.size() != 0) {
                                // Field:  type(GicPart_detectionZoneIds) name(detection_zone_ids) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_2466 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids[0].
                                *_ext_flag_2466 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_5497 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_5497 = __aux64__ - 1;
                                
                                int __ifp = __aux64__;
                                for(int p = 0; p < __ifp; p++) { 
                                    
                                    // Integer
                                    
                                    // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m004840\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids[0].elements[p].value) << 
                                                     " ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids[0].elements[p].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids[0].elements[p].value);
                                    }
                                    
                                    uint8_t* _ext_flag_2467 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids[0].elements[p].
                                    *_ext_flag_2467 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids[0].elements[p].value >= 1 && ros->ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids[0].elements[p].value <= 32) ? 0 : 1;
                                    
                                    if(*_ext_flag_2467) {
                                        uint8_t* _tmp_5499 = (uint8_t*) buffer++; 
                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids[0].elements[p].value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids[0].elements[p].value <= INT32_MAX) {
                                            *_tmp_5499 = 0;
                                        
                                            uint32_t* _tmp_5498 = (uint32_t*)buffer; buffer += 4;
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids[0].elements[p].value;
                                            __aux64__ -= INT32_MIN;
                                            *_tmp_5498 = __aux64__;
                                        } 
                                        else
                                        {
                                            *_tmp_5499 = 1;
                                        
                                            uint64_t* _tmp_5498 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids[0].elements[p].value;
                                            __aux64__ -= INT64_MIN;
                                            *_tmp_5498 = __aux64__;
                                        }
                                    } else {
                                        uint8_t* _tmp_5498 = (uint8_t*) buffer++;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids[0].elements[p].value - 1;
                                        *_tmp_5498 = __aux64__;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].detection_zone_ids[0].elements[p].value;
                                    }
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid.size() != 0) {
                                // Field:  type(VarLengthNumber) name(its_rrid) extGroup(0)
                                // Choice
                                   // #0  content   VarLengthNumber_content
                                   // #1  extension   Ext1
                                uint8_t* _choice_163 = (uint8_t*) buffer;
                                buffer++;
                                
                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].content.size() != 0) {  // CHOICE 0  fieldType(VarLengthNumber) 
                                    *_choice_163 = 0;  // Setting choice selection
                                
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m004841\033[0m| Choice selection: 0";
                                
                                    // Integer
                                    
                                    // UINT8  min(0) max(127) span(128) dataType(UInt8)
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m004842\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].content[0].value) << 
                                                     " ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].content[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].content[0].value);
                                    }
                                    
                                    uint8_t* _tmp_5500 = (uint8_t*) buffer++;
                                    *_tmp_5500 = ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].content[0].value; 
                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].content[0].value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].content[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 127) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].content[0].value' (" << __aux64__ << ") exceeds max allowable (127); message dropped.";
                                        return -1;
                                    }
                                
                                }
                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension.size() != 0)  // CHOICE 1  fieldType(VarLengthNumber) 
                                {
                                    *_choice_163 = 1;  // Setting choice selection
                                
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m004843\033[0m| Choice selection: 1";
                                
                                    // Choice
                                       // #0  content   Ext1_content
                                       // #1  extension   Ext2
                                    uint8_t* _choice_164 = (uint8_t*) buffer;
                                    buffer++;
                                    
                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].content.size() != 0) {  // CHOICE 0  fieldType(Ext1) 
                                        *_choice_164 = 0;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m004844\033[0m| Choice selection: 0";
                                    
                                        // Integer
                                        
                                        // UINT16  min(128) max(16511) span(16384) dataType(UInt16)
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m004845\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].content[0].value) << 
                                                         " ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].content[0].value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].content[0].value;
                                        }
                                        
                                        uint16_t* _tmp_5501 = (uint16_t*) buffer; buffer += 2;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].content[0].value - 128;
                                        *_tmp_5501 = __aux64__;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].content[0].value;
                                        
                                        // MIN validator
                                        if (VALIDATORS_ENABLED && __aux64__ < 128) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].content[0].value' (" << __aux64__ << ") less than (128); message dropped.";
                                            return -1;
                                        }
                                        // MAX validator
                                        if (VALIDATORS_ENABLED && __aux64__ > 16511) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].content[0].value' (" << __aux64__ << ") exceeds max allowable (16511); message dropped.";
                                            return -1;
                                        }
                                    
                                    }
                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension.size() != 0)  // CHOICE 1  fieldType(Ext1) 
                                    {
                                        *_choice_164 = 1;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m004846\033[0m| Choice selection: 1";
                                    
                                        // Choice
                                           // #0  content   Ext2_content
                                           // #1  extension   Ext3
                                        uint8_t* _choice_165 = (uint8_t*) buffer;
                                        buffer++;
                                        
                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].content.size() != 0) {  // CHOICE 0  fieldType(Ext2) 
                                            *_choice_165 = 0;  // Setting choice selection
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m004847\033[0m| Choice selection: 0";
                                        
                                            // Integer
                                            
                                            // UINT32  min(16512) max(2113663) span(2097152) dataType(UInt32)
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m004848\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].content[0].value) << 
                                                             " ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].content[0].value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].content[0].value;
                                            }
                                            
                                            uint32_t* _tmp_5502 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].content[0].value - 16512;
                                            *_tmp_5502 = __aux64__;
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].content[0].value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < 16512) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].content[0].value' (" << __aux64__ << ") less than (16512); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 2113663) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].content[0].value' (" << __aux64__ << ") exceeds max allowable (2113663); message dropped.";
                                                return -1;
                                            }
                                        
                                        }
                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].extension.size() != 0)  // CHOICE 1  fieldType(Ext2) 
                                        {
                                            *_choice_165 = 1;  // Setting choice selection
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m004849\033[0m| Choice selection: 1";
                                        
                                            // Integer
                                            
                                            // UINT32  min(2113664) max(270549119) span(268435456) dataType(UInt32)
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m004850\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].extension[0].value) << 
                                                             " ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].extension[0].value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].extension[0].value;
                                            }
                                            
                                            uint8_t* _ext_flag_2474 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].extension[0].
                                            *_ext_flag_2474 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].extension[0].value >= 2113664 && ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].extension[0].value <= 270549119) ? 0 : 1;
                                            
                                            if(*_ext_flag_2474) {
                                                uint8_t* _tmp_5504 = (uint8_t*) buffer++; 
                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].extension[0].value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].extension[0].value <= INT32_MAX) {
                                                    *_tmp_5504 = 0;
                                                
                                                    uint32_t* _tmp_5503 = (uint32_t*)buffer; buffer += 4;
                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].extension[0].value;
                                                    __aux64__ -= INT32_MIN;
                                                    *_tmp_5503 = __aux64__;
                                                } 
                                                else
                                                {
                                                    *_tmp_5504 = 1;
                                                
                                                    uint64_t* _tmp_5503 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].extension[0].value;
                                                    __aux64__ -= INT64_MIN;
                                                    *_tmp_5503 = __aux64__;
                                                }
                                            } else {
                                                uint32_t* _tmp_5503 = (uint32_t*) buffer; buffer += 4;
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].extension[0].value - 2113664;
                                                *_tmp_5503 = __aux64__;
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0].extension[0].value;
                                            }
                                        
                                        }
                                        else
                                        {
                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_165) << ") selected in CHOICE Ext2 in 'ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0].extension[0]'; message dropped.";
                                            return -1;
                                        }
                                    
                                    }
                                    else
                                    {
                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_164) << ") selected in CHOICE Ext1 in 'ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0].extension[0]'; message dropped.";
                                        return -1;
                                    }
                                
                                }
                                else
                                {
                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_163) << ") selected in CHOICE VarLengthNumber in 'ivi.optional[0].elements[e].giv[0].elements[o].its_rrid[0]'; message dropped.";
                                    return -1;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids.size() != 0) {
                                // Field:  type(GicPart_relevanceZoneIds) name(relevance_zone_ids) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_2475 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids[0].
                                *_ext_flag_2475 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_5505 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_5505 = __aux64__ - 1;
                                
                                int __ifq = __aux64__;
                                for(int q = 0; q < __ifq; q++) { 
                                    
                                    // Integer
                                    
                                    // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m004852\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids[0].elements[q].value) << 
                                                     " ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids[0].elements[q].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids[0].elements[q].value);
                                    }
                                    
                                    uint8_t* _ext_flag_2476 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids[0].elements[q].
                                    *_ext_flag_2476 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids[0].elements[q].value >= 1 && ros->ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids[0].elements[q].value <= 32) ? 0 : 1;
                                    
                                    if(*_ext_flag_2476) {
                                        uint8_t* _tmp_5507 = (uint8_t*) buffer++; 
                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids[0].elements[q].value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids[0].elements[q].value <= INT32_MAX) {
                                            *_tmp_5507 = 0;
                                        
                                            uint32_t* _tmp_5506 = (uint32_t*)buffer; buffer += 4;
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids[0].elements[q].value;
                                            __aux64__ -= INT32_MIN;
                                            *_tmp_5506 = __aux64__;
                                        } 
                                        else
                                        {
                                            *_tmp_5507 = 1;
                                        
                                            uint64_t* _tmp_5506 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids[0].elements[q].value;
                                            __aux64__ -= INT64_MIN;
                                            *_tmp_5506 = __aux64__;
                                        }
                                    } else {
                                        uint8_t* _tmp_5506 = (uint8_t*) buffer++;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids[0].elements[q].value - 1;
                                        *_tmp_5506 = __aux64__;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].relevance_zone_ids[0].elements[q].value;
                                    }
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].direction.size() != 0) {
                                // Field:  type(Direction) name(direction) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m004853\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].direction[0].value) << 
                                                 " ivi.optional[0].elements[e].giv[0].elements[o].direction[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].direction[0].value);
                                }
                                
                                uint8_t* _tmp_5508 = (uint8_t*) buffer++;
                                *_tmp_5508 = ros->ivi.optional[0].elements[e].giv[0].elements[o].direction[0].value; 
                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].direction[0].value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].direction[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].direction[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                    return -1;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids.size() != 0) {
                                // Field:  type(GicPart_driverAwarenessZoneIds) name(driver_awareness_zone_ids) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_2478 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids[0].
                                *_ext_flag_2478 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_5509 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_5509 = __aux64__ - 1;
                                
                                int __ifr = __aux64__;
                                for(int r = 0; r < __ifr; r++) { 
                                    
                                    // Integer
                                    
                                    // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m004855\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids[0].elements[r].value) << 
                                                     " ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids[0].elements[r].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids[0].elements[r].value);
                                    }
                                    
                                    uint8_t* _ext_flag_2479 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids[0].elements[r].
                                    *_ext_flag_2479 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids[0].elements[r].value >= 1 && ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids[0].elements[r].value <= 32) ? 0 : 1;
                                    
                                    if(*_ext_flag_2479) {
                                        uint8_t* _tmp_5511 = (uint8_t*) buffer++; 
                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids[0].elements[r].value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids[0].elements[r].value <= INT32_MAX) {
                                            *_tmp_5511 = 0;
                                        
                                            uint32_t* _tmp_5510 = (uint32_t*)buffer; buffer += 4;
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids[0].elements[r].value;
                                            __aux64__ -= INT32_MIN;
                                            *_tmp_5510 = __aux64__;
                                        } 
                                        else
                                        {
                                            *_tmp_5511 = 1;
                                        
                                            uint64_t* _tmp_5510 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids[0].elements[r].value;
                                            __aux64__ -= INT64_MIN;
                                            *_tmp_5510 = __aux64__;
                                        }
                                    } else {
                                        uint8_t* _tmp_5510 = (uint8_t*) buffer++;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids[0].elements[r].value - 1;
                                        *_tmp_5510 = __aux64__;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_awareness_zone_ids[0].elements[r].value;
                                    }
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].minimum_awareness_time.size() != 0) {
                                // Field:  type(GicPart_minimumAwarenessTime) name(minimum_awareness_time) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m004856\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].minimum_awareness_time[0].value) << 
                                                 " ivi.optional[0].elements[e].giv[0].elements[o].minimum_awareness_time[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].minimum_awareness_time[0].value);
                                }
                                
                                uint8_t* _tmp_5512 = (uint8_t*) buffer++;
                                *_tmp_5512 = ros->ivi.optional[0].elements[e].giv[0].elements[o].minimum_awareness_time[0].value; 
                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].minimum_awareness_time[0].value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].minimum_awareness_time[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].minimum_awareness_time[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                    return -1;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].applicable_lanes.size() != 0) {
                                // Field:  type(GicPart_applicableLanes) name(applicable_lanes) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_2481 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].applicable_lanes[0].
                                *_ext_flag_2481 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].applicable_lanes[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_5513 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_5513 = __aux64__ - 1;
                                
                                int __ifs = __aux64__;
                                for(int s = 0; s < __ifs; s++) { 
                                    
                                    // Integer
                                    
                                    // INT8  min(-1) max(14) span(16) dataType(Int8)
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m004858\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].applicable_lanes[0].elements[s].value) << 
                                                     " ivi.optional[0].elements[e].giv[0].elements[o].applicable_lanes[0].elements[s].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].applicable_lanes[0].elements[s].value);
                                    }
                                    
                                    uint8_t* _tmp_5514 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].applicable_lanes[0].elements[s].value - -1;
                                    *_tmp_5514 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].applicable_lanes[0].elements[s].value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].applicable_lanes[0].elements[s].value' (" << __aux64__ << ") less than (-1); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].applicable_lanes[0].elements[s].value' (" << __aux64__ << ") exceeds max allowable (14); message dropped.";
                                        return -1;
                                    }
                                    
                                }
                            }
                            
                            // Field:  type(IviType) name(ivi_type) extGroup(0)
                            // Integer
                            
                            // UINT8  min(0) max(7) span(8) dataType(UInt8)
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m004859\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].ivi_type.value) << 
                                             " ivi.optional[0].elements[e].giv[0].elements[o].ivi_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].ivi_type.value);
                            }
                            
                            uint8_t* _tmp_5515 = (uint8_t*) buffer++;
                            *_tmp_5515 = ros->ivi.optional[0].elements[e].giv[0].elements[o].ivi_type.value; 
                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].ivi_type.value;
                            
                            // MIN validator
                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].ivi_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                return -1;
                            }
                            // MAX validator
                            if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].ivi_type.value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                return -1;
                            }
                            
                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].ivi_purpose.size() != 0) {
                                // Field:  type(IviPurpose) name(ivi_purpose) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m004860\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].ivi_purpose[0].value) << 
                                                 " ivi.optional[0].elements[e].giv[0].elements[o].ivi_purpose[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].ivi_purpose[0].value);
                                }
                                
                                uint8_t* _tmp_5516 = (uint8_t*) buffer++;
                                *_tmp_5516 = ros->ivi.optional[0].elements[e].giv[0].elements[o].ivi_purpose[0].value; 
                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].ivi_purpose[0].value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].ivi_purpose[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].ivi_purpose[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                    return -1;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].lane_status.size() != 0) {
                                // Field:  type(LaneStatus) name(lane_status) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m004861\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].lane_status[0].value) << 
                                                 " ivi.optional[0].elements[e].giv[0].elements[o].lane_status[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].lane_status[0].value);
                                }
                                
                                uint8_t* _ext_flag_2485 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].lane_status[0].
                                *_ext_flag_2485 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].lane_status[0].value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].lane_status[0].value <= 7) ? 0 : 1;
                                
                                if(*_ext_flag_2485) {
                                    uint8_t* _tmp_5518 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].lane_status[0].value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].lane_status[0].value <= INT32_MAX) {
                                        *_tmp_5518 = 0;
                                    
                                        uint32_t* _tmp_5517 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].lane_status[0].value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_5517 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_5518 = 1;
                                    
                                        uint64_t* _tmp_5517 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].lane_status[0].value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_5517 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_5517 = (uint8_t*) buffer++;
                                    *_tmp_5517 = ros->ivi.optional[0].elements[e].giv[0].elements[o].lane_status[0].value; 
                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].lane_status[0].value;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics.size() != 0) {
                                // Field:  type(GicPart_vehicleCharacteristics) name(vehicle_characteristics) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_2486 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].
                                *_ext_flag_2486 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_5519 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_5519 = __aux64__ - 1;
                                
                                int __ift = __aux64__;
                                for(int t = 0; t < __ift; t++) { 
                                    
                                        // CompleteVehicleCharacteristics  SEQUENCE
                                            //  tractor    TractorCharacteristics                   OPTIONAL  
                                            //  trailer    CompleteVehicleCharacteristics_trailer   OPTIONAL  
                                            //  train      TrainCharacteristics                     OPTIONAL  
                                        // Optional fields bytemap
                                        char* _tmp_5520 = (char*) buffer++;
                                        *_tmp_5520 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor.size() != 0 ? 1 : 0);
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m004863\033[0m| Optional field tractor = " << *_tmp_5520;
                                        char* _tmp_5521 = (char*) buffer++;
                                        *_tmp_5521 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer.size() != 0 ? 1 : 0);
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m004864\033[0m| Optional field trailer = " << *_tmp_5521;
                                        char* _tmp_5522 = (char*) buffer++;
                                        *_tmp_5522 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train.size() != 0 ? 1 : 0);
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m004865\033[0m| Optional field train = " << *_tmp_5522;
                                        
                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor.size() != 0) {
                                            // Field:  type(TractorCharacteristics) name(tractor) extGroup(0)
                                                // TractorCharacteristics  SEQUENCE
                                                    //  equalTo    TractorCharacteristics_equalTo      OPTIONAL  
                                                    //  notEqualTo TractorCharacteristics_notEqualTo   OPTIONAL  
                                                    //  ranges     TractorCharacteristics_ranges       OPTIONAL  
                                                // Optional fields bytemap
                                                char* _tmp_5523 = (char*) buffer++;
                                                *_tmp_5523 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to.size() != 0 ? 1 : 0);
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m004866\033[0m| Optional field equal_to = " << *_tmp_5523;
                                                char* _tmp_5524 = (char*) buffer++;
                                                *_tmp_5524 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to.size() != 0 ? 1 : 0);
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m004867\033[0m| Optional field not_equal_to = " << *_tmp_5524;
                                                char* _tmp_5525 = (char*) buffer++;
                                                *_tmp_5525 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges.size() != 0 ? 1 : 0);
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m004868\033[0m| Optional field ranges = " << *_tmp_5525;
                                                
                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to.size() != 0) {
                                                    // Field:  type(TractorCharacteristics_equalTo) name(equal_to) extGroup(0)
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                    uint8_t* _ext_flag_2487 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].
                                                    *_ext_flag_2487 = 0; 
                                                    
                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements.size();
                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                    uint16_t* _tmp_5526 = (uint16_t*)buffer;
                                                    buffer += 2;
                                                    *_tmp_5526 = __aux64__ - 1;
                                                    
                                                    int __ifu = __aux64__;
                                                    for(int u = 0; u < __ifu; u++) { 
                                                        
                                                        // Choice
                                                           // #0  simpleVehicleType   StationType
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                           // #2  iso3833VehicleType   Iso3833VehicleType
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                           // #4  engineCharacteristics   EngineCharacteristics
                                                           // #5  loadType   LoadType
                                                           // #6  usage   VehicleRole
                                                        uint8_t* _ext_flag_2488 = (uint8_t*) buffer; 
                                                        buffer++;
                                                        *_ext_flag_2488 = 0; 
                                                        
                                                        uint8_t* _choice_166 = (uint8_t*) buffer;
                                                        buffer++;
                                                        
                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                            *_choice_166 = 0;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m004870\033[0m| Choice selection: 0";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m004871\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5527 = (uint8_t*) buffer++;
                                                            *_tmp_5527 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_166 = 1;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m004872\033[0m| Choice selection: 1";
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                            uint8_t* _choice_167 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                *_choice_167 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004873\033[0m| Choice selection: 0";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004874\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5528 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5528 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_167 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004875\033[0m| Choice selection: 1";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004876\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5529 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5529 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_167 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004877\033[0m| Choice selection: 2";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004878\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5530 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5530 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_167 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004879\033[0m| Choice selection: 3";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004880\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5531 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5531 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_167) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0]'; message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_166 = 2;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m004881\033[0m| Choice selection: 2";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m004882\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5532 = (uint8_t*) buffer++;
                                                            *_tmp_5532 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_166 = 3;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m004883\033[0m| Choice selection: 3";
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004884\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5533 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5533 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004885\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5534 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5534 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_166 = 4;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m004886\033[0m| Choice selection: 4";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m004887\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5535 = (uint8_t*) buffer++;
                                                            *_tmp_5535 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_166 = 5;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m004888\033[0m| Choice selection: 5";
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004889\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_2499 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.
                                                                *_ext_flag_2499 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_2499) {
                                                                    uint8_t* _tmp_5537 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value <= INT32_MAX) {
                                                                        *_tmp_5537 = 0;
                                                                    
                                                                        uint32_t* _tmp_5536 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_5536 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_5537 = 1;
                                                                    
                                                                        uint64_t* _tmp_5536 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_5536 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_5536 = (uint8_t*) buffer++;
                                                                    *_tmp_5536 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value;
                                                                }
                                                                
                                                                // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004890\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5538 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5538 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004891\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values.size() < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values.size() > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_5539 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values.size();
                                                                if(__aux64__ > 4) __aux64__ = 4;
                                                                *_tmp_5539 = __aux64__ - 4;
                                                                buffer += 1;
                                                                
                                                                int __ifv = __aux64__;
                                                                for(int v = 0; v < __ifv; v++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values[v]? 1: 0);
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_166 = 6;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m004892\033[0m| Choice selection: 6";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m004893\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].usage[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].usage[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5540 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5540 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].usage[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].usage[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_166) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].equal_to[0].elements[u]'; message dropped.";
                                                            return -1;
                                                        }
                                                    }
                                                }
                                                
                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to.size() != 0) {
                                                    // Field:  type(TractorCharacteristics_notEqualTo) name(not_equal_to) extGroup(0)
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                    uint8_t* _ext_flag_2502 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].
                                                    *_ext_flag_2502 = 0; 
                                                    
                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements.size();
                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                    uint16_t* _tmp_5541 = (uint16_t*)buffer;
                                                    buffer += 2;
                                                    *_tmp_5541 = __aux64__ - 1;
                                                    
                                                    int __ifw = __aux64__;
                                                    for(int w = 0; w < __ifw; w++) { 
                                                        
                                                        // Choice
                                                           // #0  simpleVehicleType   StationType
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                           // #2  iso3833VehicleType   Iso3833VehicleType
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                           // #4  engineCharacteristics   EngineCharacteristics
                                                           // #5  loadType   LoadType
                                                           // #6  usage   VehicleRole
                                                        uint8_t* _ext_flag_2503 = (uint8_t*) buffer; 
                                                        buffer++;
                                                        *_ext_flag_2503 = 0; 
                                                        
                                                        uint8_t* _choice_168 = (uint8_t*) buffer;
                                                        buffer++;
                                                        
                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                            *_choice_168 = 0;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m004895\033[0m| Choice selection: 0";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m004896\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5542 = (uint8_t*) buffer++;
                                                            *_tmp_5542 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_168 = 1;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m004897\033[0m| Choice selection: 1";
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                            uint8_t* _choice_169 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                *_choice_169 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004898\033[0m| Choice selection: 0";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004899\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5543 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5543 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_169 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004900\033[0m| Choice selection: 1";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004901\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5544 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5544 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_169 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004902\033[0m| Choice selection: 2";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004903\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5545 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5545 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_169 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004904\033[0m| Choice selection: 3";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004905\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5546 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5546 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_169) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0]'; message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_168 = 2;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m004906\033[0m| Choice selection: 2";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m004907\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5547 = (uint8_t*) buffer++;
                                                            *_tmp_5547 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_168 = 3;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m004908\033[0m| Choice selection: 3";
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004909\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5548 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5548 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004910\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5549 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5549 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_168 = 4;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m004911\033[0m| Choice selection: 4";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m004912\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5550 = (uint8_t*) buffer++;
                                                            *_tmp_5550 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_168 = 5;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m004913\033[0m| Choice selection: 5";
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004914\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_2514 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.
                                                                *_ext_flag_2514 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_2514) {
                                                                    uint8_t* _tmp_5552 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value <= INT32_MAX) {
                                                                        *_tmp_5552 = 0;
                                                                    
                                                                        uint32_t* _tmp_5551 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_5551 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_5552 = 1;
                                                                    
                                                                        uint64_t* _tmp_5551 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_5551 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_5551 = (uint8_t*) buffer++;
                                                                    *_tmp_5551 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value;
                                                                }
                                                                
                                                                // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004915\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5553 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5553 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004916\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values.size() < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values.size() > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_5554 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values.size();
                                                                if(__aux64__ > 4) __aux64__ = 4;
                                                                *_tmp_5554 = __aux64__ - 4;
                                                                buffer += 1;
                                                                
                                                                int __ifx = __aux64__;
                                                                for(int x = 0; x < __ifx; x++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values[x]? 1: 0);
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_168 = 6;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m004917\033[0m| Choice selection: 6";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m004918\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].usage[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].usage[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5555 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5555 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].usage[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].usage[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_168) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].not_equal_to[0].elements[w]'; message dropped.";
                                                            return -1;
                                                        }
                                                    }
                                                }
                                                
                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges.size() != 0) {
                                                    // Field:  type(TractorCharacteristics_ranges) name(ranges) extGroup(0)
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                    uint8_t* _ext_flag_2517 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].
                                                    *_ext_flag_2517 = 0; 
                                                    
                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements.size();
                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                    uint16_t* _tmp_5556 = (uint16_t*)buffer;
                                                    buffer += 2;
                                                    *_tmp_5556 = __aux64__ - 1;
                                                    
                                                    int __ify = __aux64__;
                                                    for(int y = 0; y < __ify; y++) { 
                                                        
                                                            // VehicleCharacteristicsRanges  SEQUENCE
                                                                //  comparisonOperator ComparisonOperator                      
                                                                //  limits             VehicleCharacteristicsRanges_limits     
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(ComparisonOperator) name(comparison_operator) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m004920\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].comparison_operator.value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].comparison_operator.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5557 = (uint8_t*) buffer++;
                                                            *_tmp_5557 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].comparison_operator.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].comparison_operator.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].comparison_operator.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].comparison_operator.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(VehicleCharacteristicsRanges_limits) name(limits) extGroup(0)
                                                            // Choice
                                                               // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles
                                                               // #1  vehicleDimensions   VehicleDimensions
                                                               // #2  vehicleWeightLimits   VehicleWeightLimits
                                                               // #3  axleWeightLimits   AxleWeightLimits
                                                               // #4  passengerCapacity   PassengerCapacity
                                                               // #5  exhaustEmissionValues   ExhaustEmissionValues
                                                               // #6  dieselEmissionValues   DieselEmissionValues
                                                               // #7  soundLevel   SoundLevel
                                                            uint8_t* _ext_flag_2519 = (uint8_t*) buffer; 
                                                            buffer++;
                                                            *_ext_flag_2519 = 0; 
                                                            
                                                            uint8_t* _choice_170 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.number_of_axles.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                *_choice_170 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004921\033[0m| Choice selection: 0";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004922\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5558 = (uint8_t*) buffer++;
                                                                *_tmp_5558 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_170 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004923\033[0m| Choice selection: 1";
                                                            
                                                                    // VehicleDimensions  SEQUENCE
                                                                        //  vehicleLengthOverall Int1           
                                                                        //  vehicleHeigthOverall Int1           
                                                                        //  vehicleWidthOverall  Int1           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int1) name(vehicle_length_overall) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004924\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5559 = (uint8_t*) buffer++;
                                                                    *_tmp_5559 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(vehicle_heigth_overall) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004925\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5560 = (uint8_t*) buffer++;
                                                                    *_tmp_5560 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(vehicle_width_overall) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004926\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5561 = (uint8_t*) buffer++;
                                                                    *_tmp_5561 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_170 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004927\033[0m| Choice selection: 2";
                                                            
                                                                    // VehicleWeightLimits  SEQUENCE
                                                                        //  vehicleMaxLadenWeight     Int2           
                                                                        //  vehicleTrainMaximumWeight Int2           
                                                                        //  vehicleWeightUnladen      Int2           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int2) name(vehicle_max_laden_weight) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004928\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5562 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_5562 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(vehicle_train_maximum_weight) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004929\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5563 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_5563 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(vehicle_weight_unladen) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004930\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5564 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_5564 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_170 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004931\033[0m| Choice selection: 3";
                                                            
                                                                    // AxleWeightLimits  SEQUENCE
                                                                        //  maxLadenweightOnAxle1 Int2           
                                                                        //  maxLadenweightOnAxle2 Int2           
                                                                        //  maxLadenweightOnAxle3 Int2           
                                                                        //  maxLadenweightOnAxle4 Int2           
                                                                        //  maxLadenweightOnAxle5 Int2           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle1) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004932\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5565 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_5565 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle2) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004933\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5566 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_5566 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle3) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004934\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5567 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_5567 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle4) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004935\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5568 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_5568 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle5) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004936\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5569 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_5569 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.passenger_capacity.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_170 = 4;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004937\033[0m| Choice selection: 4";
                                                            
                                                                    // PassengerCapacity  SEQUENCE
                                                                        //  numberOfSeats          Int1           
                                                                        //  numberOfStandingPlaces Int1           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int1) name(number_of_seats) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004938\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5570 = (uint8_t*) buffer++;
                                                                    *_tmp_5570 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(number_of_standing_places) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004939\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5571 = (uint8_t*) buffer++;
                                                                    *_tmp_5571 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_170 = 5;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004940\033[0m| Choice selection: 5";
                                                            
                                                                    // ExhaustEmissionValues  SEQUENCE
                                                                        //  unitType      UnitType                             
                                                                        //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                        //  emissionHC    Int2                                 
                                                                        //  emissionNOX   Int2                                 
                                                                        //  emissionHCNOX Int2                                 
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004941\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5572 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5572 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(ExhaustEmissionValues_emissionCO) name(emission_co) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004942\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5573 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_5573 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(emission_hc) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004943\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5574 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_5574 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(emission_nox) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004944\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5575 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_5575 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(emission_hcnox) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004945\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5576 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_5576 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_170 = 6;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004946\033[0m| Choice selection: 6";
                                                            
                                                                    // DieselEmissionValues  SEQUENCE
                                                                        //  particulate     DieselEmissionValues_particulate     
                                                                        //  absorptionCoeff Int2                                 
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(DieselEmissionValues_particulate) name(particulate) extGroup(0)
                                                                        // DieselEmissionValues_particulate  SEQUENCE
                                                                            //  unitType   UnitType                                   
                                                                            //  value      DieselEmissionValues_particulate_value     
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m004947\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5577 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_5577 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(DieselEmissionValues_particulate_value) name(value) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m004948\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5578 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_5578 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    // Field:  type(Int2) name(absorption_coeff) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004949\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5579 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_5579 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.sound_level.size() != 0)  // CHOICE 7  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_170 = 7;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004950\033[0m| Choice selection: 7";
                                                            
                                                                    // SoundLevel  SEQUENCE
                                                                        //  soundstationary Int1           
                                                                        //  sounddriveby    Int1           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int1) name(soundstationary) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004951\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5580 = (uint8_t*) buffer++;
                                                                    *_tmp_5580 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(sounddriveby) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004952\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5581 = (uint8_t*) buffer++;
                                                                    *_tmp_5581 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_170) << ") selected in CHOICE VehicleCharacteristicsRanges_limits in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].tractor[0].ranges[0].elements[y].limits'; message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                    }
                                                }
                                        }
                                        
                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer.size() != 0) {
                                            // Field:  type(CompleteVehicleCharacteristics_trailer) name(trailer) extGroup(0)
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(3) span(3) ext(false)
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements.size();
                                            if(__aux64__ > 3) __aux64__ = 3;
                                            uint16_t* _tmp_5582 = (uint16_t*)buffer;
                                            buffer += 2;
                                            *_tmp_5582 = __aux64__ - 1;
                                            
                                            int __ifz = __aux64__;
                                            for(int z = 0; z < __ifz; z++) { 
                                                
                                                    // TrailerCharacteristics  SEQUENCE
                                                        //  equalTo    TrailerCharacteristics_equalTo      OPTIONAL  
                                                        //  notEqualTo TrailerCharacteristics_notEqualTo   OPTIONAL  
                                                        //  ranges     TrailerCharacteristics_ranges       OPTIONAL  
                                                    // Optional fields bytemap
                                                    char* _tmp_5583 = (char*) buffer++;
                                                    *_tmp_5583 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to.size() != 0 ? 1 : 0);
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m004954\033[0m| Optional field equal_to = " << *_tmp_5583;
                                                    char* _tmp_5584 = (char*) buffer++;
                                                    *_tmp_5584 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to.size() != 0 ? 1 : 0);
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m004955\033[0m| Optional field not_equal_to = " << *_tmp_5584;
                                                    char* _tmp_5585 = (char*) buffer++;
                                                    *_tmp_5585 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges.size() != 0 ? 1 : 0);
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m004956\033[0m| Optional field ranges = " << *_tmp_5585;
                                                    
                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to.size() != 0) {
                                                        // Field:  type(TrailerCharacteristics_equalTo) name(equal_to) extGroup(0)
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                        uint8_t* _ext_flag_2544 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].
                                                        *_ext_flag_2544 = 0; 
                                                        
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements.size();
                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                        uint16_t* _tmp_5586 = (uint16_t*)buffer;
                                                        buffer += 2;
                                                        *_tmp_5586 = __aux64__ - 1;
                                                        
                                                        int __ifa = __aux64__;
                                                        for(int a = 0; a < __ifa; a++) { 
                                                            
                                                            // Choice
                                                               // #0  simpleVehicleType   StationType
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                               // #2  iso3833VehicleType   Iso3833VehicleType
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                               // #4  engineCharacteristics   EngineCharacteristics
                                                               // #5  loadType   LoadType
                                                               // #6  usage   VehicleRole
                                                            uint8_t* _ext_flag_2545 = (uint8_t*) buffer; 
                                                            buffer++;
                                                            *_ext_flag_2545 = 0; 
                                                            
                                                            uint8_t* _choice_171 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                                *_choice_171 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004958\033[0m| Choice selection: 0";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004959\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5587 = (uint8_t*) buffer++;
                                                                *_tmp_5587 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_171 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004960\033[0m| Choice selection: 1";
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                                uint8_t* _choice_172 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                    *_choice_172 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m004961\033[0m| Choice selection: 0";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004962\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5588 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5588 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_172 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m004963\033[0m| Choice selection: 1";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004964\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5589 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5589 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_172 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m004965\033[0m| Choice selection: 2";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004966\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5590 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5590 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_172 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m004967\033[0m| Choice selection: 3";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004968\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5591 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5591 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_172) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_171 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004969\033[0m| Choice selection: 2";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004970\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5592 = (uint8_t*) buffer++;
                                                                *_tmp_5592 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_171 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004971\033[0m| Choice selection: 3";
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004972\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5593 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5593 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004973\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5594 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5594 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_171 = 4;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004974\033[0m| Choice selection: 4";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004975\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5595 = (uint8_t*) buffer++;
                                                                *_tmp_5595 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_171 = 5;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004976\033[0m| Choice selection: 5";
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004977\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_2556 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.
                                                                    *_ext_flag_2556 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_2556) {
                                                                        uint8_t* _tmp_5597 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value <= INT32_MAX) {
                                                                            *_tmp_5597 = 0;
                                                                        
                                                                            uint32_t* _tmp_5596 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_5596 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_5597 = 1;
                                                                        
                                                                            uint64_t* _tmp_5596 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_5596 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_5596 = (uint8_t*) buffer++;
                                                                        *_tmp_5596 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value;
                                                                    }
                                                                    
                                                                    // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004978\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5598 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5598 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m004979\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values.size());
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values.size() < 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values.size() > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5599 = (uint8_t*)buffer;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values.size();
                                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                                    *_tmp_5599 = __aux64__ - 4;
                                                                    buffer += 1;
                                                                    
                                                                    int __ifb = __aux64__;
                                                                    for(int b = 0; b < __ifb; b++) {
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values[b]? 1: 0);
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_171 = 6;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004980\033[0m| Choice selection: 6";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004981\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5600 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5600 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_171) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].equal_to[0].elements[a]'; message dropped.";
                                                                return -1;
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to.size() != 0) {
                                                        // Field:  type(TrailerCharacteristics_notEqualTo) name(not_equal_to) extGroup(0)
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                        uint8_t* _ext_flag_2559 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].
                                                        *_ext_flag_2559 = 0; 
                                                        
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements.size();
                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                        uint16_t* _tmp_5601 = (uint16_t*)buffer;
                                                        buffer += 2;
                                                        *_tmp_5601 = __aux64__ - 1;
                                                        
                                                        int __ifc = __aux64__;
                                                        for(int c = 0; c < __ifc; c++) { 
                                                            
                                                            // Choice
                                                               // #0  simpleVehicleType   StationType
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                               // #2  iso3833VehicleType   Iso3833VehicleType
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                               // #4  engineCharacteristics   EngineCharacteristics
                                                               // #5  loadType   LoadType
                                                               // #6  usage   VehicleRole
                                                            uint8_t* _ext_flag_2560 = (uint8_t*) buffer; 
                                                            buffer++;
                                                            *_ext_flag_2560 = 0; 
                                                            
                                                            uint8_t* _choice_173 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                                *_choice_173 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004983\033[0m| Choice selection: 0";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004984\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5602 = (uint8_t*) buffer++;
                                                                *_tmp_5602 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_173 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004985\033[0m| Choice selection: 1";
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                                uint8_t* _choice_174 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                    *_choice_174 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m004986\033[0m| Choice selection: 0";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004987\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5603 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5603 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_174 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m004988\033[0m| Choice selection: 1";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004989\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5604 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5604 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_174 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m004990\033[0m| Choice selection: 2";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004991\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5605 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5605 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_174 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m004992\033[0m| Choice selection: 3";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004993\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5606 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5606 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_174) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_173 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004994\033[0m| Choice selection: 2";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m004995\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5607 = (uint8_t*) buffer++;
                                                                *_tmp_5607 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_173 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004996\033[0m| Choice selection: 3";
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004997\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5608 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5608 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m004998\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5609 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5609 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_173 = 4;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m004999\033[0m| Choice selection: 4";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005000\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5610 = (uint8_t*) buffer++;
                                                                *_tmp_5610 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_173 = 5;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005001\033[0m| Choice selection: 5";
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005002\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_2571 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.
                                                                    *_ext_flag_2571 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_2571) {
                                                                        uint8_t* _tmp_5612 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value <= INT32_MAX) {
                                                                            *_tmp_5612 = 0;
                                                                        
                                                                            uint32_t* _tmp_5611 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_5611 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_5612 = 1;
                                                                        
                                                                            uint64_t* _tmp_5611 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_5611 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_5611 = (uint8_t*) buffer++;
                                                                        *_tmp_5611 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value;
                                                                    }
                                                                    
                                                                    // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005003\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5613 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5613 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005004\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values.size());
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values.size() < 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values.size() > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5614 = (uint8_t*)buffer;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values.size();
                                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                                    *_tmp_5614 = __aux64__ - 4;
                                                                    buffer += 1;
                                                                    
                                                                    int __ifd = __aux64__;
                                                                    for(int d = 0; d < __ifd; d++) {
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values[d]? 1: 0);
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_173 = 6;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005005\033[0m| Choice selection: 6";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005006\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5615 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5615 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_173) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].not_equal_to[0].elements[c]'; message dropped.";
                                                                return -1;
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges.size() != 0) {
                                                        // Field:  type(TrailerCharacteristics_ranges) name(ranges) extGroup(0)
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                        uint8_t* _ext_flag_2574 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].
                                                        *_ext_flag_2574 = 0; 
                                                        
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements.size();
                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                        uint16_t* _tmp_5616 = (uint16_t*)buffer;
                                                        buffer += 2;
                                                        *_tmp_5616 = __aux64__ - 1;
                                                        
                                                        int __ife = __aux64__;
                                                        for(int e = 0; e < __ife; e++) { 
                                                            
                                                                // VehicleCharacteristicsRanges  SEQUENCE
                                                                    //  comparisonOperator ComparisonOperator                      
                                                                    //  limits             VehicleCharacteristicsRanges_limits     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(ComparisonOperator) name(comparison_operator) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005008\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5617 = (uint8_t*) buffer++;
                                                                *_tmp_5617 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(VehicleCharacteristicsRanges_limits) name(limits) extGroup(0)
                                                                // Choice
                                                                   // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles
                                                                   // #1  vehicleDimensions   VehicleDimensions
                                                                   // #2  vehicleWeightLimits   VehicleWeightLimits
                                                                   // #3  axleWeightLimits   AxleWeightLimits
                                                                   // #4  passengerCapacity   PassengerCapacity
                                                                   // #5  exhaustEmissionValues   ExhaustEmissionValues
                                                                   // #6  dieselEmissionValues   DieselEmissionValues
                                                                   // #7  soundLevel   SoundLevel
                                                                uint8_t* _ext_flag_2576 = (uint8_t*) buffer; 
                                                                buffer++;
                                                                *_ext_flag_2576 = 0; 
                                                                
                                                                uint8_t* _choice_175 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    *_choice_175 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005009\033[0m| Choice selection: 0";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005010\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5618 = (uint8_t*) buffer++;
                                                                    *_tmp_5618 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_175 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005011\033[0m| Choice selection: 1";
                                                                
                                                                        // VehicleDimensions  SEQUENCE
                                                                            //  vehicleLengthOverall Int1           
                                                                            //  vehicleHeigthOverall Int1           
                                                                            //  vehicleWidthOverall  Int1           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int1) name(vehicle_length_overall) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005012\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5619 = (uint8_t*) buffer++;
                                                                        *_tmp_5619 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(vehicle_heigth_overall) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005013\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5620 = (uint8_t*) buffer++;
                                                                        *_tmp_5620 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(vehicle_width_overall) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005014\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5621 = (uint8_t*) buffer++;
                                                                        *_tmp_5621 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_175 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005015\033[0m| Choice selection: 2";
                                                                
                                                                        // VehicleWeightLimits  SEQUENCE
                                                                            //  vehicleMaxLadenWeight     Int2           
                                                                            //  vehicleTrainMaximumWeight Int2           
                                                                            //  vehicleWeightUnladen      Int2           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int2) name(vehicle_max_laden_weight) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005016\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5622 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_5622 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(vehicle_train_maximum_weight) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005017\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5623 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_5623 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(vehicle_weight_unladen) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005018\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5624 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_5624 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_175 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005019\033[0m| Choice selection: 3";
                                                                
                                                                        // AxleWeightLimits  SEQUENCE
                                                                            //  maxLadenweightOnAxle1 Int2           
                                                                            //  maxLadenweightOnAxle2 Int2           
                                                                            //  maxLadenweightOnAxle3 Int2           
                                                                            //  maxLadenweightOnAxle4 Int2           
                                                                            //  maxLadenweightOnAxle5 Int2           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle1) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005020\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5625 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_5625 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle2) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005021\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5626 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_5626 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle3) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005022\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5627 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_5627 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle4) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005023\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5628 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_5628 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle5) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005024\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5629 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_5629 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_175 = 4;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005025\033[0m| Choice selection: 4";
                                                                
                                                                        // PassengerCapacity  SEQUENCE
                                                                            //  numberOfSeats          Int1           
                                                                            //  numberOfStandingPlaces Int1           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int1) name(number_of_seats) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005026\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5630 = (uint8_t*) buffer++;
                                                                        *_tmp_5630 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(number_of_standing_places) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005027\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5631 = (uint8_t*) buffer++;
                                                                        *_tmp_5631 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_175 = 5;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005028\033[0m| Choice selection: 5";
                                                                
                                                                        // ExhaustEmissionValues  SEQUENCE
                                                                            //  unitType      UnitType                             
                                                                            //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                            //  emissionHC    Int2                                 
                                                                            //  emissionNOX   Int2                                 
                                                                            //  emissionHCNOX Int2                                 
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005029\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5632 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_5632 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(ExhaustEmissionValues_emissionCO) name(emission_co) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005030\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5633 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_5633 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(emission_hc) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005031\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5634 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_5634 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(emission_nox) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005032\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5635 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_5635 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(emission_hcnox) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005033\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5636 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_5636 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_175 = 6;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005034\033[0m| Choice selection: 6";
                                                                
                                                                        // DieselEmissionValues  SEQUENCE
                                                                            //  particulate     DieselEmissionValues_particulate     
                                                                            //  absorptionCoeff Int2                                 
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(DieselEmissionValues_particulate) name(particulate) extGroup(0)
                                                                            // DieselEmissionValues_particulate  SEQUENCE
                                                                                //  unitType   UnitType                                   
                                                                                //  value      DieselEmissionValues_particulate_value     
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                            // Enumerated
                                                                            // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005035\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_5637 = (uint8_t*)buffer;
                                                                            buffer += 1;
                                                                            *_tmp_5637 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(DieselEmissionValues_particulate_value) name(value) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005036\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_5638 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_5638 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                                return -1;
                                                                            }
                                                                        
                                                                        // Field:  type(Int2) name(absorption_coeff) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005037\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5639 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_5639 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level.size() != 0)  // CHOICE 7  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_175 = 7;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005038\033[0m| Choice selection: 7";
                                                                
                                                                        // SoundLevel  SEQUENCE
                                                                            //  soundstationary Int1           
                                                                            //  sounddriveby    Int1           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int1) name(soundstationary) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005039\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5640 = (uint8_t*) buffer++;
                                                                        *_tmp_5640 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(sounddriveby) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005040\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5641 = (uint8_t*) buffer++;
                                                                        *_tmp_5641 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_175) << ") selected in CHOICE VehicleCharacteristicsRanges_limits in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].trailer[0].elements[z].ranges[0].elements[e].limits'; message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                        }
                                                    }
                                                    
                                            }
                                        }
                                        
                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train.size() != 0) {
                                            // Field:  type(TrainCharacteristics) name(train) extGroup(0)
                                                // TrainCharacteristics  SEQUENCE
                                                    //  equalTo    TractorCharacteristics_equalTo        
                                                    //  notEqualTo TractorCharacteristics_notEqualTo     
                                                    //  ranges     TractorCharacteristics_ranges         
                                                // Optional fields bytemap
                                                
                                                // Field:  type(TractorCharacteristics_equalTo) name(equal_to) extGroup(0)
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                uint8_t* _ext_flag_2601 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.
                                                *_ext_flag_2601 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements.size();
                                                if(__aux64__ > 4) __aux64__ = 4;
                                                uint16_t* _tmp_5642 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_5642 = __aux64__ - 1;
                                                
                                                int __iff = __aux64__;
                                                for(int f = 0; f < __iff; f++) { 
                                                    
                                                    // Choice
                                                       // #0  simpleVehicleType   StationType
                                                       // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                       // #2  iso3833VehicleType   Iso3833VehicleType
                                                       // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                       // #4  engineCharacteristics   EngineCharacteristics
                                                       // #5  loadType   LoadType
                                                       // #6  usage   VehicleRole
                                                    uint8_t* _ext_flag_2602 = (uint8_t*) buffer; 
                                                    buffer++;
                                                    *_ext_flag_2602 = 0; 
                                                    
                                                    uint8_t* _choice_176 = (uint8_t*) buffer;
                                                    buffer++;
                                                    
                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                        *_choice_176 = 0;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005042\033[0m| Choice selection: 0";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005043\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].simple_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].simple_vehicle_type[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5643 = (uint8_t*) buffer++;
                                                        *_tmp_5643 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].simple_vehicle_type[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].simple_vehicle_type[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_176 = 1;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005044\033[0m| Choice selection: 1";
                                                    
                                                        // Choice
                                                           // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                           // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                           // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                           // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                        uint8_t* _choice_177 = (uint8_t*) buffer;
                                                        buffer++;
                                                        
                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                            *_choice_177 = 0;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005045\033[0m| Choice selection: 0";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(6) span(7) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005046\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5644 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5644 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                        {
                                                            *_choice_177 = 1;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005047\033[0m| Choice selection: 1";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005048\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5645 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5645 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                        {
                                                            *_choice_177 = 2;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005049\033[0m| Choice selection: 2";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005050\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5646 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5646 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                        {
                                                            *_choice_177 = 3;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005051\033[0m| Choice selection: 3";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(3) span(4) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005052\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5647 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5647 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_177) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].eu_vehicle_category_code[0]'; message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_176 = 2;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005053\033[0m| Choice selection: 2";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005054\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5648 = (uint8_t*) buffer++;
                                                        *_tmp_5648 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_176 = 3;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005055\033[0m| Choice selection: 3";
                                                    
                                                            // EnvironmentalCharacteristics  SEQUENCE
                                                                //  euroValue  EuroValue      
                                                                //  copValue   CopValue       
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005056\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5649 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5649 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                            // Enumerated
                                                            // INT32  min(0) max(8) span(9) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005057\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5650 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5650 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_176 = 4;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005058\033[0m| Choice selection: 4";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005059\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].engine_characteristics[0].value) << 
                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].engine_characteristics[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5651 = (uint8_t*) buffer++;
                                                        *_tmp_5651 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].engine_characteristics[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].engine_characteristics[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_176 = 5;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005060\033[0m| Choice selection: 5";
                                                    
                                                            // LoadType  SEQUENCE
                                                                //  goodsType            GoodsType                
                                                                //  dangerousGoodsType   DangerousGoodsBasic      
                                                                //  specialTransportType SpecialTransportType     
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005061\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].goods_type.value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].goods_type.value);
                                                            }
                                                            
                                                            uint8_t* _ext_flag_2613 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].goods_type.
                                                            *_ext_flag_2613 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                            
                                                            if(*_ext_flag_2613) {
                                                                uint8_t* _tmp_5653 = (uint8_t*) buffer++; 
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].goods_type.value <= INT32_MAX) {
                                                                    *_tmp_5653 = 0;
                                                                
                                                                    uint32_t* _tmp_5652 = (uint32_t*)buffer; buffer += 4;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].goods_type.value;
                                                                    __aux64__ -= INT32_MIN;
                                                                    *_tmp_5652 = __aux64__;
                                                                } 
                                                                else
                                                                {
                                                                    *_tmp_5653 = 1;
                                                                
                                                                    uint64_t* _tmp_5652 = (uint64_t*)buffer; buffer += 8;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].goods_type.value;
                                                                    __aux64__ -= INT64_MIN;
                                                                    *_tmp_5652 = __aux64__;
                                                                }
                                                            } else {
                                                                uint8_t* _tmp_5652 = (uint8_t*) buffer++;
                                                                *_tmp_5652 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].goods_type.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].goods_type.value;
                                                            }
                                                            
                                                            // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                            // Enumerated
                                                            // INT32  min(0) max(19) span(20) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005062\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5654 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5654 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005063\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].special_transport_type.values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].special_transport_type.values.size() < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].special_transport_type.values.size() > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_5655 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].special_transport_type.values.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            *_tmp_5655 = __aux64__ - 4;
                                                            buffer += 1;
                                                            
                                                            int __ifg = __aux64__;
                                                            for(int g = 0; g < __ifg; g++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].load_type[0].special_transport_type.values[g]? 1: 0);
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_176 = 6;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005064\033[0m| Choice selection: 6";
                                                    
                                                        // Enumerated
                                                        // INT32  min(0) max(15) span(16) dataType(Int32)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005065\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].usage[0].value) << 
                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].usage[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5656 = (uint8_t*)buffer;
                                                        buffer += 1;
                                                        *_tmp_5656 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].usage[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].usage[0].value; 
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else
                                                    {
                                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_176) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].equal_to.elements[f]'; message dropped.";
                                                        return -1;
                                                    }
                                                }
                                                
                                                // Field:  type(TractorCharacteristics_notEqualTo) name(not_equal_to) extGroup(0)
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                uint8_t* _ext_flag_2616 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.
                                                *_ext_flag_2616 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements.size();
                                                if(__aux64__ > 4) __aux64__ = 4;
                                                uint16_t* _tmp_5657 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_5657 = __aux64__ - 1;
                                                
                                                int __ifh = __aux64__;
                                                for(int h = 0; h < __ifh; h++) { 
                                                    
                                                    // Choice
                                                       // #0  simpleVehicleType   StationType
                                                       // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                       // #2  iso3833VehicleType   Iso3833VehicleType
                                                       // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                       // #4  engineCharacteristics   EngineCharacteristics
                                                       // #5  loadType   LoadType
                                                       // #6  usage   VehicleRole
                                                    uint8_t* _ext_flag_2617 = (uint8_t*) buffer; 
                                                    buffer++;
                                                    *_ext_flag_2617 = 0; 
                                                    
                                                    uint8_t* _choice_178 = (uint8_t*) buffer;
                                                    buffer++;
                                                    
                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                        *_choice_178 = 0;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005067\033[0m| Choice selection: 0";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005068\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5658 = (uint8_t*) buffer++;
                                                        *_tmp_5658 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_178 = 1;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005069\033[0m| Choice selection: 1";
                                                    
                                                        // Choice
                                                           // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                           // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                           // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                           // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                        uint8_t* _choice_179 = (uint8_t*) buffer;
                                                        buffer++;
                                                        
                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                            *_choice_179 = 0;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005070\033[0m| Choice selection: 0";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(6) span(7) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005071\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5659 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5659 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                        {
                                                            *_choice_179 = 1;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005072\033[0m| Choice selection: 1";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005073\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5660 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5660 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                        {
                                                            *_choice_179 = 2;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005074\033[0m| Choice selection: 2";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005075\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5661 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5661 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                        {
                                                            *_choice_179 = 3;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005076\033[0m| Choice selection: 3";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(3) span(4) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005077\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5662 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5662 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_179) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0]'; message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_178 = 2;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005078\033[0m| Choice selection: 2";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005079\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5663 = (uint8_t*) buffer++;
                                                        *_tmp_5663 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_178 = 3;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005080\033[0m| Choice selection: 3";
                                                    
                                                            // EnvironmentalCharacteristics  SEQUENCE
                                                                //  euroValue  EuroValue      
                                                                //  copValue   CopValue       
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005081\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5664 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5664 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                            // Enumerated
                                                            // INT32  min(0) max(8) span(9) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005082\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5665 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5665 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_178 = 4;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005083\033[0m| Choice selection: 4";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005084\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].engine_characteristics[0].value) << 
                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].engine_characteristics[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5666 = (uint8_t*) buffer++;
                                                        *_tmp_5666 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].engine_characteristics[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].engine_characteristics[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_178 = 5;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005085\033[0m| Choice selection: 5";
                                                    
                                                            // LoadType  SEQUENCE
                                                                //  goodsType            GoodsType                
                                                                //  dangerousGoodsType   DangerousGoodsBasic      
                                                                //  specialTransportType SpecialTransportType     
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005086\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].goods_type.value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].goods_type.value);
                                                            }
                                                            
                                                            uint8_t* _ext_flag_2628 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].goods_type.
                                                            *_ext_flag_2628 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                            
                                                            if(*_ext_flag_2628) {
                                                                uint8_t* _tmp_5668 = (uint8_t*) buffer++; 
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].goods_type.value <= INT32_MAX) {
                                                                    *_tmp_5668 = 0;
                                                                
                                                                    uint32_t* _tmp_5667 = (uint32_t*)buffer; buffer += 4;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].goods_type.value;
                                                                    __aux64__ -= INT32_MIN;
                                                                    *_tmp_5667 = __aux64__;
                                                                } 
                                                                else
                                                                {
                                                                    *_tmp_5668 = 1;
                                                                
                                                                    uint64_t* _tmp_5667 = (uint64_t*)buffer; buffer += 8;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].goods_type.value;
                                                                    __aux64__ -= INT64_MIN;
                                                                    *_tmp_5667 = __aux64__;
                                                                }
                                                            } else {
                                                                uint8_t* _tmp_5667 = (uint8_t*) buffer++;
                                                                *_tmp_5667 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].goods_type.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].goods_type.value;
                                                            }
                                                            
                                                            // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                            // Enumerated
                                                            // INT32  min(0) max(19) span(20) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005087\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5669 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_5669 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005088\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values.size() < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values.size() > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_5670 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            *_tmp_5670 = __aux64__ - 4;
                                                            buffer += 1;
                                                            
                                                            int __ifi = __aux64__;
                                                            for(int i = 0; i < __ifi; i++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values[i]? 1: 0);
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_178 = 6;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005089\033[0m| Choice selection: 6";
                                                    
                                                        // Enumerated
                                                        // INT32  min(0) max(15) span(16) dataType(Int32)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005090\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].usage[0].value) << 
                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].usage[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5671 = (uint8_t*)buffer;
                                                        buffer += 1;
                                                        *_tmp_5671 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].usage[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].usage[0].value; 
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else
                                                    {
                                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_178) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].not_equal_to.elements[h]'; message dropped.";
                                                        return -1;
                                                    }
                                                }
                                                
                                                // Field:  type(TractorCharacteristics_ranges) name(ranges) extGroup(0)
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                uint8_t* _ext_flag_2631 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.
                                                *_ext_flag_2631 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements.size();
                                                if(__aux64__ > 4) __aux64__ = 4;
                                                uint16_t* _tmp_5672 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_5672 = __aux64__ - 1;
                                                
                                                int __ifj = __aux64__;
                                                for(int j = 0; j < __ifj; j++) { 
                                                    
                                                        // VehicleCharacteristicsRanges  SEQUENCE
                                                            //  comparisonOperator ComparisonOperator                      
                                                            //  limits             VehicleCharacteristicsRanges_limits     
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(ComparisonOperator) name(comparison_operator) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005092\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].comparison_operator.value) << 
                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].comparison_operator.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5673 = (uint8_t*) buffer++;
                                                        *_tmp_5673 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].comparison_operator.value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].comparison_operator.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].comparison_operator.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].comparison_operator.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(VehicleCharacteristicsRanges_limits) name(limits) extGroup(0)
                                                        // Choice
                                                           // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles
                                                           // #1  vehicleDimensions   VehicleDimensions
                                                           // #2  vehicleWeightLimits   VehicleWeightLimits
                                                           // #3  axleWeightLimits   AxleWeightLimits
                                                           // #4  passengerCapacity   PassengerCapacity
                                                           // #5  exhaustEmissionValues   ExhaustEmissionValues
                                                           // #6  dieselEmissionValues   DieselEmissionValues
                                                           // #7  soundLevel   SoundLevel
                                                        uint8_t* _ext_flag_2633 = (uint8_t*) buffer; 
                                                        buffer++;
                                                        *_ext_flag_2633 = 0; 
                                                        
                                                        uint8_t* _choice_180 = (uint8_t*) buffer;
                                                        buffer++;
                                                        
                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.number_of_axles.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            *_choice_180 = 0;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005093\033[0m| Choice selection: 0";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005094\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.number_of_axles[0].value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.number_of_axles[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5674 = (uint8_t*) buffer++;
                                                            *_tmp_5674 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.number_of_axles[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.number_of_axles[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.number_of_axles[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.number_of_axles[0].value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsRanges_limits) 
                                                        {
                                                            *_choice_180 = 1;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005095\033[0m| Choice selection: 1";
                                                        
                                                                // VehicleDimensions  SEQUENCE
                                                                    //  vehicleLengthOverall Int1           
                                                                    //  vehicleHeigthOverall Int1           
                                                                    //  vehicleWidthOverall  Int1           
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(Int1) name(vehicle_length_overall) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005096\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5675 = (uint8_t*) buffer++;
                                                                *_tmp_5675 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int1) name(vehicle_heigth_overall) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005097\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5676 = (uint8_t*) buffer++;
                                                                *_tmp_5676 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int1) name(vehicle_width_overall) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005098\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5677 = (uint8_t*) buffer++;
                                                                *_tmp_5677 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsRanges_limits) 
                                                        {
                                                            *_choice_180 = 2;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005099\033[0m| Choice selection: 2";
                                                        
                                                                // VehicleWeightLimits  SEQUENCE
                                                                    //  vehicleMaxLadenWeight     Int2           
                                                                    //  vehicleTrainMaximumWeight Int2           
                                                                    //  vehicleWeightUnladen      Int2           
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(Int2) name(vehicle_max_laden_weight) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005100\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_5678 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_5678 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(vehicle_train_maximum_weight) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005101\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_5679 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_5679 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(vehicle_weight_unladen) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005102\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_5680 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_5680 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsRanges_limits) 
                                                        {
                                                            *_choice_180 = 3;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005103\033[0m| Choice selection: 3";
                                                        
                                                                // AxleWeightLimits  SEQUENCE
                                                                    //  maxLadenweightOnAxle1 Int2           
                                                                    //  maxLadenweightOnAxle2 Int2           
                                                                    //  maxLadenweightOnAxle3 Int2           
                                                                    //  maxLadenweightOnAxle4 Int2           
                                                                    //  maxLadenweightOnAxle5 Int2           
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(Int2) name(max_ladenweight_on_axle1) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005104\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_5681 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_5681 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(max_ladenweight_on_axle2) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005105\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_5682 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_5682 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(max_ladenweight_on_axle3) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005106\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_5683 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_5683 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(max_ladenweight_on_axle4) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005107\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_5684 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_5684 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(max_ladenweight_on_axle5) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005108\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_5685 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_5685 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.passenger_capacity.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsRanges_limits) 
                                                        {
                                                            *_choice_180 = 4;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005109\033[0m| Choice selection: 4";
                                                        
                                                                // PassengerCapacity  SEQUENCE
                                                                    //  numberOfSeats          Int1           
                                                                    //  numberOfStandingPlaces Int1           
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(Int1) name(number_of_seats) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005110\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5686 = (uint8_t*) buffer++;
                                                                *_tmp_5686 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int1) name(number_of_standing_places) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005111\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5687 = (uint8_t*) buffer++;
                                                                *_tmp_5687 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsRanges_limits) 
                                                        {
                                                            *_choice_180 = 5;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005112\033[0m| Choice selection: 5";
                                                        
                                                                // ExhaustEmissionValues  SEQUENCE
                                                                    //  unitType      UnitType                             
                                                                    //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                    //  emissionHC    Int2                                 
                                                                    //  emissionNOX   Int2                                 
                                                                    //  emissionHCNOX Int2                                 
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005113\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5688 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_5688 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(ExhaustEmissionValues_emissionCO) name(emission_co) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005114\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_5689 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_5689 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(emission_hc) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005115\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_5690 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_5690 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(emission_nox) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005116\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_5691 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_5691 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(emission_hcnox) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005117\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_5692 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_5692 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsRanges_limits) 
                                                        {
                                                            *_choice_180 = 6;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005118\033[0m| Choice selection: 6";
                                                        
                                                                // DieselEmissionValues  SEQUENCE
                                                                    //  particulate     DieselEmissionValues_particulate     
                                                                    //  absorptionCoeff Int2                                 
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(DieselEmissionValues_particulate) name(particulate) extGroup(0)
                                                                    // DieselEmissionValues_particulate  SEQUENCE
                                                                        //  unitType   UnitType                                   
                                                                        //  value      DieselEmissionValues_particulate_value     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005119\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5693 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_5693 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(DieselEmissionValues_particulate_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005120\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5694 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_5694 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                // Field:  type(Int2) name(absorption_coeff) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005121\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_5695 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_5695 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.sound_level.size() != 0)  // CHOICE 7  fieldType(VehicleCharacteristicsRanges_limits) 
                                                        {
                                                            *_choice_180 = 7;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005122\033[0m| Choice selection: 7";
                                                        
                                                                // SoundLevel  SEQUENCE
                                                                    //  soundstationary Int1           
                                                                    //  sounddriveby    Int1           
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(Int1) name(soundstationary) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005123\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5696 = (uint8_t*) buffer++;
                                                                *_tmp_5696 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int1) name(sounddriveby) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005124\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5697 = (uint8_t*) buffer++;
                                                                *_tmp_5697 = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_180) << ") selected in CHOICE VehicleCharacteristicsRanges_limits in 'ivi.optional[0].elements[e].giv[0].elements[o].vehicle_characteristics[0].elements[t].train[0].ranges.elements[j].limits'; message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                }
                                        }
                                        
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_characteristics.size() != 0) {
                                // Field:  type(DriverCharacteristics) name(driver_characteristics) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005125\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_characteristics[0].value) << 
                                                 " ivi.optional[0].elements[e].giv[0].elements[o].driver_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_characteristics[0].value);
                                }
                                
                                uint8_t* _tmp_5698 = (uint8_t*) buffer++;
                                *_tmp_5698 = ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_characteristics[0].value; 
                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].driver_characteristics[0].value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].driver_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].driver_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                    return -1;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].layout_id.size() != 0) {
                                // Field:  type(GicPart_layoutId) name(layout_id) extGroup(0)
                                // Integer
                                
                                // UINT8  min(1) max(4) span(4) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005126\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].layout_id[0].value) << 
                                                 " ivi.optional[0].elements[e].giv[0].elements[o].layout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].layout_id[0].value);
                                }
                                
                                uint8_t* _ext_flag_2659 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].layout_id[0].
                                *_ext_flag_2659 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].layout_id[0].value >= 1 && ros->ivi.optional[0].elements[e].giv[0].elements[o].layout_id[0].value <= 4) ? 0 : 1;
                                
                                if(*_ext_flag_2659) {
                                    uint8_t* _tmp_5700 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].layout_id[0].value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].layout_id[0].value <= INT32_MAX) {
                                        *_tmp_5700 = 0;
                                    
                                        uint32_t* _tmp_5699 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].layout_id[0].value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_5699 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_5700 = 1;
                                    
                                        uint64_t* _tmp_5699 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].layout_id[0].value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_5699 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_5699 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].layout_id[0].value - 1;
                                    *_tmp_5699 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].layout_id[0].value;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].pre_storedlayout_id.size() != 0) {
                                // Field:  type(GicPart_preStoredlayoutId) name(pre_storedlayout_id) extGroup(0)
                                // Integer
                                
                                // UINT8  min(1) max(64) span(64) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005127\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].pre_storedlayout_id[0].value) << 
                                                 " ivi.optional[0].elements[e].giv[0].elements[o].pre_storedlayout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].pre_storedlayout_id[0].value);
                                }
                                
                                uint8_t* _ext_flag_2660 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].pre_storedlayout_id[0].
                                *_ext_flag_2660 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].pre_storedlayout_id[0].value >= 1 && ros->ivi.optional[0].elements[e].giv[0].elements[o].pre_storedlayout_id[0].value <= 64) ? 0 : 1;
                                
                                if(*_ext_flag_2660) {
                                    uint8_t* _tmp_5702 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].pre_storedlayout_id[0].value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].pre_storedlayout_id[0].value <= INT32_MAX) {
                                        *_tmp_5702 = 0;
                                    
                                        uint32_t* _tmp_5701 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].pre_storedlayout_id[0].value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_5701 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_5702 = 1;
                                    
                                        uint64_t* _tmp_5701 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].pre_storedlayout_id[0].value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_5701 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_5701 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].pre_storedlayout_id[0].value - 1;
                                    *_tmp_5701 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].pre_storedlayout_id[0].value;
                                }
                            }
                            
                            // Field:  type(GicPart_roadSignCodes) name(road_sign_codes) extGroup(0)
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                            uint8_t* _ext_flag_2661 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.
                            *_ext_flag_2661 = 0; 
                            
                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements.size();
                            if(__aux64__ > 4) __aux64__ = 4;
                            uint16_t* _tmp_5703 = (uint16_t*)buffer;
                            buffer += 2;
                            *_tmp_5703 = __aux64__ - 1;
                            
                            int __ifk = __aux64__;
                            for(int k = 0; k < __ifk; k++) { 
                                
                                    // RSCode  SEQUENCE
                                        //  layoutComponentId RSCode_layoutComponentId   OPTIONAL  
                                        //  code              RSCode_code                  
                                    // Optional fields bytemap
                                    char* _tmp_5704 = (char*) buffer++;
                                    *_tmp_5704 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].layout_component_id.size() != 0 ? 1 : 0);
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m005129\033[0m| Optional field layout_component_id = " << *_tmp_5704;
                                    
                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].layout_component_id.size() != 0) {
                                        // Field:  type(RSCode_layoutComponentId) name(layout_component_id) extGroup(0)
                                        // Integer
                                        
                                        // UINT8  min(1) max(4) span(4) dataType(UInt8)
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m005130\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].layout_component_id[0].value) << 
                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].layout_component_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].layout_component_id[0].value);
                                        }
                                        
                                        uint8_t* _ext_flag_2662 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].layout_component_id[0].
                                        *_ext_flag_2662 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].layout_component_id[0].value >= 1 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].layout_component_id[0].value <= 4) ? 0 : 1;
                                        
                                        if(*_ext_flag_2662) {
                                            uint8_t* _tmp_5706 = (uint8_t*) buffer++; 
                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].layout_component_id[0].value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].layout_component_id[0].value <= INT32_MAX) {
                                                *_tmp_5706 = 0;
                                            
                                                uint32_t* _tmp_5705 = (uint32_t*)buffer; buffer += 4;
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].layout_component_id[0].value;
                                                __aux64__ -= INT32_MIN;
                                                *_tmp_5705 = __aux64__;
                                            } 
                                            else
                                            {
                                                *_tmp_5706 = 1;
                                            
                                                uint64_t* _tmp_5705 = (uint64_t*)buffer; buffer += 8;
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].layout_component_id[0].value;
                                                __aux64__ -= INT64_MIN;
                                                *_tmp_5705 = __aux64__;
                                            }
                                        } else {
                                            uint8_t* _tmp_5705 = (uint8_t*) buffer++;
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].layout_component_id[0].value - 1;
                                            *_tmp_5705 = __aux64__;
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].layout_component_id[0].value;
                                        }
                                    }
                                    
                                    // Field:  type(RSCode_code) name(code) extGroup(0)
                                    // Choice
                                       // #0  viennaConvention   VcCode
                                       // #1  iso14823   ISO14823Code
                                       // #2  itisCodes   RSCode_code_itisCodes
                                       // #3  anyCatalogue   AnyCatalogue
                                    uint8_t* _ext_flag_2663 = (uint8_t*) buffer; 
                                    buffer++;
                                    *_ext_flag_2663 = 0; 
                                    
                                    uint8_t* _choice_181 = (uint8_t*) buffer;
                                    buffer++;
                                    
                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention.size() != 0) {  // CHOICE 0  fieldType(RSCode_code) 
                                        *_choice_181 = 0;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m005131\033[0m| Choice selection: 0";
                                    
                                            // VcCode  SEQUENCE
                                                //  roadSignClass VcClass                 
                                                //  roadSignCode  VcCode_roadSignCode     
                                                //  vcOption      VcOption                
                                                //  validity      VcCode_validity       OPTIONAL  
                                                //  value         VcCode_value          OPTIONAL  
                                                //  unit          RSCUnit               OPTIONAL  
                                            // Optional fields bytemap
                                            char* _tmp_5707 = (char*) buffer++;
                                            *_tmp_5707 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005132\033[0m| Optional field validity = " << *_tmp_5707;
                                            char* _tmp_5708 = (char*) buffer++;
                                            *_tmp_5708 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].value.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005133\033[0m| Optional field value = " << *_tmp_5708;
                                            char* _tmp_5709 = (char*) buffer++;
                                            *_tmp_5709 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].unit.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005134\033[0m| Optional field unit = " << *_tmp_5709;
                                            
                                            // Field:  type(VcClass) name(road_sign_class) extGroup(0)
                                            // Integer
                                            
                                            // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005135\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].road_sign_class.value) << 
                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].road_sign_class.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].road_sign_class.value);
                                            }
                                            
                                            uint8_t* _tmp_5710 = (uint8_t*) buffer++;
                                            *_tmp_5710 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].road_sign_class.value; 
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].road_sign_class.value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].road_sign_class.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].road_sign_class.value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                return -1;
                                            }
                                            
                                            // Field:  type(VcCode_roadSignCode) name(road_sign_code) extGroup(0)
                                            // Integer
                                            
                                            // UINT8  min(1) max(64) span(64) dataType(UInt8)
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005136\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].road_sign_code.value) << 
                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].road_sign_code.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].road_sign_code.value);
                                            }
                                            
                                            uint8_t* _tmp_5711 = (uint8_t*) buffer++;
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].road_sign_code.value - 1;
                                            *_tmp_5711 = __aux64__;
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].road_sign_code.value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].road_sign_code.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 64) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].road_sign_code.value' (" << __aux64__ << ") exceeds max allowable (64); message dropped.";
                                                return -1;
                                            }
                                            
                                            // Field:  type(VcOption) name(vc_option) extGroup(0)
                                            // Integer
                                            
                                            // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005137\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].vc_option.value) << 
                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].vc_option.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].vc_option.value);
                                            }
                                            
                                            uint8_t* _tmp_5712 = (uint8_t*) buffer++;
                                            *_tmp_5712 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].vc_option.value; 
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].vc_option.value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].vc_option.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].vc_option.value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                return -1;
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity.size() != 0) {
                                                // Field:  type(VcCode_validity) name(validity) extGroup(0)
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                                uint8_t* _ext_flag_2667 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].
                                                *_ext_flag_2667 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements.size();
                                                if(__aux64__ > 8) __aux64__ = 8;
                                                uint16_t* _tmp_5713 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_5713 = __aux64__ - 1;
                                                
                                                int __ifl = __aux64__;
                                                for(int l = 0; l < __ifl; l++) { 
                                                    
                                                        // DTM  SEQUENCE
                                                            //  year        DTM_year          OPTIONAL  
                                                            //  month_day   DTM_month_day     OPTIONAL  
                                                            //  pmd         PMD               OPTIONAL  
                                                            //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                            //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                            //  period      HoursMinutes      OPTIONAL  
                                                        // Optional fields bytemap
                                                        char* _tmp_5714 = (char*) buffer++;
                                                        *_tmp_5714 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005139\033[0m| Optional field year = " << *_tmp_5714;
                                                        char* _tmp_5715 = (char*) buffer++;
                                                        *_tmp_5715 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005140\033[0m| Optional field month_day = " << *_tmp_5715;
                                                        char* _tmp_5716 = (char*) buffer++;
                                                        *_tmp_5716 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].pmd.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005141\033[0m| Optional field pmd = " << *_tmp_5716;
                                                        char* _tmp_5717 = (char*) buffer++;
                                                        *_tmp_5717 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005142\033[0m| Optional field hour_minutes = " << *_tmp_5717;
                                                        char* _tmp_5718 = (char*) buffer++;
                                                        *_tmp_5718 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].day_of_week.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005143\033[0m| Optional field day_of_week = " << *_tmp_5718;
                                                        char* _tmp_5719 = (char*) buffer++;
                                                        *_tmp_5719 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005144\033[0m| Optional field period = " << *_tmp_5719;
                                                        
                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year.size() != 0) {
                                                            // Field:  type(DTM_year) name(year) extGroup(0)
                                                                // DTM_year  SEQUENCE
                                                                    //  syr        DTM_year_syr     
                                                                    //  eyr        DTM_year_eyr     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(DTM_year_syr) name(syr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005145\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].syr.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].syr.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_2668 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].syr.
                                                                *_ext_flag_2668 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].syr.value >= 2000 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].syr.value <= 2127) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_2668) {
                                                                    uint8_t* _tmp_5721 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].syr.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].syr.value <= INT32_MAX) {
                                                                        *_tmp_5721 = 0;
                                                                    
                                                                        uint32_t* _tmp_5720 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].syr.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_5720 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_5721 = 1;
                                                                    
                                                                        uint64_t* _tmp_5720 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].syr.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_5720 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_5720 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].syr.value - 2000;
                                                                    *_tmp_5720 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].syr.value;
                                                                }
                                                                
                                                                // Field:  type(DTM_year_eyr) name(eyr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005146\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].eyr.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].eyr.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_2669 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].eyr.
                                                                *_ext_flag_2669 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].eyr.value >= 2000 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].eyr.value <= 2127) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_2669) {
                                                                    uint8_t* _tmp_5723 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].eyr.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].eyr.value <= INT32_MAX) {
                                                                        *_tmp_5723 = 0;
                                                                    
                                                                        uint32_t* _tmp_5722 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].eyr.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_5722 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_5723 = 1;
                                                                    
                                                                        uint64_t* _tmp_5722 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].eyr.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_5722 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_5722 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].eyr.value - 2000;
                                                                    *_tmp_5722 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].year[0].eyr.value;
                                                                }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day.size() != 0) {
                                                            // Field:  type(DTM_month_day) name(month_day) extGroup(0)
                                                                // DTM_month_day  SEQUENCE
                                                                    //  smd        MonthDay       
                                                                    //  emd        MonthDay       
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(MonthDay) name(smd) extGroup(0)
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005147\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].smd.month.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].smd.month.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5724 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].smd.month.value - 1;
                                                                    *_tmp_5724 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].smd.month.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].smd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].smd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005148\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].smd.day.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].smd.day.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5725 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].smd.day.value - 1;
                                                                    *_tmp_5725 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].smd.day.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].smd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].smd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                // Field:  type(MonthDay) name(emd) extGroup(0)
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005149\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].emd.month.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].emd.month.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5726 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].emd.month.value - 1;
                                                                    *_tmp_5726 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].emd.month.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].emd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].emd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005150\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].emd.day.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].emd.day.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5727 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].emd.day.value - 1;
                                                                    *_tmp_5727 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].emd.day.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].emd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].month_day[0].emd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                        return -1;
                                                                    }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].pmd.size() != 0) {
                                                            // Field:  type(PMD) name(pmd) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005151\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].pmd[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].pmd[0].values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].pmd[0].values.size() < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].pmd[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].pmd[0].values.size()) << " is less than allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].pmd[0].values.size() > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].pmd[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].pmd[0].values.size()) << " exceeds max allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_5728 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].pmd[0].values.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            *_tmp_5728 = __aux64__ - 4;
                                                            buffer += 1;
                                                            
                                                            int __ifm = __aux64__;
                                                            for(int m = 0; m < __ifm; m++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].pmd[0].values[m]? 1: 0);
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes.size() != 0) {
                                                            // Field:  type(DTM_hourMinutes) name(hour_minutes) extGroup(0)
                                                                // DTM_hourMinutes  SEQUENCE
                                                                    //  shm        HoursMinutes     
                                                                    //  ehm        HoursMinutes     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(HoursMinutes) name(shm) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005152\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].shm.hours.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].shm.hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5729 = (uint8_t*) buffer++;
                                                                    *_tmp_5729 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].shm.hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].shm.hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005153\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].shm.mins.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].shm.mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5730 = (uint8_t*) buffer++;
                                                                    *_tmp_5730 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].shm.mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].shm.mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                // Field:  type(HoursMinutes) name(ehm) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005154\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].ehm.hours.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].ehm.hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5731 = (uint8_t*) buffer++;
                                                                    *_tmp_5731 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].ehm.hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].ehm.hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005155\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].ehm.mins.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].ehm.mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5732 = (uint8_t*) buffer++;
                                                                    *_tmp_5732 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].ehm.mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].ehm.mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].day_of_week.size() != 0) {
                                                            // Field:  type(DayOfWeek) name(day_of_week) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(8) max(8) span(1)
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005156\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].day_of_week[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].day_of_week[0].values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].day_of_week[0].values.size() < 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].day_of_week[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].day_of_week[0].values.size()) << " is less than allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].day_of_week[0].values.size() > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].day_of_week[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].day_of_week[0].values.size()) << " exceeds max allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_5733 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].day_of_week[0].values.size();
                                                            if(__aux64__ > 8) __aux64__ = 8;
                                                            *_tmp_5733 = __aux64__ - 8;
                                                            buffer += 1;
                                                            
                                                            int __ifn = __aux64__;
                                                            for(int n = 0; n < __ifn; n++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].day_of_week[0].values[n]? 1: 0);
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period.size() != 0) {
                                                            // Field:  type(HoursMinutes) name(period) extGroup(0)
                                                                // HoursMinutes  SEQUENCE
                                                                    //  hours      HoursMinutes_hours     
                                                                    //  mins       HoursMinutes_mins      
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005157\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period[0].hours.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period[0].hours.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5734 = (uint8_t*) buffer++;
                                                                *_tmp_5734 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period[0].hours.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period[0].hours.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period[0].hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period[0].hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005158\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period[0].mins.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period[0].mins.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5735 = (uint8_t*) buffer++;
                                                                *_tmp_5735 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period[0].mins.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period[0].mins.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period[0].mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].validity[0].elements[l].period[0].mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                    return -1;
                                                                }
                                                        }
                                                        
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].value.size() != 0) {
                                                // Field:  type(VcCode_value) name(value) extGroup(0)
                                                // Integer
                                                
                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005159\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].value[0].value) << 
                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].value[0].value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].value[0].value;
                                                }
                                                
                                                uint16_t* _tmp_5736 = (uint16_t*) buffer; buffer += 2;
                                                *_tmp_5736 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].value[0].value; 
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].value[0].value;
                                                
                                                // MIN validator
                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].value[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                    return -1;
                                                }
                                                // MAX validator
                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].value[0].value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                    return -1;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].unit.size() != 0) {
                                                // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                // Integer
                                                
                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005160\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].unit[0].value) << 
                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].unit[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].unit[0].value);
                                                }
                                                
                                                uint8_t* _tmp_5737 = (uint8_t*) buffer++;
                                                *_tmp_5737 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].unit[0].value; 
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].unit[0].value;
                                                
                                                // MIN validator
                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].unit[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                    return -1;
                                                }
                                                // MAX validator
                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.vienna_convention[0].unit[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                    return -1;
                                                }
                                            }
                                    
                                    }
                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823.size() != 0)  // CHOICE 1  fieldType(RSCode_code) 
                                    {
                                        *_choice_181 = 1;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m005161\033[0m| Choice selection: 1";
                                    
                                            // ISO14823Code  SEQUENCE
                                                //  pictogramCode ISO14823Code_pictogramCode     
                                                //  attributes    ISO14823Attributes           OPTIONAL  
                                            // Optional fields bytemap
                                            char* _tmp_5738 = (char*) buffer++;
                                            *_tmp_5738 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005162\033[0m| Optional field attributes = " << *_tmp_5738;
                                            
                                            // Field:  type(ISO14823Code_pictogramCode) name(pictogram_code) extGroup(0)
                                                // ISO14823Code_pictogramCode  SEQUENCE
                                                    //  countryCode           ISO14823Code_pictogramCode_countryCode             OPTIONAL  
                                                    //  serviceCategoryCode   ISO14823Code_pictogramCode_serviceCategoryCode       
                                                    //  pictogramCategoryCode ISO14823Code_pictogramCode_pictogramCategoryCode     
                                                // Optional fields bytemap
                                                char* _tmp_5739 = (char*) buffer++;
                                                *_tmp_5739 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.country_code.size() != 0 ? 1 : 0);
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m005163\033[0m| Optional field country_code = " << *_tmp_5739;
                                                
                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.country_code.size() != 0) {
                                                    // Field:  type(ISO14823Code_pictogramCode_countryCode) name(country_code) extGroup(0)
                                                    // OctetString
                                                    // OCTET_STRING  min(2) max(2) span(1)
                                                    
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m005164\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.country_code[0].values.size(): ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.country_code[0]" << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.country_code[0].values.size());
                                                    
                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.country_code[0].values.size() < 2) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.country_code[0].value' (" << 
                                                                    ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.country_code[0].values.size() << ") is less than allowable (2); message dropped.";
                                                        return -1;
                                                    }
                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.country_code[0].values.size() > 2) {
                                                        logger->warning() << "Error: Value in 'ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.country_code[0].value' (" << 
                                                                    ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.country_code[0].values.size() << ") exceeds max allowable (2); message dropped.";
                                                        return -1;
                                                    }
                                                    uint8_t* _tmp_5740 = (uint8_t*)buffer;
                                                    buffer += 1;
                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.country_code[0].values.size();
                                                    if(__aux64__ > 2) __aux64__ = 2;
                                                    *_tmp_5740 = __aux64__ - 2;
                                                    
                                                    int __ifo = __aux64__;
                                                    for(int o = 0; o < __ifo; o++) {
                                                        int8_t* __m__ = (int8_t*)buffer++;
                                                        *__m__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.country_code[0].values[o];
                                                    }
                                                }
                                                
                                                // Field:  type(ISO14823Code_pictogramCode_serviceCategoryCode) name(service_category_code) extGroup(0)
                                                // Choice
                                                   // #0  trafficSignPictogram   ISO14823Code_pictogramCode_serviceCategoryCode_trafficSignPictogram
                                                   // #1  publicFacilitiesPictogram   ISO14823Code_pictogramCode_serviceCategoryCode_publicFacilitiesPictogram
                                                   // #2  ambientOrRoadConditionPictogram   ISO14823Code_pictogramCode_serviceCategoryCode_ambientOrRoadConditionPictogram
                                                uint8_t* _ext_flag_2682 = (uint8_t*) buffer; 
                                                buffer++;
                                                *_ext_flag_2682 = 0; 
                                                
                                                uint8_t* _choice_182 = (uint8_t*) buffer;
                                                buffer++;
                                                
                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram.size() != 0) {  // CHOICE 0  fieldType(ISO14823Code_pictogramCode_serviceCategoryCode) 
                                                    *_choice_182 = 0;  // Setting choice selection
                                                
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m005165\033[0m| Choice selection: 0";
                                                
                                                    // Enumerated
                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                    uint8_t* _ext_flag_2683 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005166\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value) << 
                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value);
                                                    }
                                                    
                                                    uint8_t* _tmp_5741 = (uint8_t*)buffer;
                                                    buffer += 1;
                                                    *_tmp_5741 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value; 
                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value; 
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                        return -1;
                                                    }
                                                
                                                }
                                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram.size() != 0)  // CHOICE 1  fieldType(ISO14823Code_pictogramCode_serviceCategoryCode) 
                                                {
                                                    *_choice_182 = 1;  // Setting choice selection
                                                
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m005167\033[0m| Choice selection: 1";
                                                
                                                    // Enumerated
                                                    // INT32  min(0) max(0) span(1) dataType(Int32)
                                                    uint8_t* _ext_flag_2684 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005168\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value) << 
                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value);
                                                    }
                                                    
                                                    uint8_t* _tmp_5742 = (uint8_t*)buffer;
                                                    buffer += 1;
                                                    *_tmp_5742 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value; 
                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value; 
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value' (" << __aux64__ << ") exceeds max allowable (0); message dropped.";
                                                        return -1;
                                                    }
                                                
                                                }
                                                else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram.size() != 0)  // CHOICE 2  fieldType(ISO14823Code_pictogramCode_serviceCategoryCode) 
                                                {
                                                    *_choice_182 = 2;  // Setting choice selection
                                                
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m005169\033[0m| Choice selection: 2";
                                                
                                                    // Enumerated
                                                    // INT32  min(0) max(1) span(2) dataType(Int32)
                                                    uint8_t* _ext_flag_2685 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005170\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value) << 
                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value);
                                                    }
                                                    
                                                    uint8_t* _tmp_5743 = (uint8_t*)buffer;
                                                    buffer += 1;
                                                    *_tmp_5743 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value; 
                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value; 
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                        return -1;
                                                    }
                                                
                                                }
                                                else
                                                {
                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_182) << ") selected in CHOICE ISO14823Code_pictogramCode_serviceCategoryCode in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.service_category_code'; message dropped.";
                                                    return -1;
                                                }
                                                
                                                // Field:  type(ISO14823Code_pictogramCode_pictogramCategoryCode) name(pictogram_category_code) extGroup(0)
                                                    // ISO14823Code_pictogramCode_pictogramCategoryCode  SEQUENCE
                                                        //  nature       ISO14823Code_pictogramCode_pictogramCategoryCode_nature           
                                                        //  serialNumber ISO14823Code_pictogramCode_pictogramCategoryCode_serialNumber     
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(ISO14823Code_pictogramCode_pictogramCategoryCode_nature) name(nature) extGroup(0)
                                                    // Integer
                                                    
                                                    // UINT8  min(1) max(9) span(9) dataType(UInt8)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005171\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value) << 
                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value);
                                                    }
                                                    
                                                    uint8_t* _tmp_5744 = (uint8_t*) buffer++;
                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value - 1;
                                                    *_tmp_5744 = __aux64__;
                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value;
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 9) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value' (" << __aux64__ << ") exceeds max allowable (9); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(ISO14823Code_pictogramCode_pictogramCategoryCode_serialNumber) name(serial_number) extGroup(0)
                                                    // Integer
                                                    
                                                    // UINT8  min(0) max(99) span(100) dataType(UInt8)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005172\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value) << 
                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value);
                                                    }
                                                    
                                                    uint8_t* _tmp_5745 = (uint8_t*) buffer++;
                                                    *_tmp_5745 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value; 
                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value;
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 99) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value' (" << __aux64__ << ") exceeds max allowable (99); message dropped.";
                                                        return -1;
                                                    }
                                            
                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes.size() != 0) {
                                                // Field:  type(ISO14823Attributes) name(attributes) extGroup(0)
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                                uint8_t* _ext_flag_2688 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].
                                                *_ext_flag_2688 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements.size();
                                                if(__aux64__ > 8) __aux64__ = 8;
                                                uint16_t* _tmp_5746 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_5746 = __aux64__ - 1;
                                                
                                                int __ifp = __aux64__;
                                                for(int p = 0; p < __ifp; p++) { 
                                                    
                                                    // Choice
                                                       // #0  dtm   DTM
                                                       // #1  edt   EDT
                                                       // #2  dfl   DFL
                                                       // #3  ved   VED
                                                       // #4  spe   SPE
                                                       // #5  roi   ROI
                                                       // #6  dbv   DBV
                                                       // #7  ddd   DDD
                                                    uint8_t* _choice_183 = (uint8_t*) buffer;
                                                    buffer++;
                                                    
                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm.size() != 0) {  // CHOICE 0  fieldType(ISO14823Attributes_element) 
                                                        *_choice_183 = 0;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005174\033[0m| Choice selection: 0";
                                                    
                                                            // DTM  SEQUENCE
                                                                //  year        DTM_year          OPTIONAL  
                                                                //  month_day   DTM_month_day     OPTIONAL  
                                                                //  pmd         PMD               OPTIONAL  
                                                                //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                                //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                                //  period      HoursMinutes      OPTIONAL  
                                                            // Optional fields bytemap
                                                            char* _tmp_5747 = (char*) buffer++;
                                                            *_tmp_5747 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005175\033[0m| Optional field year = " << *_tmp_5747;
                                                            char* _tmp_5748 = (char*) buffer++;
                                                            *_tmp_5748 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005176\033[0m| Optional field month_day = " << *_tmp_5748;
                                                            char* _tmp_5749 = (char*) buffer++;
                                                            *_tmp_5749 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].pmd.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005177\033[0m| Optional field pmd = " << *_tmp_5749;
                                                            char* _tmp_5750 = (char*) buffer++;
                                                            *_tmp_5750 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005178\033[0m| Optional field hour_minutes = " << *_tmp_5750;
                                                            char* _tmp_5751 = (char*) buffer++;
                                                            *_tmp_5751 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].day_of_week.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005179\033[0m| Optional field day_of_week = " << *_tmp_5751;
                                                            char* _tmp_5752 = (char*) buffer++;
                                                            *_tmp_5752 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005180\033[0m| Optional field period = " << *_tmp_5752;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year.size() != 0) {
                                                                // Field:  type(DTM_year) name(year) extGroup(0)
                                                                    // DTM_year  SEQUENCE
                                                                        //  syr        DTM_year_syr     
                                                                        //  eyr        DTM_year_eyr     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(DTM_year_syr) name(syr) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005181\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].syr.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].syr.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_2690 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].syr.
                                                                    *_ext_flag_2690 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].syr.value >= 2000 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].syr.value <= 2127) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_2690) {
                                                                        uint8_t* _tmp_5754 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].syr.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].syr.value <= INT32_MAX) {
                                                                            *_tmp_5754 = 0;
                                                                        
                                                                            uint32_t* _tmp_5753 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].syr.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_5753 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_5754 = 1;
                                                                        
                                                                            uint64_t* _tmp_5753 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].syr.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_5753 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_5753 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].syr.value - 2000;
                                                                        *_tmp_5753 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].syr.value;
                                                                    }
                                                                    
                                                                    // Field:  type(DTM_year_eyr) name(eyr) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005182\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].eyr.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].eyr.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_2691 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].eyr.
                                                                    *_ext_flag_2691 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].eyr.value >= 2000 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].eyr.value <= 2127) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_2691) {
                                                                        uint8_t* _tmp_5756 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].eyr.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].eyr.value <= INT32_MAX) {
                                                                            *_tmp_5756 = 0;
                                                                        
                                                                            uint32_t* _tmp_5755 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].eyr.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_5755 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_5756 = 1;
                                                                        
                                                                            uint64_t* _tmp_5755 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].eyr.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_5755 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_5755 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].eyr.value - 2000;
                                                                        *_tmp_5755 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].year[0].eyr.value;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day.size() != 0) {
                                                                // Field:  type(DTM_month_day) name(month_day) extGroup(0)
                                                                    // DTM_month_day  SEQUENCE
                                                                        //  smd        MonthDay       
                                                                        //  emd        MonthDay       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay) name(smd) extGroup(0)
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005183\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].smd.month.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].smd.month.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5757 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].smd.month.value - 1;
                                                                        *_tmp_5757 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].smd.month.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].smd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].smd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005184\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].smd.day.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].smd.day.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5758 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].smd.day.value - 1;
                                                                        *_tmp_5758 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].smd.day.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].smd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].smd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    // Field:  type(MonthDay) name(emd) extGroup(0)
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005185\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].emd.month.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].emd.month.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5759 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].emd.month.value - 1;
                                                                        *_tmp_5759 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].emd.month.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].emd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].emd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005186\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].emd.day.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].emd.day.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5760 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].emd.day.value - 1;
                                                                        *_tmp_5760 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].emd.day.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].emd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].month_day[0].emd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                            return -1;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].pmd.size() != 0) {
                                                                // Field:  type(PMD) name(pmd) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005187\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].pmd[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].pmd[0].values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].pmd[0].values.size() < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].pmd[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].pmd[0].values.size()) << " is less than allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].pmd[0].values.size() > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].pmd[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].pmd[0].values.size()) << " exceeds max allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_5761 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].pmd[0].values.size();
                                                                if(__aux64__ > 4) __aux64__ = 4;
                                                                *_tmp_5761 = __aux64__ - 4;
                                                                buffer += 1;
                                                                
                                                                int __ifq = __aux64__;
                                                                for(int q = 0; q < __ifq; q++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].pmd[0].values[q]? 1: 0);
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes.size() != 0) {
                                                                // Field:  type(DTM_hourMinutes) name(hour_minutes) extGroup(0)
                                                                    // DTM_hourMinutes  SEQUENCE
                                                                        //  shm        HoursMinutes     
                                                                        //  ehm        HoursMinutes     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes) name(shm) extGroup(0)
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005188\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].shm.hours.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].shm.hours.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5762 = (uint8_t*) buffer++;
                                                                        *_tmp_5762 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].shm.hours.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].shm.hours.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005189\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].shm.mins.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].shm.mins.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5763 = (uint8_t*) buffer++;
                                                                        *_tmp_5763 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].shm.mins.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].shm.mins.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    // Field:  type(HoursMinutes) name(ehm) extGroup(0)
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005190\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].ehm.hours.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].ehm.hours.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5764 = (uint8_t*) buffer++;
                                                                        *_tmp_5764 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].ehm.hours.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].ehm.hours.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005191\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].ehm.mins.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].ehm.mins.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5765 = (uint8_t*) buffer++;
                                                                        *_tmp_5765 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].ehm.mins.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].ehm.mins.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                            return -1;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].day_of_week.size() != 0) {
                                                                // Field:  type(DayOfWeek) name(day_of_week) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(8) max(8) span(1)
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005192\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].day_of_week[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].day_of_week[0].values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].day_of_week[0].values.size() < 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].day_of_week[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].day_of_week[0].values.size()) << " is less than allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].day_of_week[0].values.size() > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].day_of_week[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].day_of_week[0].values.size()) << " exceeds max allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_5766 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].day_of_week[0].values.size();
                                                                if(__aux64__ > 8) __aux64__ = 8;
                                                                *_tmp_5766 = __aux64__ - 8;
                                                                buffer += 1;
                                                                
                                                                int __ifr = __aux64__;
                                                                for(int r = 0; r < __ifr; r++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].day_of_week[0].values[r]? 1: 0);
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period.size() != 0) {
                                                                // Field:  type(HoursMinutes) name(period) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005193\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period[0].hours.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period[0].hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5767 = (uint8_t*) buffer++;
                                                                    *_tmp_5767 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period[0].hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period[0].hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period[0].hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period[0].hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005194\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period[0].mins.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period[0].mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5768 = (uint8_t*) buffer++;
                                                                    *_tmp_5768 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period[0].mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period[0].mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period[0].mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dtm[0].period[0].mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt.size() != 0)  // CHOICE 1  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_183 = 1;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005195\033[0m| Choice selection: 1";
                                                    
                                                            // EDT  SEQUENCE
                                                                //  year        DTM_year            
                                                                //  month_day   DTM_month_day       
                                                                //  pmd         PMD                 
                                                                //  hourMinutes DTM_hourMinutes     
                                                                //  dayOfWeek   DayOfWeek           
                                                                //  period      HoursMinutes        
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(DTM_year) name(year) extGroup(0)
                                                                // DTM_year  SEQUENCE
                                                                    //  syr        DTM_year_syr     
                                                                    //  eyr        DTM_year_eyr     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(DTM_year_syr) name(syr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005196\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.syr.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.syr.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_2702 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.syr.
                                                                *_ext_flag_2702 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.syr.value >= 2000 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.syr.value <= 2127) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_2702) {
                                                                    uint8_t* _tmp_5770 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.syr.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.syr.value <= INT32_MAX) {
                                                                        *_tmp_5770 = 0;
                                                                    
                                                                        uint32_t* _tmp_5769 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.syr.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_5769 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_5770 = 1;
                                                                    
                                                                        uint64_t* _tmp_5769 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.syr.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_5769 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_5769 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.syr.value - 2000;
                                                                    *_tmp_5769 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.syr.value;
                                                                }
                                                                
                                                                // Field:  type(DTM_year_eyr) name(eyr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005197\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.eyr.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.eyr.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_2703 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.eyr.
                                                                *_ext_flag_2703 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.eyr.value >= 2000 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.eyr.value <= 2127) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_2703) {
                                                                    uint8_t* _tmp_5772 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.eyr.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.eyr.value <= INT32_MAX) {
                                                                        *_tmp_5772 = 0;
                                                                    
                                                                        uint32_t* _tmp_5771 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.eyr.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_5771 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_5772 = 1;
                                                                    
                                                                        uint64_t* _tmp_5771 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.eyr.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_5771 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_5771 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.eyr.value - 2000;
                                                                    *_tmp_5771 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].year.eyr.value;
                                                                }
                                                            
                                                            // Field:  type(DTM_month_day) name(month_day) extGroup(0)
                                                                // DTM_month_day  SEQUENCE
                                                                    //  smd        MonthDay       
                                                                    //  emd        MonthDay       
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(MonthDay) name(smd) extGroup(0)
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005198\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.smd.month.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.smd.month.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5773 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.smd.month.value - 1;
                                                                    *_tmp_5773 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.smd.month.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.smd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.smd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005199\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.smd.day.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.smd.day.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5774 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.smd.day.value - 1;
                                                                    *_tmp_5774 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.smd.day.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.smd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.smd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                // Field:  type(MonthDay) name(emd) extGroup(0)
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005200\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.emd.month.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.emd.month.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5775 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.emd.month.value - 1;
                                                                    *_tmp_5775 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.emd.month.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.emd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.emd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005201\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.emd.day.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.emd.day.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5776 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.emd.day.value - 1;
                                                                    *_tmp_5776 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.emd.day.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.emd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].month_day.emd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            // Field:  type(PMD) name(pmd) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005202\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].pmd.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].pmd.values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].pmd.values.size() < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].pmd.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].pmd.values.size()) << " is less than allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].pmd.values.size() > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].pmd.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].pmd.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_5777 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].pmd.values.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            *_tmp_5777 = __aux64__ - 4;
                                                            buffer += 1;
                                                            
                                                            int __ifs = __aux64__;
                                                            for(int s = 0; s < __ifs; s++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].pmd.values[s]? 1: 0);
                                                            }
                                                            
                                                            // Field:  type(DTM_hourMinutes) name(hour_minutes) extGroup(0)
                                                                // DTM_hourMinutes  SEQUENCE
                                                                    //  shm        HoursMinutes     
                                                                    //  ehm        HoursMinutes     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(HoursMinutes) name(shm) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005203\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.shm.hours.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.shm.hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5778 = (uint8_t*) buffer++;
                                                                    *_tmp_5778 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.shm.hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.shm.hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.shm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.shm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005204\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.shm.mins.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.shm.mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5779 = (uint8_t*) buffer++;
                                                                    *_tmp_5779 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.shm.mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.shm.mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.shm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.shm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                // Field:  type(HoursMinutes) name(ehm) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005205\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.ehm.hours.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.ehm.hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5780 = (uint8_t*) buffer++;
                                                                    *_tmp_5780 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.ehm.hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.ehm.hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.ehm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.ehm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005206\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.ehm.mins.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.ehm.mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5781 = (uint8_t*) buffer++;
                                                                    *_tmp_5781 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.ehm.mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.ehm.mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.ehm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].hour_minutes.ehm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            // Field:  type(DayOfWeek) name(day_of_week) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(8) max(8) span(1)
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005207\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].day_of_week.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].day_of_week.values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].day_of_week.values.size() < 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].day_of_week.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].day_of_week.values.size()) << " is less than allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].day_of_week.values.size() > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].day_of_week.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].day_of_week.values.size()) << " exceeds max allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_5782 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].day_of_week.values.size();
                                                            if(__aux64__ > 8) __aux64__ = 8;
                                                            *_tmp_5782 = __aux64__ - 8;
                                                            buffer += 1;
                                                            
                                                            int __ift = __aux64__;
                                                            for(int t = 0; t < __ift; t++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].day_of_week.values[t]? 1: 0);
                                                            }
                                                            
                                                            // Field:  type(HoursMinutes) name(period) extGroup(0)
                                                                // HoursMinutes  SEQUENCE
                                                                    //  hours      HoursMinutes_hours     
                                                                    //  mins       HoursMinutes_mins      
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005208\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].period.hours.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].period.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].period.hours.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5783 = (uint8_t*) buffer++;
                                                                *_tmp_5783 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].period.hours.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].period.hours.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].period.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].period.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005209\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].period.mins.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].period.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].period.mins.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5784 = (uint8_t*) buffer++;
                                                                *_tmp_5784 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].period.mins.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].period.mins.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].period.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].edt[0].period.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                    return -1;
                                                                }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dfl.size() != 0)  // CHOICE 2  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_183 = 2;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005210\033[0m| Choice selection: 2";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(8) span(8) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005211\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dfl[0].value) << 
                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dfl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dfl[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5785 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dfl[0].value - 1;
                                                        *_tmp_5785 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dfl[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dfl[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dfl[0].value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved.size() != 0)  // CHOICE 3  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_183 = 3;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005212\033[0m| Choice selection: 3";
                                                    
                                                            // VED  SEQUENCE
                                                                //  hei        Distance     OPTIONAL  
                                                                //  wid        Distance     OPTIONAL  
                                                                //  vln        Distance     OPTIONAL  
                                                                //  wei        Weight       OPTIONAL  
                                                            // Optional fields bytemap
                                                            char* _tmp_5786 = (char*) buffer++;
                                                            *_tmp_5786 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005213\033[0m| Optional field hei = " << *_tmp_5786;
                                                            char* _tmp_5787 = (char*) buffer++;
                                                            *_tmp_5787 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005214\033[0m| Optional field wid = " << *_tmp_5787;
                                                            char* _tmp_5788 = (char*) buffer++;
                                                            *_tmp_5788 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005215\033[0m| Optional field vln = " << *_tmp_5788;
                                                            char* _tmp_5789 = (char*) buffer++;
                                                            *_tmp_5789 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005216\033[0m| Optional field wei = " << *_tmp_5789;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei.size() != 0) {
                                                                // Field:  type(Distance) name(hei) extGroup(0)
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Distance_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005217\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei[0].value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5790 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei[0].value.value - 1;
                                                                    *_tmp_5790 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005218\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5791 = (uint8_t*) buffer++;
                                                                    *_tmp_5791 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].hei[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid.size() != 0) {
                                                                // Field:  type(Distance) name(wid) extGroup(0)
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Distance_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005219\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid[0].value.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid[0].value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5792 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid[0].value.value - 1;
                                                                    *_tmp_5792 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005220\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5793 = (uint8_t*) buffer++;
                                                                    *_tmp_5793 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wid[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln.size() != 0) {
                                                                // Field:  type(Distance) name(vln) extGroup(0)
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Distance_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005221\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln[0].value.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln[0].value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5794 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln[0].value.value - 1;
                                                                    *_tmp_5794 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005222\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5795 = (uint8_t*) buffer++;
                                                                    *_tmp_5795 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].vln[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei.size() != 0) {
                                                                // Field:  type(Weight) name(wei) extGroup(0)
                                                                    // Weight  SEQUENCE
                                                                        //  value      Weight_value     
                                                                        //  unit       RSCUnit          
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Weight_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005223\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei[0].value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5796 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei[0].value.value - 1;
                                                                    *_tmp_5796 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005224\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5797 = (uint8_t*) buffer++;
                                                                    *_tmp_5797 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ved[0].wei[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe.size() != 0)  // CHOICE 4  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_183 = 4;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005225\033[0m| Choice selection: 4";
                                                    
                                                            // SPE  SEQUENCE
                                                                //  spm        SPE_spm            OPTIONAL  
                                                                //  mns        SPE_mns            OPTIONAL  
                                                                //  unit       SPE_RSCUnit_unit     
                                                            // Optional fields bytemap
                                                            char* _tmp_5798 = (char*) buffer++;
                                                            *_tmp_5798 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].spm.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005226\033[0m| Optional field spm = " << *_tmp_5798;
                                                            char* _tmp_5799 = (char*) buffer++;
                                                            *_tmp_5799 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].mns.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005227\033[0m| Optional field mns = " << *_tmp_5799;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].spm.size() != 0) {
                                                                // Field:  type(SPE_spm) name(spm) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(250) span(251) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005228\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].spm[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].spm[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].spm[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5800 = (uint8_t*) buffer++;
                                                                *_tmp_5800 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].spm[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].spm[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].spm[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].spm[0].value' (" << __aux64__ << ") exceeds max allowable (250); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].mns.size() != 0) {
                                                                // Field:  type(SPE_mns) name(mns) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(250) span(251) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005229\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].mns[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].mns[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].mns[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5801 = (uint8_t*) buffer++;
                                                                *_tmp_5801 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].mns[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].mns[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].mns[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].mns[0].value' (" << __aux64__ << ") exceeds max allowable (250); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            // Field:  type(SPE_RSCUnit_unit) name(unit) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(1) span(2) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005230\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].unit.value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].unit.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5802 = (uint8_t*) buffer++;
                                                            *_tmp_5802 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].unit.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].unit.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].spe[0].unit.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                return -1;
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].roi.size() != 0)  // CHOICE 5  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_183 = 5;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005231\033[0m| Choice selection: 5";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005232\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].roi[0].value) << 
                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].roi[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].roi[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5803 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].roi[0].value - 1;
                                                        *_tmp_5803 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].roi[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].roi[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 32) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].roi[0].value' (" << __aux64__ << ") exceeds max allowable (32); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dbv.size() != 0)  // CHOICE 6  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_183 = 6;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005233\033[0m| Choice selection: 6";
                                                    
                                                            // DBV  SEQUENCE
                                                                //  value      Distance_value     
                                                                //  unit       RSCUnit            
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(Distance_value) name(value) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005234\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dbv[0].value.value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dbv[0].value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dbv[0].value.value;
                                                            }
                                                            
                                                            uint16_t* _tmp_5804 = (uint16_t*) buffer; buffer += 2;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dbv[0].value.value - 1;
                                                            *_tmp_5804 = __aux64__;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dbv[0].value.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dbv[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dbv[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005235\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dbv[0].unit.value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dbv[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dbv[0].unit.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5805 = (uint8_t*) buffer++;
                                                            *_tmp_5805 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dbv[0].unit.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dbv[0].unit.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dbv[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].dbv[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd.size() != 0)  // CHOICE 7  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_183 = 7;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005236\033[0m| Choice selection: 7";
                                                    
                                                            // DDD  SEQUENCE
                                                                //  dcj        DDD_dcj      OPTIONAL  
                                                                //  dcr        DDD_dcr      OPTIONAL  
                                                                //  tpl        DDD_tpl      OPTIONAL  
                                                                //  ioList     DDD_ioList     
                                                            // Optional fields bytemap
                                                            char* _tmp_5806 = (char*) buffer++;
                                                            *_tmp_5806 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcj.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005237\033[0m| Optional field dcj = " << *_tmp_5806;
                                                            char* _tmp_5807 = (char*) buffer++;
                                                            *_tmp_5807 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcr.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005238\033[0m| Optional field dcr = " << *_tmp_5807;
                                                            char* _tmp_5808 = (char*) buffer++;
                                                            *_tmp_5808 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].tpl.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005239\033[0m| Optional field tpl = " << *_tmp_5808;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcj.size() != 0) {
                                                                // Field:  type(DDD_dcj) name(dcj) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(1) max(128) span(128) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005240\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcj[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcj[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcj[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5809 = (uint8_t*) buffer++;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcj[0].value - 1;
                                                                *_tmp_5809 = __aux64__;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcj[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcj[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcj[0].value' (" << __aux64__ << ") exceeds max allowable (128); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcr.size() != 0) {
                                                                // Field:  type(DDD_dcr) name(dcr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(1) max(128) span(128) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005241\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcr[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcr[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcr[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5810 = (uint8_t*) buffer++;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcr[0].value - 1;
                                                                *_tmp_5810 = __aux64__;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcr[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcr[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].dcr[0].value' (" << __aux64__ << ") exceeds max allowable (128); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].tpl.size() != 0) {
                                                                // Field:  type(DDD_tpl) name(tpl) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(1) max(128) span(128) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005242\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].tpl[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].tpl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].tpl[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5811 = (uint8_t*) buffer++;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].tpl[0].value - 1;
                                                                *_tmp_5811 = __aux64__;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].tpl[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].tpl[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].tpl[0].value' (" << __aux64__ << ") exceeds max allowable (128); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            // Field:  type(DDD_ioList) name(io_list) extGroup(0)
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                                            uint8_t* _ext_flag_2732 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.
                                                            *_ext_flag_2732 = 0; 
                                                            
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements.size();
                                                            if(__aux64__ > 8) __aux64__ = 8;
                                                            uint16_t* _tmp_5812 = (uint16_t*)buffer;
                                                            buffer += 2;
                                                            *_tmp_5812 = __aux64__ - 1;
                                                            
                                                            int __ifu = __aux64__;
                                                            for(int u = 0; u < __ifu; u++) { 
                                                                
                                                                    // DDD_IO  SEQUENCE
                                                                        //  drn        DDD_IO_drn             
                                                                        //  dp         DDD_IO_dp            OPTIONAL  
                                                                        //  dr         DDD_IO_dr            OPTIONAL  
                                                                        //  rne        DDD_IO_rne           OPTIONAL  
                                                                        //  stnId      DDD_IO_stnId         OPTIONAL  
                                                                        //  stnText    DDD_IO_stnText       OPTIONAL  
                                                                        //  dcp        DistanceOrDuration   OPTIONAL  
                                                                        //  ddp        DistanceOrDuration   OPTIONAL  
                                                                    // Optional fields bytemap
                                                                    char* _tmp_5813 = (char*) buffer++;
                                                                    *_tmp_5813 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005244\033[0m| Optional field dp = " << *_tmp_5813;
                                                                    char* _tmp_5814 = (char*) buffer++;
                                                                    *_tmp_5814 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005245\033[0m| Optional field dr = " << *_tmp_5814;
                                                                    char* _tmp_5815 = (char*) buffer++;
                                                                    *_tmp_5815 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].rne.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005246\033[0m| Optional field rne = " << *_tmp_5815;
                                                                    char* _tmp_5816 = (char*) buffer++;
                                                                    *_tmp_5816 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_id.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005247\033[0m| Optional field stn_id = " << *_tmp_5816;
                                                                    char* _tmp_5817 = (char*) buffer++;
                                                                    *_tmp_5817 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_text.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005248\033[0m| Optional field stn_text = " << *_tmp_5817;
                                                                    char* _tmp_5818 = (char*) buffer++;
                                                                    *_tmp_5818 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005249\033[0m| Optional field dcp = " << *_tmp_5818;
                                                                    char* _tmp_5819 = (char*) buffer++;
                                                                    *_tmp_5819 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005250\033[0m| Optional field ddp = " << *_tmp_5819;
                                                                    
                                                                    // Field:  type(DDD_IO_drn) name(drn) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005251\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].drn.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].drn.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].drn.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5820 = (uint8_t*) buffer++;
                                                                    *_tmp_5820 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].drn.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].drn.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].drn.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].drn.value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp.size() != 0) {
                                                                        // Field:  type(DDD_IO_dp) name(dp) extGroup(0)
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                                        uint8_t* _ext_flag_2734 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].
                                                                        *_ext_flag_2734 = 0; 
                                                                        
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements.size();
                                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                                        uint16_t* _tmp_5821 = (uint16_t*)buffer;
                                                                        buffer += 2;
                                                                        *_tmp_5821 = __aux64__ - 1;
                                                                        
                                                                        int __ifv = __aux64__;
                                                                        for(int v = 0; v < __ifv; v++) { 
                                                                            
                                                                                // DestinationPlace  SEQUENCE
                                                                                    //  depType    DDD_DEP                      
                                                                                    //  depBlob    DestinationPlace_depBlob   OPTIONAL  
                                                                                    //  plnId      DestinationPlace_plnId     OPTIONAL  
                                                                                    //  plnText    DestinationPlace_plnText   OPTIONAL  
                                                                                // Optional fields bytemap
                                                                                char* _tmp_5822 = (char*) buffer++;
                                                                                *_tmp_5822 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_blob.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->debug() << "|\033[38;5;94m005253\033[0m| Optional field dep_blob = " << *_tmp_5822;
                                                                                char* _tmp_5823 = (char*) buffer++;
                                                                                *_tmp_5823 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_id.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->debug() << "|\033[38;5;94m005254\033[0m| Optional field pln_id = " << *_tmp_5823;
                                                                                char* _tmp_5824 = (char*) buffer++;
                                                                                *_tmp_5824 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_text.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->debug() << "|\033[38;5;94m005255\033[0m| Optional field pln_text = " << *_tmp_5824;
                                                                                
                                                                                // Field:  type(DDD_DEP) name(dep_type) extGroup(0)
                                                                                // Integer
                                                                                
                                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m005256\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_type.value) << 
                                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_type.value);
                                                                                }
                                                                                
                                                                                uint8_t* _ext_flag_2735 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_type.
                                                                                *_ext_flag_2735 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_type.value <= 15) ? 0 : 1;
                                                                                
                                                                                if(*_ext_flag_2735) {
                                                                                    uint8_t* _tmp_5826 = (uint8_t*) buffer++; 
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_type.value <= INT32_MAX) {
                                                                                        *_tmp_5826 = 0;
                                                                                    
                                                                                        uint32_t* _tmp_5825 = (uint32_t*)buffer; buffer += 4;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_type.value;
                                                                                        __aux64__ -= INT32_MIN;
                                                                                        *_tmp_5825 = __aux64__;
                                                                                    } 
                                                                                    else
                                                                                    {
                                                                                        *_tmp_5826 = 1;
                                                                                    
                                                                                        uint64_t* _tmp_5825 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_type.value;
                                                                                        __aux64__ -= INT64_MIN;
                                                                                        *_tmp_5825 = __aux64__;
                                                                                    }
                                                                                } else {
                                                                                    uint8_t* _tmp_5825 = (uint8_t*) buffer++;
                                                                                    *_tmp_5825 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_type.value; 
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_type.value;
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_blob.size() != 0) {
                                                                                    // Field:  type(DestinationPlace_depBlob) name(dep_blob) extGroup(0)
                                                                                    // OctetString
                                                                                    // Indefinite length
                                                                                    // OCTET_STRING  min(0) max(16383) span(16384)
                                                                                    
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m005257\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_blob[0].values.size(): ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_blob[0]" << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_blob[0].values.size());
                                                                                    
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_blob[0].values.size() < 0) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_blob[0].value' (" << 
                                                                                                    ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_blob[0].values.size() << ") is less than allowable (0); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_blob[0].values.size() > 16383) {
                                                                                        logger->warning() << "Error: Value in 'ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_blob[0].value' (" << 
                                                                                                    ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_blob[0].values.size() << ") exceeds max allowable (16383); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    uint16_t* _tmp_5827 = (uint16_t*)buffer;
                                                                                    buffer += 2;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_blob[0].values.size();
                                                                                    if(__aux64__ > 16383) __aux64__ = 16383;
                                                                                    *_tmp_5827 = __aux64__;
                                                                                    
                                                                                    int __ifw = __aux64__;
                                                                                    for(int w = 0; w < __ifw; w++) {
                                                                                        int8_t* __m__ = (int8_t*)buffer++;
                                                                                        *__m__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].dep_blob[0].values[w];
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_id.size() != 0) {
                                                                                    // Field:  type(DestinationPlace_plnId) name(pln_id) extGroup(0)
                                                                                    // Integer
                                                                                    
                                                                                    // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m005258\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_id[0].value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_id[0].value;
                                                                                    }
                                                                                    
                                                                                    uint16_t* _tmp_5828 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_id[0].value - 1;
                                                                                    *_tmp_5828 = __aux64__;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_id[0].value;
                                                                                    
                                                                                    // MIN validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_id[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    // MAX validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_id[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_text.size() != 0) {
                                                                                    // Field:  type(DestinationPlace_plnText) name(pln_text) extGroup(0)
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_5829 = (uint16_t*)buffer;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_text[0].value.size();
                                                                                    
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_text[0].value.size() < 0) {
                                                                                        logger->warning() << "Error: Length of 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_text[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_text[0].value) << " is less than allowable (0); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_text[0].value.size() > 16383) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_text[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_text[0].value) << " exceeds max allowable (16383); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m005259\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_text[0].value.size(): " << 
                                                                                                    static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_text[0].value.size());
                                                                                    
                                                                                    if(__aux64__ > 16383) __aux64__ = 16383;
                                                                                    *_tmp_5829 = __aux64__;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int __ifx = __aux64__;
                                                                                    for(int x = 0; x < __ifx; x++) {  // 16383
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        *__tmp__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dp[0].elements[v].pln_text[0].value.c_str()[x];
                                                                                    }
                                                                                }
                                                                                
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr.size() != 0) {
                                                                        // Field:  type(DDD_IO_dr) name(dr) extGroup(0)
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                                        uint8_t* _ext_flag_2737 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].
                                                                        *_ext_flag_2737 = 0; 
                                                                        
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements.size();
                                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                                        uint16_t* _tmp_5830 = (uint16_t*)buffer;
                                                                        buffer += 2;
                                                                        *_tmp_5830 = __aux64__ - 1;
                                                                        
                                                                        int __ify = __aux64__;
                                                                        for(int y = 0; y < __ify; y++) { 
                                                                            
                                                                                // DestinationRoad  SEQUENCE
                                                                                    //  derType    DDD_DER                     
                                                                                    //  ronId      DestinationRoad_ronId     OPTIONAL  
                                                                                    //  ronText    DestinationRoad_ronText   OPTIONAL  
                                                                                // Optional fields bytemap
                                                                                char* _tmp_5831 = (char*) buffer++;
                                                                                *_tmp_5831 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_id.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->debug() << "|\033[38;5;94m005261\033[0m| Optional field ron_id = " << *_tmp_5831;
                                                                                char* _tmp_5832 = (char*) buffer++;
                                                                                *_tmp_5832 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_text.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->debug() << "|\033[38;5;94m005262\033[0m| Optional field ron_text = " << *_tmp_5832;
                                                                                
                                                                                // Field:  type(DDD_DER) name(der_type) extGroup(0)
                                                                                // Integer
                                                                                
                                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m005263\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].der_type.value) << 
                                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].der_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].der_type.value);
                                                                                }
                                                                                
                                                                                uint8_t* _ext_flag_2738 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].der_type.
                                                                                *_ext_flag_2738 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].der_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].der_type.value <= 15) ? 0 : 1;
                                                                                
                                                                                if(*_ext_flag_2738) {
                                                                                    uint8_t* _tmp_5834 = (uint8_t*) buffer++; 
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].der_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].der_type.value <= INT32_MAX) {
                                                                                        *_tmp_5834 = 0;
                                                                                    
                                                                                        uint32_t* _tmp_5833 = (uint32_t*)buffer; buffer += 4;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].der_type.value;
                                                                                        __aux64__ -= INT32_MIN;
                                                                                        *_tmp_5833 = __aux64__;
                                                                                    } 
                                                                                    else
                                                                                    {
                                                                                        *_tmp_5834 = 1;
                                                                                    
                                                                                        uint64_t* _tmp_5833 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].der_type.value;
                                                                                        __aux64__ -= INT64_MIN;
                                                                                        *_tmp_5833 = __aux64__;
                                                                                    }
                                                                                } else {
                                                                                    uint8_t* _tmp_5833 = (uint8_t*) buffer++;
                                                                                    *_tmp_5833 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].der_type.value; 
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].der_type.value;
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_id.size() != 0) {
                                                                                    // Field:  type(DestinationRoad_ronId) name(ron_id) extGroup(0)
                                                                                    // Integer
                                                                                    
                                                                                    // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m005264\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_id[0].value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_id[0].value;
                                                                                    }
                                                                                    
                                                                                    uint16_t* _tmp_5835 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_id[0].value - 1;
                                                                                    *_tmp_5835 = __aux64__;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_id[0].value;
                                                                                    
                                                                                    // MIN validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_id[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    // MAX validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_id[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_text.size() != 0) {
                                                                                    // Field:  type(DestinationRoad_ronText) name(ron_text) extGroup(0)
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_5836 = (uint16_t*)buffer;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_text[0].value.size();
                                                                                    
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_text[0].value.size() < 0) {
                                                                                        logger->warning() << "Error: Length of 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_text[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_text[0].value) << " is less than allowable (0); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_text[0].value.size() > 16383) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_text[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_text[0].value) << " exceeds max allowable (16383); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m005265\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_text[0].value.size(): " << 
                                                                                                    static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_text[0].value.size());
                                                                                    
                                                                                    if(__aux64__ > 16383) __aux64__ = 16383;
                                                                                    *_tmp_5836 = __aux64__;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int __ifz = __aux64__;
                                                                                    for(int z = 0; z < __ifz; z++) {  // 16383
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        *__tmp__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dr[0].elements[y].ron_text[0].value.c_str()[z];
                                                                                    }
                                                                                }
                                                                                
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].rne.size() != 0) {
                                                                        // Field:  type(DDD_IO_rne) name(rne) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005266\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].rne[0].value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].rne[0].value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].rne[0].value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5837 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].rne[0].value - 1;
                                                                        *_tmp_5837 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].rne[0].value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].rne[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].rne[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_id.size() != 0) {
                                                                        // Field:  type(DDD_IO_stnId) name(stn_id) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005267\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_id[0].value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_id[0].value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_id[0].value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5838 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_id[0].value - 1;
                                                                        *_tmp_5838 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_id[0].value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_id[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_id[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_text.size() != 0) {
                                                                        // Field:  type(DDD_IO_stnText) name(stn_text) extGroup(0)
                                                                        // Text
                                                                        
                                                                        // Indefinite length
                                                                        // TEXT  min(0) max(16383) span(16384)
                                                                        uint16_t* _tmp_5839 = (uint16_t*)buffer;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_text[0].value.size();
                                                                        
                                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_text[0].value.size() < 0) {
                                                                            logger->warning() << "Error: Length of 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_text[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_text[0].value) << " is less than allowable (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_text[0].value.size() > 16383) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_text[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_text[0].value) << " exceeds max allowable (16383); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005268\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_text[0].value.size(): " << 
                                                                                        static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_text[0].value.size());
                                                                        
                                                                        if(__aux64__ > 16383) __aux64__ = 16383;
                                                                        *_tmp_5839 = __aux64__;
                                                                        buffer += 2;
                                                                        
                                                                        int __ifa = __aux64__;
                                                                        for(int a = 0; a < __ifa; a++) {  // 16383
                                                                            char* __tmp__ = (char*)buffer++;
                                                                            *__tmp__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].stn_text[0].value.c_str()[a];
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp.size() != 0) {
                                                                        // Field:  type(DistanceOrDuration) name(dcp) extGroup(0)
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(DistanceOrDuration_value) name(value) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005269\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp[0].value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp[0].value.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_5840 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp[0].value.value - 1;
                                                                            *_tmp_5840 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp[0].value.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(DistanceOrDuration_RSCUnit_unit) name(unit) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(2) max(9) span(8) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005270\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp[0].unit.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_5841 = (uint8_t*) buffer++;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp[0].unit.value - 2;
                                                                            *_tmp_5841 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp[0].unit.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp[0].unit.value' (" << __aux64__ << ") less than (2); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].dcp[0].unit.value' (" << __aux64__ << ") exceeds max allowable (9); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp.size() != 0) {
                                                                        // Field:  type(DistanceOrDuration) name(ddp) extGroup(0)
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(DistanceOrDuration_value) name(value) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005271\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp[0].value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp[0].value.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_5842 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp[0].value.value - 1;
                                                                            *_tmp_5842 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp[0].value.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(DistanceOrDuration_RSCUnit_unit) name(unit) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(2) max(9) span(8) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005272\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp[0].unit.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_5843 = (uint8_t*) buffer++;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp[0].unit.value - 2;
                                                                            *_tmp_5843 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp[0].unit.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp[0].unit.value' (" << __aux64__ << ") less than (2); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p].ddd[0].io_list.elements[u].ddp[0].unit.value' (" << __aux64__ << ") exceeds max allowable (9); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    }
                                                                    
                                                            }
                                                    
                                                    }
                                                    else
                                                    {
                                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_183) << ") selected in CHOICE ISO14823Attributes_element in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.iso14823[0].attributes[0].elements[p]'; message dropped.";
                                                        return -1;
                                                    }
                                                }
                                            }
                                    
                                    }
                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.itis_codes.size() != 0)  // CHOICE 2  fieldType(RSCode_code) 
                                    {
                                        *_choice_181 = 2;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m005273\033[0m| Choice selection: 2";
                                    
                                        // Integer
                                        
                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m005274\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.itis_codes[0].value) << 
                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.itis_codes[0].value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.itis_codes[0].value;
                                        }
                                        
                                        uint16_t* _tmp_5844 = (uint16_t*) buffer; buffer += 2;
                                        *_tmp_5844 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.itis_codes[0].value; 
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.itis_codes[0].value;
                                        
                                        // MIN validator
                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.itis_codes[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                            return -1;
                                        }
                                        // MAX validator
                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.itis_codes[0].value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                            return -1;
                                        }
                                    
                                    }
                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue.size() != 0)  // CHOICE 3  fieldType(RSCode_code) 
                                    {
                                        *_choice_181 = 3;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m005275\033[0m| Choice selection: 3";
                                    
                                            // AnyCatalogue  SEQUENCE
                                                //  owner         Provider                       
                                                //  version       AnyCatalogue_version           
                                                //  pictogramCode AnyCatalogue_pictogramCode     
                                                //  value         AnyCatalogue_value           OPTIONAL  
                                                //  unit          RSCUnit                      OPTIONAL  
                                                //  attributes    ISO14823Attributes           OPTIONAL  
                                            // Optional fields bytemap
                                            char* _tmp_5845 = (char*) buffer++;
                                            *_tmp_5845 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].value.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005276\033[0m| Optional field value = " << *_tmp_5845;
                                            char* _tmp_5846 = (char*) buffer++;
                                            *_tmp_5846 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].unit.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005277\033[0m| Optional field unit = " << *_tmp_5846;
                                            char* _tmp_5847 = (char*) buffer++;
                                            *_tmp_5847 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005278\033[0m| Optional field attributes = " << *_tmp_5847;
                                            
                                            // Field:  type(Provider) name(owner) extGroup(0)
                                                // Provider  SEQUENCE
                                                    //  countryCode        CountryCode          
                                                    //  providerIdentifier IssuerIdentifier     
                                                // Optional fields bytemap
                                                
                                                // Field:  type(CountryCode) name(country_code) extGroup(0)
                                                // BitString
                                                // BIT_STRING  min(10) max(10) span(1)
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m005279\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.country_code.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.country_code.values.size());
                                                
                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.country_code.values.size() < 10) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.country_code.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.country_code.values.size()) << " is less than allowable (10); message dropped.";
                                                    return -1;
                                                }
                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.country_code.values.size() > 10) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.country_code.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.country_code.values.size()) << " exceeds max allowable (10); message dropped.";
                                                    return -1;
                                                }
                                                
                                                uint8_t* _tmp_5848 = (uint8_t*)buffer;
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.country_code.values.size();
                                                if(__aux64__ > 10) __aux64__ = 10;
                                                *_tmp_5848 = __aux64__ - 10;
                                                buffer += 1;
                                                
                                                int __ifb = __aux64__;
                                                for(int b = 0; b < __ifb; b++) {
                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                    *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.country_code.values[b]? 1: 0);
                                                }
                                                
                                                // Field:  type(IssuerIdentifier) name(provider_identifier) extGroup(0)
                                                // Integer
                                                
                                                // UINT16  min(0) max(16383) span(16384) dataType(UInt16)
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005280\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.provider_identifier.value) << 
                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.provider_identifier.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.provider_identifier.value;
                                                }
                                                
                                                uint16_t* _tmp_5849 = (uint16_t*) buffer; buffer += 2;
                                                *_tmp_5849 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.provider_identifier.value; 
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.provider_identifier.value;
                                                
                                                // MIN validator
                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.provider_identifier.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                    return -1;
                                                }
                                                // MAX validator
                                                if (VALIDATORS_ENABLED && __aux64__ > 16383) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].owner.provider_identifier.value' (" << __aux64__ << ") exceeds max allowable (16383); message dropped.";
                                                    return -1;
                                                }
                                            
                                            // Field:  type(AnyCatalogue_version) name(version) extGroup(0)
                                            // Integer
                                            
                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005281\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].version.value) << 
                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].version.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].version.value);
                                            }
                                            
                                            uint8_t* _tmp_5850 = (uint8_t*) buffer++;
                                            *_tmp_5850 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].version.value; 
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].version.value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].version.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].version.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                return -1;
                                            }
                                            
                                            // Field:  type(AnyCatalogue_pictogramCode) name(pictogram_code) extGroup(0)
                                            // Integer
                                            
                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005282\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].pictogram_code.value) << 
                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].pictogram_code.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].pictogram_code.value;
                                            }
                                            
                                            uint16_t* _tmp_5851 = (uint16_t*) buffer; buffer += 2;
                                            *_tmp_5851 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].pictogram_code.value; 
                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].pictogram_code.value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].pictogram_code.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].pictogram_code.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                return -1;
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].value.size() != 0) {
                                                // Field:  type(AnyCatalogue_value) name(value) extGroup(0)
                                                // Integer
                                                
                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005283\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].value[0].value) << 
                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].value[0].value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].value[0].value;
                                                }
                                                
                                                uint16_t* _tmp_5852 = (uint16_t*) buffer; buffer += 2;
                                                *_tmp_5852 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].value[0].value; 
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].value[0].value;
                                                
                                                // MIN validator
                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].value[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                    return -1;
                                                }
                                                // MAX validator
                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].value[0].value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                    return -1;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].unit.size() != 0) {
                                                // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                // Integer
                                                
                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005284\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].unit[0].value) << 
                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].unit[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].unit[0].value);
                                                }
                                                
                                                uint8_t* _tmp_5853 = (uint8_t*) buffer++;
                                                *_tmp_5853 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].unit[0].value; 
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].unit[0].value;
                                                
                                                // MIN validator
                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].unit[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                    return -1;
                                                }
                                                // MAX validator
                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].unit[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                    return -1;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes.size() != 0) {
                                                // Field:  type(ISO14823Attributes) name(attributes) extGroup(0)
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                                uint8_t* _ext_flag_2752 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].
                                                *_ext_flag_2752 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements.size();
                                                if(__aux64__ > 8) __aux64__ = 8;
                                                uint16_t* _tmp_5854 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_5854 = __aux64__ - 1;
                                                
                                                int __ifc = __aux64__;
                                                for(int c = 0; c < __ifc; c++) { 
                                                    
                                                    // Choice
                                                       // #0  dtm   DTM
                                                       // #1  edt   EDT
                                                       // #2  dfl   DFL
                                                       // #3  ved   VED
                                                       // #4  spe   SPE
                                                       // #5  roi   ROI
                                                       // #6  dbv   DBV
                                                       // #7  ddd   DDD
                                                    uint8_t* _choice_184 = (uint8_t*) buffer;
                                                    buffer++;
                                                    
                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm.size() != 0) {  // CHOICE 0  fieldType(ISO14823Attributes_element) 
                                                        *_choice_184 = 0;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005286\033[0m| Choice selection: 0";
                                                    
                                                            // DTM  SEQUENCE
                                                                //  year        DTM_year          OPTIONAL  
                                                                //  month_day   DTM_month_day     OPTIONAL  
                                                                //  pmd         PMD               OPTIONAL  
                                                                //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                                //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                                //  period      HoursMinutes      OPTIONAL  
                                                            // Optional fields bytemap
                                                            char* _tmp_5855 = (char*) buffer++;
                                                            *_tmp_5855 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005287\033[0m| Optional field year = " << *_tmp_5855;
                                                            char* _tmp_5856 = (char*) buffer++;
                                                            *_tmp_5856 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005288\033[0m| Optional field month_day = " << *_tmp_5856;
                                                            char* _tmp_5857 = (char*) buffer++;
                                                            *_tmp_5857 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].pmd.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005289\033[0m| Optional field pmd = " << *_tmp_5857;
                                                            char* _tmp_5858 = (char*) buffer++;
                                                            *_tmp_5858 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005290\033[0m| Optional field hour_minutes = " << *_tmp_5858;
                                                            char* _tmp_5859 = (char*) buffer++;
                                                            *_tmp_5859 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].day_of_week.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005291\033[0m| Optional field day_of_week = " << *_tmp_5859;
                                                            char* _tmp_5860 = (char*) buffer++;
                                                            *_tmp_5860 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005292\033[0m| Optional field period = " << *_tmp_5860;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year.size() != 0) {
                                                                // Field:  type(DTM_year) name(year) extGroup(0)
                                                                    // DTM_year  SEQUENCE
                                                                        //  syr        DTM_year_syr     
                                                                        //  eyr        DTM_year_eyr     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(DTM_year_syr) name(syr) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005293\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].syr.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].syr.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_2754 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].syr.
                                                                    *_ext_flag_2754 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].syr.value >= 2000 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].syr.value <= 2127) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_2754) {
                                                                        uint8_t* _tmp_5862 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].syr.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].syr.value <= INT32_MAX) {
                                                                            *_tmp_5862 = 0;
                                                                        
                                                                            uint32_t* _tmp_5861 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].syr.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_5861 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_5862 = 1;
                                                                        
                                                                            uint64_t* _tmp_5861 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].syr.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_5861 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_5861 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].syr.value - 2000;
                                                                        *_tmp_5861 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].syr.value;
                                                                    }
                                                                    
                                                                    // Field:  type(DTM_year_eyr) name(eyr) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005294\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].eyr.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].eyr.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_2755 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].eyr.
                                                                    *_ext_flag_2755 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].eyr.value >= 2000 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].eyr.value <= 2127) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_2755) {
                                                                        uint8_t* _tmp_5864 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].eyr.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].eyr.value <= INT32_MAX) {
                                                                            *_tmp_5864 = 0;
                                                                        
                                                                            uint32_t* _tmp_5863 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].eyr.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_5863 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_5864 = 1;
                                                                        
                                                                            uint64_t* _tmp_5863 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].eyr.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_5863 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_5863 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].eyr.value - 2000;
                                                                        *_tmp_5863 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].year[0].eyr.value;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day.size() != 0) {
                                                                // Field:  type(DTM_month_day) name(month_day) extGroup(0)
                                                                    // DTM_month_day  SEQUENCE
                                                                        //  smd        MonthDay       
                                                                        //  emd        MonthDay       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay) name(smd) extGroup(0)
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005295\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].smd.month.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].smd.month.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5865 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].smd.month.value - 1;
                                                                        *_tmp_5865 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].smd.month.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].smd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].smd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005296\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].smd.day.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].smd.day.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5866 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].smd.day.value - 1;
                                                                        *_tmp_5866 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].smd.day.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].smd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].smd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    // Field:  type(MonthDay) name(emd) extGroup(0)
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005297\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].emd.month.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].emd.month.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5867 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].emd.month.value - 1;
                                                                        *_tmp_5867 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].emd.month.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].emd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].emd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005298\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].emd.day.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].emd.day.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5868 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].emd.day.value - 1;
                                                                        *_tmp_5868 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].emd.day.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].emd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].month_day[0].emd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                            return -1;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].pmd.size() != 0) {
                                                                // Field:  type(PMD) name(pmd) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005299\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].pmd[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].pmd[0].values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].pmd[0].values.size() < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].pmd[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].pmd[0].values.size()) << " is less than allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].pmd[0].values.size() > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].pmd[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].pmd[0].values.size()) << " exceeds max allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_5869 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].pmd[0].values.size();
                                                                if(__aux64__ > 4) __aux64__ = 4;
                                                                *_tmp_5869 = __aux64__ - 4;
                                                                buffer += 1;
                                                                
                                                                int __ifd = __aux64__;
                                                                for(int d = 0; d < __ifd; d++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].pmd[0].values[d]? 1: 0);
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes.size() != 0) {
                                                                // Field:  type(DTM_hourMinutes) name(hour_minutes) extGroup(0)
                                                                    // DTM_hourMinutes  SEQUENCE
                                                                        //  shm        HoursMinutes     
                                                                        //  ehm        HoursMinutes     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes) name(shm) extGroup(0)
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005300\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].shm.hours.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].shm.hours.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5870 = (uint8_t*) buffer++;
                                                                        *_tmp_5870 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].shm.hours.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].shm.hours.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005301\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].shm.mins.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].shm.mins.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5871 = (uint8_t*) buffer++;
                                                                        *_tmp_5871 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].shm.mins.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].shm.mins.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    // Field:  type(HoursMinutes) name(ehm) extGroup(0)
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005302\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].ehm.hours.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].ehm.hours.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5872 = (uint8_t*) buffer++;
                                                                        *_tmp_5872 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].ehm.hours.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].ehm.hours.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005303\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].ehm.mins.value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].ehm.mins.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_5873 = (uint8_t*) buffer++;
                                                                        *_tmp_5873 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].ehm.mins.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].ehm.mins.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                            return -1;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].day_of_week.size() != 0) {
                                                                // Field:  type(DayOfWeek) name(day_of_week) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(8) max(8) span(1)
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005304\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].day_of_week[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].day_of_week[0].values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].day_of_week[0].values.size() < 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].day_of_week[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].day_of_week[0].values.size()) << " is less than allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].day_of_week[0].values.size() > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].day_of_week[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].day_of_week[0].values.size()) << " exceeds max allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_5874 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].day_of_week[0].values.size();
                                                                if(__aux64__ > 8) __aux64__ = 8;
                                                                *_tmp_5874 = __aux64__ - 8;
                                                                buffer += 1;
                                                                
                                                                int __ife = __aux64__;
                                                                for(int e = 0; e < __ife; e++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].day_of_week[0].values[e]? 1: 0);
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period.size() != 0) {
                                                                // Field:  type(HoursMinutes) name(period) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005305\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period[0].hours.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period[0].hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5875 = (uint8_t*) buffer++;
                                                                    *_tmp_5875 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period[0].hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period[0].hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period[0].hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period[0].hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005306\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period[0].mins.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period[0].mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5876 = (uint8_t*) buffer++;
                                                                    *_tmp_5876 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period[0].mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period[0].mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period[0].mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dtm[0].period[0].mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt.size() != 0)  // CHOICE 1  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_184 = 1;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005307\033[0m| Choice selection: 1";
                                                    
                                                            // EDT  SEQUENCE
                                                                //  year        DTM_year            
                                                                //  month_day   DTM_month_day       
                                                                //  pmd         PMD                 
                                                                //  hourMinutes DTM_hourMinutes     
                                                                //  dayOfWeek   DayOfWeek           
                                                                //  period      HoursMinutes        
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(DTM_year) name(year) extGroup(0)
                                                                // DTM_year  SEQUENCE
                                                                    //  syr        DTM_year_syr     
                                                                    //  eyr        DTM_year_eyr     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(DTM_year_syr) name(syr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005308\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.syr.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.syr.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_2766 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.syr.
                                                                *_ext_flag_2766 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.syr.value >= 2000 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.syr.value <= 2127) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_2766) {
                                                                    uint8_t* _tmp_5878 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.syr.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.syr.value <= INT32_MAX) {
                                                                        *_tmp_5878 = 0;
                                                                    
                                                                        uint32_t* _tmp_5877 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.syr.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_5877 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_5878 = 1;
                                                                    
                                                                        uint64_t* _tmp_5877 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.syr.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_5877 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_5877 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.syr.value - 2000;
                                                                    *_tmp_5877 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.syr.value;
                                                                }
                                                                
                                                                // Field:  type(DTM_year_eyr) name(eyr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005309\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.eyr.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.eyr.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_2767 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.eyr.
                                                                *_ext_flag_2767 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.eyr.value >= 2000 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.eyr.value <= 2127) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_2767) {
                                                                    uint8_t* _tmp_5880 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.eyr.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.eyr.value <= INT32_MAX) {
                                                                        *_tmp_5880 = 0;
                                                                    
                                                                        uint32_t* _tmp_5879 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.eyr.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_5879 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_5880 = 1;
                                                                    
                                                                        uint64_t* _tmp_5879 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.eyr.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_5879 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_5879 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.eyr.value - 2000;
                                                                    *_tmp_5879 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].year.eyr.value;
                                                                }
                                                            
                                                            // Field:  type(DTM_month_day) name(month_day) extGroup(0)
                                                                // DTM_month_day  SEQUENCE
                                                                    //  smd        MonthDay       
                                                                    //  emd        MonthDay       
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(MonthDay) name(smd) extGroup(0)
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005310\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.smd.month.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.smd.month.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5881 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.smd.month.value - 1;
                                                                    *_tmp_5881 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.smd.month.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.smd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.smd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005311\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.smd.day.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.smd.day.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5882 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.smd.day.value - 1;
                                                                    *_tmp_5882 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.smd.day.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.smd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.smd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                // Field:  type(MonthDay) name(emd) extGroup(0)
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005312\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.emd.month.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.emd.month.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5883 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.emd.month.value - 1;
                                                                    *_tmp_5883 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.emd.month.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.emd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.emd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005313\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.emd.day.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.emd.day.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5884 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.emd.day.value - 1;
                                                                    *_tmp_5884 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.emd.day.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.emd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].month_day.emd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            // Field:  type(PMD) name(pmd) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005314\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].pmd.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].pmd.values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].pmd.values.size() < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].pmd.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].pmd.values.size()) << " is less than allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].pmd.values.size() > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].pmd.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].pmd.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_5885 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].pmd.values.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            *_tmp_5885 = __aux64__ - 4;
                                                            buffer += 1;
                                                            
                                                            int __iff = __aux64__;
                                                            for(int f = 0; f < __iff; f++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].pmd.values[f]? 1: 0);
                                                            }
                                                            
                                                            // Field:  type(DTM_hourMinutes) name(hour_minutes) extGroup(0)
                                                                // DTM_hourMinutes  SEQUENCE
                                                                    //  shm        HoursMinutes     
                                                                    //  ehm        HoursMinutes     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(HoursMinutes) name(shm) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005315\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.shm.hours.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.shm.hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5886 = (uint8_t*) buffer++;
                                                                    *_tmp_5886 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.shm.hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.shm.hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.shm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.shm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005316\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.shm.mins.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.shm.mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5887 = (uint8_t*) buffer++;
                                                                    *_tmp_5887 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.shm.mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.shm.mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.shm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.shm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                // Field:  type(HoursMinutes) name(ehm) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005317\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.ehm.hours.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.ehm.hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5888 = (uint8_t*) buffer++;
                                                                    *_tmp_5888 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.ehm.hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.ehm.hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.ehm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.ehm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005318\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.ehm.mins.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.ehm.mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5889 = (uint8_t*) buffer++;
                                                                    *_tmp_5889 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.ehm.mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.ehm.mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.ehm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].hour_minutes.ehm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            // Field:  type(DayOfWeek) name(day_of_week) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(8) max(8) span(1)
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005319\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].day_of_week.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].day_of_week.values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].day_of_week.values.size() < 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].day_of_week.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].day_of_week.values.size()) << " is less than allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].day_of_week.values.size() > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].day_of_week.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].day_of_week.values.size()) << " exceeds max allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_5890 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].day_of_week.values.size();
                                                            if(__aux64__ > 8) __aux64__ = 8;
                                                            *_tmp_5890 = __aux64__ - 8;
                                                            buffer += 1;
                                                            
                                                            int __ifg = __aux64__;
                                                            for(int g = 0; g < __ifg; g++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].day_of_week.values[g]? 1: 0);
                                                            }
                                                            
                                                            // Field:  type(HoursMinutes) name(period) extGroup(0)
                                                                // HoursMinutes  SEQUENCE
                                                                    //  hours      HoursMinutes_hours     
                                                                    //  mins       HoursMinutes_mins      
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005320\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].period.hours.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].period.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].period.hours.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5891 = (uint8_t*) buffer++;
                                                                *_tmp_5891 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].period.hours.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].period.hours.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].period.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].period.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005321\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].period.mins.value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].period.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].period.mins.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5892 = (uint8_t*) buffer++;
                                                                *_tmp_5892 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].period.mins.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].period.mins.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].period.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].edt[0].period.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                    return -1;
                                                                }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dfl.size() != 0)  // CHOICE 2  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_184 = 2;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005322\033[0m| Choice selection: 2";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(8) span(8) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005323\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dfl[0].value) << 
                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dfl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dfl[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5893 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dfl[0].value - 1;
                                                        *_tmp_5893 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dfl[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dfl[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dfl[0].value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved.size() != 0)  // CHOICE 3  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_184 = 3;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005324\033[0m| Choice selection: 3";
                                                    
                                                            // VED  SEQUENCE
                                                                //  hei        Distance     OPTIONAL  
                                                                //  wid        Distance     OPTIONAL  
                                                                //  vln        Distance     OPTIONAL  
                                                                //  wei        Weight       OPTIONAL  
                                                            // Optional fields bytemap
                                                            char* _tmp_5894 = (char*) buffer++;
                                                            *_tmp_5894 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005325\033[0m| Optional field hei = " << *_tmp_5894;
                                                            char* _tmp_5895 = (char*) buffer++;
                                                            *_tmp_5895 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005326\033[0m| Optional field wid = " << *_tmp_5895;
                                                            char* _tmp_5896 = (char*) buffer++;
                                                            *_tmp_5896 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005327\033[0m| Optional field vln = " << *_tmp_5896;
                                                            char* _tmp_5897 = (char*) buffer++;
                                                            *_tmp_5897 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005328\033[0m| Optional field wei = " << *_tmp_5897;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei.size() != 0) {
                                                                // Field:  type(Distance) name(hei) extGroup(0)
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Distance_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005329\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei[0].value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5898 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei[0].value.value - 1;
                                                                    *_tmp_5898 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005330\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5899 = (uint8_t*) buffer++;
                                                                    *_tmp_5899 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].hei[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid.size() != 0) {
                                                                // Field:  type(Distance) name(wid) extGroup(0)
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Distance_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005331\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid[0].value.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid[0].value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5900 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid[0].value.value - 1;
                                                                    *_tmp_5900 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005332\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5901 = (uint8_t*) buffer++;
                                                                    *_tmp_5901 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wid[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln.size() != 0) {
                                                                // Field:  type(Distance) name(vln) extGroup(0)
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Distance_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005333\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln[0].value.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln[0].value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5902 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln[0].value.value - 1;
                                                                    *_tmp_5902 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005334\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5903 = (uint8_t*) buffer++;
                                                                    *_tmp_5903 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].vln[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei.size() != 0) {
                                                                // Field:  type(Weight) name(wei) extGroup(0)
                                                                    // Weight  SEQUENCE
                                                                        //  value      Weight_value     
                                                                        //  unit       RSCUnit          
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Weight_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005335\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei[0].value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_5904 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei[0].value.value - 1;
                                                                    *_tmp_5904 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005336\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5905 = (uint8_t*) buffer++;
                                                                    *_tmp_5905 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ved[0].wei[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe.size() != 0)  // CHOICE 4  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_184 = 4;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005337\033[0m| Choice selection: 4";
                                                    
                                                            // SPE  SEQUENCE
                                                                //  spm        SPE_spm            OPTIONAL  
                                                                //  mns        SPE_mns            OPTIONAL  
                                                                //  unit       SPE_RSCUnit_unit     
                                                            // Optional fields bytemap
                                                            char* _tmp_5906 = (char*) buffer++;
                                                            *_tmp_5906 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].spm.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005338\033[0m| Optional field spm = " << *_tmp_5906;
                                                            char* _tmp_5907 = (char*) buffer++;
                                                            *_tmp_5907 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].mns.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005339\033[0m| Optional field mns = " << *_tmp_5907;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].spm.size() != 0) {
                                                                // Field:  type(SPE_spm) name(spm) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(250) span(251) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005340\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].spm[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].spm[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].spm[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5908 = (uint8_t*) buffer++;
                                                                *_tmp_5908 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].spm[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].spm[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].spm[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].spm[0].value' (" << __aux64__ << ") exceeds max allowable (250); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].mns.size() != 0) {
                                                                // Field:  type(SPE_mns) name(mns) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(250) span(251) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005341\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].mns[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].mns[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].mns[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5909 = (uint8_t*) buffer++;
                                                                *_tmp_5909 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].mns[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].mns[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].mns[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].mns[0].value' (" << __aux64__ << ") exceeds max allowable (250); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            // Field:  type(SPE_RSCUnit_unit) name(unit) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(1) span(2) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005342\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].unit.value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].unit.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5910 = (uint8_t*) buffer++;
                                                            *_tmp_5910 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].unit.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].unit.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].spe[0].unit.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                return -1;
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].roi.size() != 0)  // CHOICE 5  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_184 = 5;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005343\033[0m| Choice selection: 5";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005344\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].roi[0].value) << 
                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].roi[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].roi[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5911 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].roi[0].value - 1;
                                                        *_tmp_5911 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].roi[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].roi[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 32) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].roi[0].value' (" << __aux64__ << ") exceeds max allowable (32); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dbv.size() != 0)  // CHOICE 6  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_184 = 6;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005345\033[0m| Choice selection: 6";
                                                    
                                                            // DBV  SEQUENCE
                                                                //  value      Distance_value     
                                                                //  unit       RSCUnit            
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(Distance_value) name(value) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005346\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dbv[0].value.value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dbv[0].value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dbv[0].value.value;
                                                            }
                                                            
                                                            uint16_t* _tmp_5912 = (uint16_t*) buffer; buffer += 2;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dbv[0].value.value - 1;
                                                            *_tmp_5912 = __aux64__;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dbv[0].value.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dbv[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dbv[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005347\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dbv[0].unit.value) << 
                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dbv[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dbv[0].unit.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_5913 = (uint8_t*) buffer++;
                                                            *_tmp_5913 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dbv[0].unit.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dbv[0].unit.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dbv[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].dbv[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd.size() != 0)  // CHOICE 7  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_184 = 7;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005348\033[0m| Choice selection: 7";
                                                    
                                                            // DDD  SEQUENCE
                                                                //  dcj        DDD_dcj      OPTIONAL  
                                                                //  dcr        DDD_dcr      OPTIONAL  
                                                                //  tpl        DDD_tpl      OPTIONAL  
                                                                //  ioList     DDD_ioList     
                                                            // Optional fields bytemap
                                                            char* _tmp_5914 = (char*) buffer++;
                                                            *_tmp_5914 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcj.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005349\033[0m| Optional field dcj = " << *_tmp_5914;
                                                            char* _tmp_5915 = (char*) buffer++;
                                                            *_tmp_5915 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcr.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005350\033[0m| Optional field dcr = " << *_tmp_5915;
                                                            char* _tmp_5916 = (char*) buffer++;
                                                            *_tmp_5916 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].tpl.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005351\033[0m| Optional field tpl = " << *_tmp_5916;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcj.size() != 0) {
                                                                // Field:  type(DDD_dcj) name(dcj) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(1) max(128) span(128) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005352\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcj[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcj[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcj[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5917 = (uint8_t*) buffer++;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcj[0].value - 1;
                                                                *_tmp_5917 = __aux64__;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcj[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcj[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcj[0].value' (" << __aux64__ << ") exceeds max allowable (128); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcr.size() != 0) {
                                                                // Field:  type(DDD_dcr) name(dcr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(1) max(128) span(128) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005353\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcr[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcr[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcr[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5918 = (uint8_t*) buffer++;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcr[0].value - 1;
                                                                *_tmp_5918 = __aux64__;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcr[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcr[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].dcr[0].value' (" << __aux64__ << ") exceeds max allowable (128); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].tpl.size() != 0) {
                                                                // Field:  type(DDD_tpl) name(tpl) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(1) max(128) span(128) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005354\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].tpl[0].value) << 
                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].tpl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].tpl[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_5919 = (uint8_t*) buffer++;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].tpl[0].value - 1;
                                                                *_tmp_5919 = __aux64__;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].tpl[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].tpl[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].tpl[0].value' (" << __aux64__ << ") exceeds max allowable (128); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            // Field:  type(DDD_ioList) name(io_list) extGroup(0)
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                                            uint8_t* _ext_flag_2796 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.
                                                            *_ext_flag_2796 = 0; 
                                                            
                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements.size();
                                                            if(__aux64__ > 8) __aux64__ = 8;
                                                            uint16_t* _tmp_5920 = (uint16_t*)buffer;
                                                            buffer += 2;
                                                            *_tmp_5920 = __aux64__ - 1;
                                                            
                                                            int __ifh = __aux64__;
                                                            for(int h = 0; h < __ifh; h++) { 
                                                                
                                                                    // DDD_IO  SEQUENCE
                                                                        //  drn        DDD_IO_drn             
                                                                        //  dp         DDD_IO_dp            OPTIONAL  
                                                                        //  dr         DDD_IO_dr            OPTIONAL  
                                                                        //  rne        DDD_IO_rne           OPTIONAL  
                                                                        //  stnId      DDD_IO_stnId         OPTIONAL  
                                                                        //  stnText    DDD_IO_stnText       OPTIONAL  
                                                                        //  dcp        DistanceOrDuration   OPTIONAL  
                                                                        //  ddp        DistanceOrDuration   OPTIONAL  
                                                                    // Optional fields bytemap
                                                                    char* _tmp_5921 = (char*) buffer++;
                                                                    *_tmp_5921 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005356\033[0m| Optional field dp = " << *_tmp_5921;
                                                                    char* _tmp_5922 = (char*) buffer++;
                                                                    *_tmp_5922 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005357\033[0m| Optional field dr = " << *_tmp_5922;
                                                                    char* _tmp_5923 = (char*) buffer++;
                                                                    *_tmp_5923 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].rne.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005358\033[0m| Optional field rne = " << *_tmp_5923;
                                                                    char* _tmp_5924 = (char*) buffer++;
                                                                    *_tmp_5924 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_id.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005359\033[0m| Optional field stn_id = " << *_tmp_5924;
                                                                    char* _tmp_5925 = (char*) buffer++;
                                                                    *_tmp_5925 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_text.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005360\033[0m| Optional field stn_text = " << *_tmp_5925;
                                                                    char* _tmp_5926 = (char*) buffer++;
                                                                    *_tmp_5926 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005361\033[0m| Optional field dcp = " << *_tmp_5926;
                                                                    char* _tmp_5927 = (char*) buffer++;
                                                                    *_tmp_5927 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005362\033[0m| Optional field ddp = " << *_tmp_5927;
                                                                    
                                                                    // Field:  type(DDD_IO_drn) name(drn) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005363\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].drn.value) << 
                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].drn.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].drn.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_5928 = (uint8_t*) buffer++;
                                                                    *_tmp_5928 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].drn.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].drn.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].drn.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].drn.value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp.size() != 0) {
                                                                        // Field:  type(DDD_IO_dp) name(dp) extGroup(0)
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                                        uint8_t* _ext_flag_2798 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].
                                                                        *_ext_flag_2798 = 0; 
                                                                        
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements.size();
                                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                                        uint16_t* _tmp_5929 = (uint16_t*)buffer;
                                                                        buffer += 2;
                                                                        *_tmp_5929 = __aux64__ - 1;
                                                                        
                                                                        int __ifi = __aux64__;
                                                                        for(int i = 0; i < __ifi; i++) { 
                                                                            
                                                                                // DestinationPlace  SEQUENCE
                                                                                    //  depType    DDD_DEP                      
                                                                                    //  depBlob    DestinationPlace_depBlob   OPTIONAL  
                                                                                    //  plnId      DestinationPlace_plnId     OPTIONAL  
                                                                                    //  plnText    DestinationPlace_plnText   OPTIONAL  
                                                                                // Optional fields bytemap
                                                                                char* _tmp_5930 = (char*) buffer++;
                                                                                *_tmp_5930 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_blob.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->debug() << "|\033[38;5;94m005365\033[0m| Optional field dep_blob = " << *_tmp_5930;
                                                                                char* _tmp_5931 = (char*) buffer++;
                                                                                *_tmp_5931 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_id.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->debug() << "|\033[38;5;94m005366\033[0m| Optional field pln_id = " << *_tmp_5931;
                                                                                char* _tmp_5932 = (char*) buffer++;
                                                                                *_tmp_5932 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_text.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->debug() << "|\033[38;5;94m005367\033[0m| Optional field pln_text = " << *_tmp_5932;
                                                                                
                                                                                // Field:  type(DDD_DEP) name(dep_type) extGroup(0)
                                                                                // Integer
                                                                                
                                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m005368\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_type.value) << 
                                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_type.value);
                                                                                }
                                                                                
                                                                                uint8_t* _ext_flag_2799 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_type.
                                                                                *_ext_flag_2799 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_type.value <= 15) ? 0 : 1;
                                                                                
                                                                                if(*_ext_flag_2799) {
                                                                                    uint8_t* _tmp_5934 = (uint8_t*) buffer++; 
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_type.value <= INT32_MAX) {
                                                                                        *_tmp_5934 = 0;
                                                                                    
                                                                                        uint32_t* _tmp_5933 = (uint32_t*)buffer; buffer += 4;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_type.value;
                                                                                        __aux64__ -= INT32_MIN;
                                                                                        *_tmp_5933 = __aux64__;
                                                                                    } 
                                                                                    else
                                                                                    {
                                                                                        *_tmp_5934 = 1;
                                                                                    
                                                                                        uint64_t* _tmp_5933 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_type.value;
                                                                                        __aux64__ -= INT64_MIN;
                                                                                        *_tmp_5933 = __aux64__;
                                                                                    }
                                                                                } else {
                                                                                    uint8_t* _tmp_5933 = (uint8_t*) buffer++;
                                                                                    *_tmp_5933 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_type.value; 
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_type.value;
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_blob.size() != 0) {
                                                                                    // Field:  type(DestinationPlace_depBlob) name(dep_blob) extGroup(0)
                                                                                    // OctetString
                                                                                    // Indefinite length
                                                                                    // OCTET_STRING  min(0) max(16383) span(16384)
                                                                                    
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m005369\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_blob[0].values.size(): ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_blob[0]" << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_blob[0].values.size());
                                                                                    
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_blob[0].values.size() < 0) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_blob[0].value' (" << 
                                                                                                    ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_blob[0].values.size() << ") is less than allowable (0); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_blob[0].values.size() > 16383) {
                                                                                        logger->warning() << "Error: Value in 'ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_blob[0].value' (" << 
                                                                                                    ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_blob[0].values.size() << ") exceeds max allowable (16383); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    uint16_t* _tmp_5935 = (uint16_t*)buffer;
                                                                                    buffer += 2;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_blob[0].values.size();
                                                                                    if(__aux64__ > 16383) __aux64__ = 16383;
                                                                                    *_tmp_5935 = __aux64__;
                                                                                    
                                                                                    int __ifj = __aux64__;
                                                                                    for(int j = 0; j < __ifj; j++) {
                                                                                        int8_t* __m__ = (int8_t*)buffer++;
                                                                                        *__m__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].dep_blob[0].values[j];
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_id.size() != 0) {
                                                                                    // Field:  type(DestinationPlace_plnId) name(pln_id) extGroup(0)
                                                                                    // Integer
                                                                                    
                                                                                    // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m005370\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_id[0].value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_id[0].value;
                                                                                    }
                                                                                    
                                                                                    uint16_t* _tmp_5936 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_id[0].value - 1;
                                                                                    *_tmp_5936 = __aux64__;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_id[0].value;
                                                                                    
                                                                                    // MIN validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_id[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    // MAX validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_id[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_text.size() != 0) {
                                                                                    // Field:  type(DestinationPlace_plnText) name(pln_text) extGroup(0)
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_5937 = (uint16_t*)buffer;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_text[0].value.size();
                                                                                    
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_text[0].value.size() < 0) {
                                                                                        logger->warning() << "Error: Length of 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_text[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_text[0].value) << " is less than allowable (0); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_text[0].value.size() > 16383) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_text[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_text[0].value) << " exceeds max allowable (16383); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m005371\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_text[0].value.size(): " << 
                                                                                                    static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_text[0].value.size());
                                                                                    
                                                                                    if(__aux64__ > 16383) __aux64__ = 16383;
                                                                                    *_tmp_5937 = __aux64__;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int __ifk = __aux64__;
                                                                                    for(int k = 0; k < __ifk; k++) {  // 16383
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        *__tmp__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dp[0].elements[i].pln_text[0].value.c_str()[k];
                                                                                    }
                                                                                }
                                                                                
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr.size() != 0) {
                                                                        // Field:  type(DDD_IO_dr) name(dr) extGroup(0)
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                                        uint8_t* _ext_flag_2801 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].
                                                                        *_ext_flag_2801 = 0; 
                                                                        
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements.size();
                                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                                        uint16_t* _tmp_5938 = (uint16_t*)buffer;
                                                                        buffer += 2;
                                                                        *_tmp_5938 = __aux64__ - 1;
                                                                        
                                                                        int __ifl = __aux64__;
                                                                        for(int l = 0; l < __ifl; l++) { 
                                                                            
                                                                                // DestinationRoad  SEQUENCE
                                                                                    //  derType    DDD_DER                     
                                                                                    //  ronId      DestinationRoad_ronId     OPTIONAL  
                                                                                    //  ronText    DestinationRoad_ronText   OPTIONAL  
                                                                                // Optional fields bytemap
                                                                                char* _tmp_5939 = (char*) buffer++;
                                                                                *_tmp_5939 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_id.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->debug() << "|\033[38;5;94m005373\033[0m| Optional field ron_id = " << *_tmp_5939;
                                                                                char* _tmp_5940 = (char*) buffer++;
                                                                                *_tmp_5940 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_text.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->debug() << "|\033[38;5;94m005374\033[0m| Optional field ron_text = " << *_tmp_5940;
                                                                                
                                                                                // Field:  type(DDD_DER) name(der_type) extGroup(0)
                                                                                // Integer
                                                                                
                                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m005375\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].der_type.value) << 
                                                                                                 " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].der_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].der_type.value);
                                                                                }
                                                                                
                                                                                uint8_t* _ext_flag_2802 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].der_type.
                                                                                *_ext_flag_2802 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].der_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].der_type.value <= 15) ? 0 : 1;
                                                                                
                                                                                if(*_ext_flag_2802) {
                                                                                    uint8_t* _tmp_5942 = (uint8_t*) buffer++; 
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].der_type.value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].der_type.value <= INT32_MAX) {
                                                                                        *_tmp_5942 = 0;
                                                                                    
                                                                                        uint32_t* _tmp_5941 = (uint32_t*)buffer; buffer += 4;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].der_type.value;
                                                                                        __aux64__ -= INT32_MIN;
                                                                                        *_tmp_5941 = __aux64__;
                                                                                    } 
                                                                                    else
                                                                                    {
                                                                                        *_tmp_5942 = 1;
                                                                                    
                                                                                        uint64_t* _tmp_5941 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].der_type.value;
                                                                                        __aux64__ -= INT64_MIN;
                                                                                        *_tmp_5941 = __aux64__;
                                                                                    }
                                                                                } else {
                                                                                    uint8_t* _tmp_5941 = (uint8_t*) buffer++;
                                                                                    *_tmp_5941 = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].der_type.value; 
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].der_type.value;
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_id.size() != 0) {
                                                                                    // Field:  type(DestinationRoad_ronId) name(ron_id) extGroup(0)
                                                                                    // Integer
                                                                                    
                                                                                    // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m005376\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_id[0].value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_id[0].value;
                                                                                    }
                                                                                    
                                                                                    uint16_t* _tmp_5943 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_id[0].value - 1;
                                                                                    *_tmp_5943 = __aux64__;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_id[0].value;
                                                                                    
                                                                                    // MIN validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_id[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    // MAX validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_id[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_text.size() != 0) {
                                                                                    // Field:  type(DestinationRoad_ronText) name(ron_text) extGroup(0)
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_5944 = (uint16_t*)buffer;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_text[0].value.size();
                                                                                    
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_text[0].value.size() < 0) {
                                                                                        logger->warning() << "Error: Length of 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_text[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_text[0].value) << " is less than allowable (0); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_text[0].value.size() > 16383) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_text[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_text[0].value) << " exceeds max allowable (16383); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m005377\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_text[0].value.size(): " << 
                                                                                                    static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_text[0].value.size());
                                                                                    
                                                                                    if(__aux64__ > 16383) __aux64__ = 16383;
                                                                                    *_tmp_5944 = __aux64__;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int __ifm = __aux64__;
                                                                                    for(int m = 0; m < __ifm; m++) {  // 16383
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        *__tmp__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dr[0].elements[l].ron_text[0].value.c_str()[m];
                                                                                    }
                                                                                }
                                                                                
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].rne.size() != 0) {
                                                                        // Field:  type(DDD_IO_rne) name(rne) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005378\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].rne[0].value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].rne[0].value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].rne[0].value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5945 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].rne[0].value - 1;
                                                                        *_tmp_5945 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].rne[0].value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].rne[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].rne[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_id.size() != 0) {
                                                                        // Field:  type(DDD_IO_stnId) name(stn_id) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005379\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_id[0].value) << 
                                                                                         " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_id[0].value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_id[0].value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_5946 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_id[0].value - 1;
                                                                        *_tmp_5946 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_id[0].value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_id[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_id[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_text.size() != 0) {
                                                                        // Field:  type(DDD_IO_stnText) name(stn_text) extGroup(0)
                                                                        // Text
                                                                        
                                                                        // Indefinite length
                                                                        // TEXT  min(0) max(16383) span(16384)
                                                                        uint16_t* _tmp_5947 = (uint16_t*)buffer;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_text[0].value.size();
                                                                        
                                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_text[0].value.size() < 0) {
                                                                            logger->warning() << "Error: Length of 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_text[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_text[0].value) << " is less than allowable (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_text[0].value.size() > 16383) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_text[0].value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_text[0].value) << " exceeds max allowable (16383); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005380\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_text[0].value.size(): " << 
                                                                                        static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_text[0].value.size());
                                                                        
                                                                        if(__aux64__ > 16383) __aux64__ = 16383;
                                                                        *_tmp_5947 = __aux64__;
                                                                        buffer += 2;
                                                                        
                                                                        int __ifn = __aux64__;
                                                                        for(int n = 0; n < __ifn; n++) {  // 16383
                                                                            char* __tmp__ = (char*)buffer++;
                                                                            *__tmp__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].stn_text[0].value.c_str()[n];
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp.size() != 0) {
                                                                        // Field:  type(DistanceOrDuration) name(dcp) extGroup(0)
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(DistanceOrDuration_value) name(value) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005381\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp[0].value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp[0].value.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_5948 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp[0].value.value - 1;
                                                                            *_tmp_5948 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp[0].value.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(DistanceOrDuration_RSCUnit_unit) name(unit) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(2) max(9) span(8) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005382\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp[0].unit.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_5949 = (uint8_t*) buffer++;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp[0].unit.value - 2;
                                                                            *_tmp_5949 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp[0].unit.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp[0].unit.value' (" << __aux64__ << ") less than (2); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].dcp[0].unit.value' (" << __aux64__ << ") exceeds max allowable (9); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp.size() != 0) {
                                                                        // Field:  type(DistanceOrDuration) name(ddp) extGroup(0)
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(DistanceOrDuration_value) name(value) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005383\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp[0].value.value: " << ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp[0].value.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_5950 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp[0].value.value - 1;
                                                                            *_tmp_5950 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp[0].value.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(DistanceOrDuration_RSCUnit_unit) name(unit) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(2) max(9) span(8) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005384\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp[0].unit.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_5951 = (uint8_t*) buffer++;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp[0].unit.value - 2;
                                                                            *_tmp_5951 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp[0].unit.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp[0].unit.value' (" << __aux64__ << ") less than (2); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c].ddd[0].io_list.elements[h].ddp[0].unit.value' (" << __aux64__ << ") exceeds max allowable (9); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    }
                                                                    
                                                            }
                                                    
                                                    }
                                                    else
                                                    {
                                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_184) << ") selected in CHOICE ISO14823Attributes_element in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code.any_catalogue[0].attributes[0].elements[c]'; message dropped.";
                                                        return -1;
                                                    }
                                                }
                                            }
                                    
                                    }
                                    else
                                    {
                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_181) << ") selected in CHOICE RSCode_code in 'ivi.optional[0].elements[e].giv[0].elements[o].road_sign_codes.elements[k].code'; message dropped.";
                                        return -1;
                                    }
                                    
                            }
                            
                            if(ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text.size() != 0) {
                                // Field:  type(GicPart_extraText) name(extra_text) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                uint8_t* _ext_flag_2810 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].
                                *_ext_flag_2810 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements.size();
                                if(__aux64__ > 4) __aux64__ = 4;
                                uint16_t* _tmp_5952 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_5952 = __aux64__ - 1;
                                
                                int __ifo = __aux64__;
                                for(int o = 0; o < __ifo; o++) { 
                                    
                                        // Text  SEQUENCE
                                            //  layoutComponentId Text_layoutComponentId   OPTIONAL  
                                            //  language          Text_language              
                                            //  textContent       Text_textContent           
                                        // Optional fields bytemap
                                        char* _tmp_5953 = (char*) buffer++;
                                        *_tmp_5953 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].layout_component_id.size() != 0 ? 1 : 0);
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m005386\033[0m| Optional field layout_component_id = " << *_tmp_5953;
                                        
                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].layout_component_id.size() != 0) {
                                            // Field:  type(Text_layoutComponentId) name(layout_component_id) extGroup(0)
                                            // Integer
                                            
                                            // UINT8  min(1) max(4) span(4) dataType(UInt8)
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005387\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].layout_component_id[0].value) << 
                                                             " ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].layout_component_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].layout_component_id[0].value);
                                            }
                                            
                                            uint8_t* _ext_flag_2811 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].layout_component_id[0].
                                            *_ext_flag_2811 = (ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].layout_component_id[0].value >= 1 && ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].layout_component_id[0].value <= 4) ? 0 : 1;
                                            
                                            if(*_ext_flag_2811) {
                                                uint8_t* _tmp_5955 = (uint8_t*) buffer++; 
                                                if(ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].layout_component_id[0].value >= 0 && ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].layout_component_id[0].value <= INT32_MAX) {
                                                    *_tmp_5955 = 0;
                                                
                                                    uint32_t* _tmp_5954 = (uint32_t*)buffer; buffer += 4;
                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].layout_component_id[0].value;
                                                    __aux64__ -= INT32_MIN;
                                                    *_tmp_5954 = __aux64__;
                                                } 
                                                else
                                                {
                                                    *_tmp_5955 = 1;
                                                
                                                    uint64_t* _tmp_5954 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].layout_component_id[0].value;
                                                    __aux64__ -= INT64_MIN;
                                                    *_tmp_5954 = __aux64__;
                                                }
                                            } else {
                                                uint8_t* _tmp_5954 = (uint8_t*) buffer++;
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].layout_component_id[0].value - 1;
                                                *_tmp_5954 = __aux64__;
                                                __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].layout_component_id[0].value;
                                            }
                                        }
                                        
                                        // Field:  type(Text_language) name(language) extGroup(0)
                                        // BitString
                                        // BIT_STRING  min(10) max(10) span(1)
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m005388\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].language.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].language.values.size());
                                        
                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].language.values.size() < 10) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].language.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].language.values.size()) << " is less than allowable (10); message dropped.";
                                            return -1;
                                        }
                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].language.values.size() > 10) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].language.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].language.values.size()) << " exceeds max allowable (10); message dropped.";
                                            return -1;
                                        }
                                        
                                        uint8_t* _tmp_5956 = (uint8_t*)buffer;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].language.values.size();
                                        if(__aux64__ > 10) __aux64__ = 10;
                                        *_tmp_5956 = __aux64__ - 10;
                                        buffer += 1;
                                        
                                        int __ifp = __aux64__;
                                        for(int p = 0; p < __ifp; p++) {
                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                            *__b__ = (ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].language.values[p]? 1: 0);
                                        }
                                        
                                        // Field:  type(Text_textContent) name(text_content) extGroup(0)
                                        // Text
                                        
                                        // Indefinite length
                                        // TEXT  min(0) max(16383) span(16384)
                                        uint16_t* _tmp_5957 = (uint16_t*)buffer;
                                        __aux64__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].text_content.value.size();
                                        
                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].text_content.value.size() < 0) {
                                            logger->warning() << "Error: Length of 'ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].text_content.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].text_content.value) << " is less than allowable (0); message dropped.";
                                            return -1;
                                        }
                                        if(ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].text_content.value.size() > 16383) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].text_content.value' " << (ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].text_content.value) << " exceeds max allowable (16383); message dropped.";
                                            return -1;
                                        }
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m005389\033[0m| ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].text_content.value.size(): " << 
                                                        static_cast<int>(ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].text_content.value.size());
                                        
                                        if(__aux64__ > 16383) __aux64__ = 16383;
                                        *_tmp_5957 = __aux64__;
                                        buffer += 2;
                                        
                                        int __ifq = __aux64__;
                                        for(int q = 0; q < __ifq; q++) {  // 16383
                                            char* __tmp__ = (char*)buffer++;
                                            *__tmp__ = ros->ivi.optional[0].elements[e].giv[0].elements[o].extra_text[0].elements[o].text_content.value.c_str()[q];
                                        }
                                        
                                }
                            }
                            
                            if(*_ext_flag_2465) {
                            }
                    }
                
                }
                else if(ros->ivi.optional[0].elements[e].rcc.size() != 0)  // CHOICE 2  fieldType(IviContainer) 
                {
                    *_choice_159 = 2;  // Setting choice selection
                
                    if(debug)
                        logger->debug() << "|\033[38;5;94m005390\033[0m| Choice selection: 2";
                
                    // SequenceOf
                    // Data Type UInt8
                    // SEQUENCE_OF  min(1) max(16) span(16) ext(true)
                    uint8_t* _ext_flag_2812 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].rcc[0].
                    *_ext_flag_2812 = 0; 
                    
                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements.size();
                    if(__aux64__ > 16) __aux64__ = 16;
                    uint16_t* _tmp_5959 = (uint16_t*)buffer;
                    buffer += 2;
                    *_tmp_5959 = __aux64__ - 1;
                    
                    int __ifr = __aux64__;
                    for(int r = 0; r < __ifr; r++) { 
                        
                            // RccPart  SEQUENCE
                                //  zoneIds           RccPart_zoneIds               
                                //  roadType          RoadType                      
                                //  laneConfiguration RccPart_laneConfiguration     
                                //  ...
                            uint8_t* _ext_flag_2813 = (uint8_t*) buffer++;  // Write extension flag for RccPart
                            *_ext_flag_2813 = 0;  
                            
                            // Optional fields bytemap
                            
                            // Field:  type(RccPart_zoneIds) name(zone_ids) extGroup(0)
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                            uint8_t* _ext_flag_2814 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].zone_ids.
                            *_ext_flag_2814 = 0; 
                            
                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].zone_ids.elements.size();
                            if(__aux64__ > 8) __aux64__ = 8;
                            uint16_t* _tmp_5960 = (uint16_t*)buffer;
                            buffer += 2;
                            *_tmp_5960 = __aux64__ - 1;
                            
                            int __ifs = __aux64__;
                            for(int s = 0; s < __ifs; s++) { 
                                
                                // Integer
                                
                                // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005393\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].zone_ids.elements[s].value) << 
                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].zone_ids.elements[s].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].zone_ids.elements[s].value);
                                }
                                
                                uint8_t* _ext_flag_2815 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].zone_ids.elements[s].
                                *_ext_flag_2815 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].zone_ids.elements[s].value >= 1 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].zone_ids.elements[s].value <= 32) ? 0 : 1;
                                
                                if(*_ext_flag_2815) {
                                    uint8_t* _tmp_5962 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].zone_ids.elements[s].value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].zone_ids.elements[s].value <= INT32_MAX) {
                                        *_tmp_5962 = 0;
                                    
                                        uint32_t* _tmp_5961 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].zone_ids.elements[s].value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_5961 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_5962 = 1;
                                    
                                        uint64_t* _tmp_5961 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].zone_ids.elements[s].value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_5961 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_5961 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].zone_ids.elements[s].value - 1;
                                    *_tmp_5961 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].zone_ids.elements[s].value;
                                }
                            }
                            
                            // Field:  type(RoadType) name(road_type) extGroup(0)
                            // Enumerated
                            // INT32  min(0) max(3) span(4) dataType(Int32)
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m005394\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].road_type.value) << 
                                             " ivi.optional[0].elements[e].rcc[0].elements[r].road_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].road_type.value);
                            }
                            
                            uint8_t* _tmp_5963 = (uint8_t*)buffer;
                            buffer += 1;
                            *_tmp_5963 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].road_type.value; 
                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].road_type.value; 
                            // MIN validator
                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].road_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                return -1;
                            }
                            // MAX validator
                            if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].road_type.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                return -1;
                            }
                            
                            // Field:  type(RccPart_laneConfiguration) name(lane_configuration) extGroup(0)
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(16) span(16) ext(true)
                            uint8_t* _ext_flag_2817 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.
                            *_ext_flag_2817 = 0; 
                            
                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements.size();
                            if(__aux64__ > 16) __aux64__ = 16;
                            uint16_t* _tmp_5964 = (uint16_t*)buffer;
                            buffer += 2;
                            *_tmp_5964 = __aux64__ - 1;
                            
                            int __ift = __aux64__;
                            for(int t = 0; t < __ift; t++) { 
                                
                                    // LaneInformation  SEQUENCE
                                        //  laneNumber        LanePosition                       
                                        //  direction         Direction                          
                                        //  validity          DTM                              OPTIONAL  
                                        //  laneType          LaneType                           
                                        //  laneTypeQualifier CompleteVehicleCharacteristics   OPTIONAL  
                                        //  laneStatus        LaneStatus                         
                                        //  laneWidth         IVILaneWidth                     OPTIONAL  
                                        //  ...
                                    uint8_t* _ext_flag_2818 = (uint8_t*) buffer++;  // Write extension flag for LaneInformation
                                    *_ext_flag_2818 = 0;  
                                    
                                    // Optional fields bytemap
                                    char* _tmp_5965 = (char*) buffer++;
                                    *_tmp_5965 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity.size() != 0 ? 1 : 0);
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m005396\033[0m| Optional field validity = " << *_tmp_5965;
                                    char* _tmp_5966 = (char*) buffer++;
                                    *_tmp_5966 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier.size() != 0 ? 1 : 0);
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m005397\033[0m| Optional field lane_type_qualifier = " << *_tmp_5966;
                                    char* _tmp_5967 = (char*) buffer++;
                                    *_tmp_5967 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_width.size() != 0 ? 1 : 0);
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m005398\033[0m| Optional field lane_width = " << *_tmp_5967;
                                    
                                    // Field:  type(LanePosition) name(lane_number) extGroup(0)
                                    // Integer
                                    
                                    // INT8  min(-1) max(14) span(16) dataType(Int8)
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005399\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_number.value) << 
                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_number.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_number.value);
                                    }
                                    
                                    uint8_t* _tmp_5968 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_number.value - -1;
                                    *_tmp_5968 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_number.value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_number.value' (" << __aux64__ << ") less than (-1); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_number.value' (" << __aux64__ << ") exceeds max allowable (14); message dropped.";
                                        return -1;
                                    }
                                    
                                    // Field:  type(Direction) name(direction) extGroup(0)
                                    // Integer
                                    
                                    // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005400\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].direction.value) << 
                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].direction.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].direction.value);
                                    }
                                    
                                    uint8_t* _tmp_5969 = (uint8_t*) buffer++;
                                    *_tmp_5969 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].direction.value; 
                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].direction.value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].direction.value' (" << __aux64__ << ") less than (0); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].direction.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                        return -1;
                                    }
                                    
                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity.size() != 0) {
                                        // Field:  type(DTM) name(validity) extGroup(0)
                                            // DTM  SEQUENCE
                                                //  year        DTM_year          OPTIONAL  
                                                //  month_day   DTM_month_day     OPTIONAL  
                                                //  pmd         PMD               OPTIONAL  
                                                //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                //  period      HoursMinutes      OPTIONAL  
                                            // Optional fields bytemap
                                            char* _tmp_5970 = (char*) buffer++;
                                            *_tmp_5970 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005401\033[0m| Optional field year = " << *_tmp_5970;
                                            char* _tmp_5971 = (char*) buffer++;
                                            *_tmp_5971 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005402\033[0m| Optional field month_day = " << *_tmp_5971;
                                            char* _tmp_5972 = (char*) buffer++;
                                            *_tmp_5972 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].pmd.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005403\033[0m| Optional field pmd = " << *_tmp_5972;
                                            char* _tmp_5973 = (char*) buffer++;
                                            *_tmp_5973 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005404\033[0m| Optional field hour_minutes = " << *_tmp_5973;
                                            char* _tmp_5974 = (char*) buffer++;
                                            *_tmp_5974 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].day_of_week.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005405\033[0m| Optional field day_of_week = " << *_tmp_5974;
                                            char* _tmp_5975 = (char*) buffer++;
                                            *_tmp_5975 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005406\033[0m| Optional field period = " << *_tmp_5975;
                                            
                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year.size() != 0) {
                                                // Field:  type(DTM_year) name(year) extGroup(0)
                                                    // DTM_year  SEQUENCE
                                                        //  syr        DTM_year_syr     
                                                        //  eyr        DTM_year_eyr     
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(DTM_year_syr) name(syr) extGroup(0)
                                                    // Integer
                                                    
                                                    // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005407\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].syr.value) << 
                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].syr.value);
                                                    }
                                                    
                                                    uint8_t* _ext_flag_2821 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].syr.
                                                    *_ext_flag_2821 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].syr.value >= 2000 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].syr.value <= 2127) ? 0 : 1;
                                                    
                                                    if(*_ext_flag_2821) {
                                                        uint8_t* _tmp_5977 = (uint8_t*) buffer++; 
                                                        if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].syr.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].syr.value <= INT32_MAX) {
                                                            *_tmp_5977 = 0;
                                                        
                                                            uint32_t* _tmp_5976 = (uint32_t*)buffer; buffer += 4;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].syr.value;
                                                            __aux64__ -= INT32_MIN;
                                                            *_tmp_5976 = __aux64__;
                                                        } 
                                                        else
                                                        {
                                                            *_tmp_5977 = 1;
                                                        
                                                            uint64_t* _tmp_5976 = (uint64_t*)buffer; buffer += 8;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].syr.value;
                                                            __aux64__ -= INT64_MIN;
                                                            *_tmp_5976 = __aux64__;
                                                        }
                                                    } else {
                                                        uint8_t* _tmp_5976 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].syr.value - 2000;
                                                        *_tmp_5976 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].syr.value;
                                                    }
                                                    
                                                    // Field:  type(DTM_year_eyr) name(eyr) extGroup(0)
                                                    // Integer
                                                    
                                                    // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005408\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].eyr.value) << 
                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].eyr.value);
                                                    }
                                                    
                                                    uint8_t* _ext_flag_2822 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].eyr.
                                                    *_ext_flag_2822 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].eyr.value >= 2000 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].eyr.value <= 2127) ? 0 : 1;
                                                    
                                                    if(*_ext_flag_2822) {
                                                        uint8_t* _tmp_5979 = (uint8_t*) buffer++; 
                                                        if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].eyr.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].eyr.value <= INT32_MAX) {
                                                            *_tmp_5979 = 0;
                                                        
                                                            uint32_t* _tmp_5978 = (uint32_t*)buffer; buffer += 4;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].eyr.value;
                                                            __aux64__ -= INT32_MIN;
                                                            *_tmp_5978 = __aux64__;
                                                        } 
                                                        else
                                                        {
                                                            *_tmp_5979 = 1;
                                                        
                                                            uint64_t* _tmp_5978 = (uint64_t*)buffer; buffer += 8;
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].eyr.value;
                                                            __aux64__ -= INT64_MIN;
                                                            *_tmp_5978 = __aux64__;
                                                        }
                                                    } else {
                                                        uint8_t* _tmp_5978 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].eyr.value - 2000;
                                                        *_tmp_5978 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].year[0].eyr.value;
                                                    }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day.size() != 0) {
                                                // Field:  type(DTM_month_day) name(month_day) extGroup(0)
                                                    // DTM_month_day  SEQUENCE
                                                        //  smd        MonthDay       
                                                        //  emd        MonthDay       
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(MonthDay) name(smd) extGroup(0)
                                                        // MonthDay  SEQUENCE
                                                            //  month      MonthDay_month     
                                                            //  day        MonthDay_day       
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005409\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].smd.month.value) << 
                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].smd.month.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5980 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].smd.month.value - 1;
                                                        *_tmp_5980 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].smd.month.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].smd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].smd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005410\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].smd.day.value) << 
                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].smd.day.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5981 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].smd.day.value - 1;
                                                        *_tmp_5981 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].smd.day.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].smd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].smd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    // Field:  type(MonthDay) name(emd) extGroup(0)
                                                        // MonthDay  SEQUENCE
                                                            //  month      MonthDay_month     
                                                            //  day        MonthDay_day       
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005411\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].emd.month.value) << 
                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].emd.month.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5982 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].emd.month.value - 1;
                                                        *_tmp_5982 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].emd.month.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].emd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].emd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005412\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].emd.day.value) << 
                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].emd.day.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5983 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].emd.day.value - 1;
                                                        *_tmp_5983 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].emd.day.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].emd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].month_day[0].emd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                            return -1;
                                                        }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].pmd.size() != 0) {
                                                // Field:  type(PMD) name(pmd) extGroup(0)
                                                // BitString
                                                // BIT_STRING  min(4) max(4) span(1)
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m005413\033[0m| ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].pmd[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].pmd[0].values.size());
                                                
                                                if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].pmd[0].values.size() < 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].pmd[0].value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].pmd[0].values.size()) << " is less than allowable (4); message dropped.";
                                                    return -1;
                                                }
                                                if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].pmd[0].values.size() > 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].pmd[0].value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].pmd[0].values.size()) << " exceeds max allowable (4); message dropped.";
                                                    return -1;
                                                }
                                                
                                                uint8_t* _tmp_5984 = (uint8_t*)buffer;
                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].pmd[0].values.size();
                                                if(__aux64__ > 4) __aux64__ = 4;
                                                *_tmp_5984 = __aux64__ - 4;
                                                buffer += 1;
                                                
                                                int __ifu = __aux64__;
                                                for(int u = 0; u < __ifu; u++) {
                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                    *__b__ = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].pmd[0].values[u]? 1: 0);
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes.size() != 0) {
                                                // Field:  type(DTM_hourMinutes) name(hour_minutes) extGroup(0)
                                                    // DTM_hourMinutes  SEQUENCE
                                                        //  shm        HoursMinutes     
                                                        //  ehm        HoursMinutes     
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(HoursMinutes) name(shm) extGroup(0)
                                                        // HoursMinutes  SEQUENCE
                                                            //  hours      HoursMinutes_hours     
                                                            //  mins       HoursMinutes_mins      
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005414\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].shm.hours.value) << 
                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].shm.hours.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5985 = (uint8_t*) buffer++;
                                                        *_tmp_5985 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].shm.hours.value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].shm.hours.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005415\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].shm.mins.value) << 
                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].shm.mins.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5986 = (uint8_t*) buffer++;
                                                        *_tmp_5986 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].shm.mins.value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].shm.mins.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    // Field:  type(HoursMinutes) name(ehm) extGroup(0)
                                                        // HoursMinutes  SEQUENCE
                                                            //  hours      HoursMinutes_hours     
                                                            //  mins       HoursMinutes_mins      
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005416\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].ehm.hours.value) << 
                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].ehm.hours.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5987 = (uint8_t*) buffer++;
                                                        *_tmp_5987 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].ehm.hours.value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].ehm.hours.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005417\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].ehm.mins.value) << 
                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].ehm.mins.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_5988 = (uint8_t*) buffer++;
                                                        *_tmp_5988 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].ehm.mins.value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].ehm.mins.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                            return -1;
                                                        }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].day_of_week.size() != 0) {
                                                // Field:  type(DayOfWeek) name(day_of_week) extGroup(0)
                                                // BitString
                                                // BIT_STRING  min(8) max(8) span(1)
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m005418\033[0m| ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].day_of_week[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].day_of_week[0].values.size());
                                                
                                                if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].day_of_week[0].values.size() < 8) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].day_of_week[0].value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].day_of_week[0].values.size()) << " is less than allowable (8); message dropped.";
                                                    return -1;
                                                }
                                                if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].day_of_week[0].values.size() > 8) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].day_of_week[0].value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].day_of_week[0].values.size()) << " exceeds max allowable (8); message dropped.";
                                                    return -1;
                                                }
                                                
                                                uint8_t* _tmp_5989 = (uint8_t*)buffer;
                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].day_of_week[0].values.size();
                                                if(__aux64__ > 8) __aux64__ = 8;
                                                *_tmp_5989 = __aux64__ - 8;
                                                buffer += 1;
                                                
                                                int __ifv = __aux64__;
                                                for(int v = 0; v < __ifv; v++) {
                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                    *__b__ = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].day_of_week[0].values[v]? 1: 0);
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period.size() != 0) {
                                                // Field:  type(HoursMinutes) name(period) extGroup(0)
                                                    // HoursMinutes  SEQUENCE
                                                        //  hours      HoursMinutes_hours     
                                                        //  mins       HoursMinutes_mins      
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                    // Integer
                                                    
                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005419\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period[0].hours.value) << 
                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period[0].hours.value);
                                                    }
                                                    
                                                    uint8_t* _tmp_5990 = (uint8_t*) buffer++;
                                                    *_tmp_5990 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period[0].hours.value; 
                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period[0].hours.value;
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period[0].hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period[0].hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                    // Integer
                                                    
                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005420\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period[0].mins.value) << 
                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period[0].mins.value);
                                                    }
                                                    
                                                    uint8_t* _tmp_5991 = (uint8_t*) buffer++;
                                                    *_tmp_5991 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period[0].mins.value; 
                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period[0].mins.value;
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period[0].mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].validity[0].period[0].mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                        return -1;
                                                    }
                                            }
                                    }
                                    
                                    // Field:  type(LaneType) name(lane_type) extGroup(0)
                                    // Integer
                                    
                                    // UINT8  min(0) max(31) span(32) dataType(UInt8)
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005421\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type.value) << 
                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type.value);
                                    }
                                    
                                    uint8_t* _tmp_5992 = (uint8_t*) buffer++;
                                    *_tmp_5992 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type.value; 
                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type.value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                        return -1;
                                    }
                                    
                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier.size() != 0) {
                                        // Field:  type(CompleteVehicleCharacteristics) name(lane_type_qualifier) extGroup(0)
                                            // CompleteVehicleCharacteristics  SEQUENCE
                                                //  tractor    TractorCharacteristics                   OPTIONAL  
                                                //  trailer    CompleteVehicleCharacteristics_trailer   OPTIONAL  
                                                //  train      TrainCharacteristics                     OPTIONAL  
                                            // Optional fields bytemap
                                            char* _tmp_5993 = (char*) buffer++;
                                            *_tmp_5993 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005422\033[0m| Optional field tractor = " << *_tmp_5993;
                                            char* _tmp_5994 = (char*) buffer++;
                                            *_tmp_5994 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005423\033[0m| Optional field trailer = " << *_tmp_5994;
                                            char* _tmp_5995 = (char*) buffer++;
                                            *_tmp_5995 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005424\033[0m| Optional field train = " << *_tmp_5995;
                                            
                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor.size() != 0) {
                                                // Field:  type(TractorCharacteristics) name(tractor) extGroup(0)
                                                    // TractorCharacteristics  SEQUENCE
                                                        //  equalTo    TractorCharacteristics_equalTo      OPTIONAL  
                                                        //  notEqualTo TractorCharacteristics_notEqualTo   OPTIONAL  
                                                        //  ranges     TractorCharacteristics_ranges       OPTIONAL  
                                                    // Optional fields bytemap
                                                    char* _tmp_5996 = (char*) buffer++;
                                                    *_tmp_5996 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to.size() != 0 ? 1 : 0);
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m005425\033[0m| Optional field equal_to = " << *_tmp_5996;
                                                    char* _tmp_5997 = (char*) buffer++;
                                                    *_tmp_5997 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to.size() != 0 ? 1 : 0);
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m005426\033[0m| Optional field not_equal_to = " << *_tmp_5997;
                                                    char* _tmp_5998 = (char*) buffer++;
                                                    *_tmp_5998 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges.size() != 0 ? 1 : 0);
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m005427\033[0m| Optional field ranges = " << *_tmp_5998;
                                                    
                                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to.size() != 0) {
                                                        // Field:  type(TractorCharacteristics_equalTo) name(equal_to) extGroup(0)
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                        uint8_t* _ext_flag_2834 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].
                                                        *_ext_flag_2834 = 0; 
                                                        
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements.size();
                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                        uint16_t* _tmp_5999 = (uint16_t*)buffer;
                                                        buffer += 2;
                                                        *_tmp_5999 = __aux64__ - 1;
                                                        
                                                        int __ifw = __aux64__;
                                                        for(int w = 0; w < __ifw; w++) { 
                                                            
                                                            // Choice
                                                               // #0  simpleVehicleType   StationType
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                               // #2  iso3833VehicleType   Iso3833VehicleType
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                               // #4  engineCharacteristics   EngineCharacteristics
                                                               // #5  loadType   LoadType
                                                               // #6  usage   VehicleRole
                                                            uint8_t* _ext_flag_2835 = (uint8_t*) buffer; 
                                                            buffer++;
                                                            *_ext_flag_2835 = 0; 
                                                            
                                                            uint8_t* _choice_185 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                                *_choice_185 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005429\033[0m| Choice selection: 0";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005430\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6000 = (uint8_t*) buffer++;
                                                                *_tmp_6000 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].simple_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].simple_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_185 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005431\033[0m| Choice selection: 1";
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                                uint8_t* _choice_186 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                    *_choice_186 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005432\033[0m| Choice selection: 0";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005433\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6001 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6001 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_186 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005434\033[0m| Choice selection: 1";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005435\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6002 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6002 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_186 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005436\033[0m| Choice selection: 2";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005437\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6003 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6003 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_186 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005438\033[0m| Choice selection: 3";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005439\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6004 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6004 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_186) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_185 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005440\033[0m| Choice selection: 2";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005441\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6005 = (uint8_t*) buffer++;
                                                                *_tmp_6005 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].iso3833_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].iso3833_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_185 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005442\033[0m| Choice selection: 3";
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005443\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6006 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6006 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].euro_and_co2value[0].euro_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].euro_and_co2value[0].euro_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005444\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6007 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6007 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].euro_and_co2value[0].cop_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].euro_and_co2value[0].cop_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_185 = 4;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005445\033[0m| Choice selection: 4";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005446\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].engine_characteristics[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6008 = (uint8_t*) buffer++;
                                                                *_tmp_6008 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].engine_characteristics[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].engine_characteristics[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_185 = 5;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005447\033[0m| Choice selection: 5";
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005448\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_2846 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].goods_type.
                                                                    *_ext_flag_2846 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_2846) {
                                                                        uint8_t* _tmp_6010 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].goods_type.value <= INT32_MAX) {
                                                                            *_tmp_6010 = 0;
                                                                        
                                                                            uint32_t* _tmp_6009 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_6009 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_6010 = 1;
                                                                        
                                                                            uint64_t* _tmp_6009 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_6009 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_6009 = (uint8_t*) buffer++;
                                                                        *_tmp_6009 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].goods_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].goods_type.value;
                                                                    }
                                                                    
                                                                    // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005449\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6011 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6011 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].dangerous_goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].dangerous_goods_type.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005450\033[0m| ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].special_transport_type.values.size());
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].special_transport_type.values.size() < 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].special_transport_type.values.size() > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6012 = (uint8_t*)buffer;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].special_transport_type.values.size();
                                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                                    *_tmp_6012 = __aux64__ - 4;
                                                                    buffer += 1;
                                                                    
                                                                    int __ifx = __aux64__;
                                                                    for(int x = 0; x < __ifx; x++) {
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        *__b__ = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].load_type[0].special_transport_type.values[x]? 1: 0);
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_185 = 6;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005451\033[0m| Choice selection: 6";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005452\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].usage[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6013 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6013 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].usage[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].usage[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_185) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].equal_to[0].elements[w]'; message dropped.";
                                                                return -1;
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to.size() != 0) {
                                                        // Field:  type(TractorCharacteristics_notEqualTo) name(not_equal_to) extGroup(0)
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                        uint8_t* _ext_flag_2849 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].
                                                        *_ext_flag_2849 = 0; 
                                                        
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements.size();
                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                        uint16_t* _tmp_6014 = (uint16_t*)buffer;
                                                        buffer += 2;
                                                        *_tmp_6014 = __aux64__ - 1;
                                                        
                                                        int __ify = __aux64__;
                                                        for(int y = 0; y < __ify; y++) { 
                                                            
                                                            // Choice
                                                               // #0  simpleVehicleType   StationType
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                               // #2  iso3833VehicleType   Iso3833VehicleType
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                               // #4  engineCharacteristics   EngineCharacteristics
                                                               // #5  loadType   LoadType
                                                               // #6  usage   VehicleRole
                                                            uint8_t* _ext_flag_2850 = (uint8_t*) buffer; 
                                                            buffer++;
                                                            *_ext_flag_2850 = 0; 
                                                            
                                                            uint8_t* _choice_187 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                                *_choice_187 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005454\033[0m| Choice selection: 0";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005455\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6015 = (uint8_t*) buffer++;
                                                                *_tmp_6015 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].simple_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].simple_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_187 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005456\033[0m| Choice selection: 1";
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                                uint8_t* _choice_188 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                    *_choice_188 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005457\033[0m| Choice selection: 0";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005458\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6016 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6016 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_188 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005459\033[0m| Choice selection: 1";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005460\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6017 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6017 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_188 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005461\033[0m| Choice selection: 2";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005462\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6018 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6018 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_188 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005463\033[0m| Choice selection: 3";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005464\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6019 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6019 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_188) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_187 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005465\033[0m| Choice selection: 2";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005466\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6020 = (uint8_t*) buffer++;
                                                                *_tmp_6020 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].iso3833_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].iso3833_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_187 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005467\033[0m| Choice selection: 3";
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005468\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6021 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6021 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].euro_and_co2value[0].euro_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].euro_and_co2value[0].euro_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005469\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6022 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6022 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].euro_and_co2value[0].cop_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].euro_and_co2value[0].cop_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_187 = 4;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005470\033[0m| Choice selection: 4";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005471\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].engine_characteristics[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6023 = (uint8_t*) buffer++;
                                                                *_tmp_6023 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].engine_characteristics[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].engine_characteristics[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_187 = 5;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005472\033[0m| Choice selection: 5";
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005473\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_2861 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].goods_type.
                                                                    *_ext_flag_2861 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_2861) {
                                                                        uint8_t* _tmp_6025 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].goods_type.value <= INT32_MAX) {
                                                                            *_tmp_6025 = 0;
                                                                        
                                                                            uint32_t* _tmp_6024 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_6024 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_6025 = 1;
                                                                        
                                                                            uint64_t* _tmp_6024 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_6024 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_6024 = (uint8_t*) buffer++;
                                                                        *_tmp_6024 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].goods_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].goods_type.value;
                                                                    }
                                                                    
                                                                    // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005474\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6026 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6026 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].dangerous_goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].dangerous_goods_type.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005475\033[0m| ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].special_transport_type.values.size());
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].special_transport_type.values.size() < 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].special_transport_type.values.size() > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6027 = (uint8_t*)buffer;
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].special_transport_type.values.size();
                                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                                    *_tmp_6027 = __aux64__ - 4;
                                                                    buffer += 1;
                                                                    
                                                                    int __ifz = __aux64__;
                                                                    for(int z = 0; z < __ifz; z++) {
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        *__b__ = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].load_type[0].special_transport_type.values[z]? 1: 0);
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_187 = 6;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005476\033[0m| Choice selection: 6";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005477\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].usage[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6028 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6028 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].usage[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].usage[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_187) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[y]'; message dropped.";
                                                                return -1;
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges.size() != 0) {
                                                        // Field:  type(TractorCharacteristics_ranges) name(ranges) extGroup(0)
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                        uint8_t* _ext_flag_2864 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].
                                                        *_ext_flag_2864 = 0; 
                                                        
                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements.size();
                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                        uint16_t* _tmp_6029 = (uint16_t*)buffer;
                                                        buffer += 2;
                                                        *_tmp_6029 = __aux64__ - 1;
                                                        
                                                        int __ifa = __aux64__;
                                                        for(int a = 0; a < __ifa; a++) { 
                                                            
                                                                // VehicleCharacteristicsRanges  SEQUENCE
                                                                    //  comparisonOperator ComparisonOperator                      
                                                                    //  limits             VehicleCharacteristicsRanges_limits     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(ComparisonOperator) name(comparison_operator) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005479\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].comparison_operator.value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].comparison_operator.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6030 = (uint8_t*) buffer++;
                                                                *_tmp_6030 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].comparison_operator.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].comparison_operator.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].comparison_operator.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].comparison_operator.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(VehicleCharacteristicsRanges_limits) name(limits) extGroup(0)
                                                                // Choice
                                                                   // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles
                                                                   // #1  vehicleDimensions   VehicleDimensions
                                                                   // #2  vehicleWeightLimits   VehicleWeightLimits
                                                                   // #3  axleWeightLimits   AxleWeightLimits
                                                                   // #4  passengerCapacity   PassengerCapacity
                                                                   // #5  exhaustEmissionValues   ExhaustEmissionValues
                                                                   // #6  dieselEmissionValues   DieselEmissionValues
                                                                   // #7  soundLevel   SoundLevel
                                                                uint8_t* _ext_flag_2866 = (uint8_t*) buffer; 
                                                                buffer++;
                                                                *_ext_flag_2866 = 0; 
                                                                
                                                                uint8_t* _choice_189 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.number_of_axles.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    *_choice_189 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005480\033[0m| Choice selection: 0";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005481\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.number_of_axles[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.number_of_axles[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6031 = (uint8_t*) buffer++;
                                                                    *_tmp_6031 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.number_of_axles[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.number_of_axles[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.number_of_axles[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.number_of_axles[0].value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_189 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005482\033[0m| Choice selection: 1";
                                                                
                                                                        // VehicleDimensions  SEQUENCE
                                                                            //  vehicleLengthOverall Int1           
                                                                            //  vehicleHeigthOverall Int1           
                                                                            //  vehicleWidthOverall  Int1           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int1) name(vehicle_length_overall) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005483\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6032 = (uint8_t*) buffer++;
                                                                        *_tmp_6032 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_length_overall.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_length_overall.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(vehicle_heigth_overall) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005484\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6033 = (uint8_t*) buffer++;
                                                                        *_tmp_6033 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_heigth_overall.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_heigth_overall.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(vehicle_width_overall) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005485\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6034 = (uint8_t*) buffer++;
                                                                        *_tmp_6034 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_width_overall.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_width_overall.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_189 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005486\033[0m| Choice selection: 2";
                                                                
                                                                        // VehicleWeightLimits  SEQUENCE
                                                                            //  vehicleMaxLadenWeight     Int2           
                                                                            //  vehicleTrainMaximumWeight Int2           
                                                                            //  vehicleWeightUnladen      Int2           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int2) name(vehicle_max_laden_weight) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005487\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_6035 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_6035 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(vehicle_train_maximum_weight) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005488\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_6036 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_6036 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(vehicle_weight_unladen) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005489\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_6037 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_6037 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_189 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005490\033[0m| Choice selection: 3";
                                                                
                                                                        // AxleWeightLimits  SEQUENCE
                                                                            //  maxLadenweightOnAxle1 Int2           
                                                                            //  maxLadenweightOnAxle2 Int2           
                                                                            //  maxLadenweightOnAxle3 Int2           
                                                                            //  maxLadenweightOnAxle4 Int2           
                                                                            //  maxLadenweightOnAxle5 Int2           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle1) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005491\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_6038 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_6038 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle2) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005492\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_6039 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_6039 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle3) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005493\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_6040 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_6040 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle4) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005494\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_6041 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_6041 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle5) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005495\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_6042 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_6042 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.passenger_capacity.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_189 = 4;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005496\033[0m| Choice selection: 4";
                                                                
                                                                        // PassengerCapacity  SEQUENCE
                                                                            //  numberOfSeats          Int1           
                                                                            //  numberOfStandingPlaces Int1           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int1) name(number_of_seats) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005497\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.passenger_capacity[0].number_of_seats.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6043 = (uint8_t*) buffer++;
                                                                        *_tmp_6043 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.passenger_capacity[0].number_of_seats.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.passenger_capacity[0].number_of_seats.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(number_of_standing_places) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005498\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6044 = (uint8_t*) buffer++;
                                                                        *_tmp_6044 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.passenger_capacity[0].number_of_standing_places.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.passenger_capacity[0].number_of_standing_places.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_189 = 5;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005499\033[0m| Choice selection: 5";
                                                                
                                                                        // ExhaustEmissionValues  SEQUENCE
                                                                            //  unitType      UnitType                             
                                                                            //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                            //  emissionHC    Int2                                 
                                                                            //  emissionNOX   Int2                                 
                                                                            //  emissionHCNOX Int2                                 
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005500\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].unit_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6045 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6045 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].unit_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].unit_type.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(ExhaustEmissionValues_emissionCO) name(emission_co) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005501\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_co.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_6046 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_6046 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_co.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_co.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(emission_hc) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005502\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hc.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_6047 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_6047 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hc.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hc.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(emission_nox) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005503\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_nox.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_6048 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_6048 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_nox.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_nox.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(emission_hcnox) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005504\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_6049 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_6049 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hcnox.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_189 = 6;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005505\033[0m| Choice selection: 6";
                                                                
                                                                        // DieselEmissionValues  SEQUENCE
                                                                            //  particulate     DieselEmissionValues_particulate     
                                                                            //  absorptionCoeff Int2                                 
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(DieselEmissionValues_particulate) name(particulate) extGroup(0)
                                                                            // DieselEmissionValues_particulate  SEQUENCE
                                                                                //  unitType   UnitType                                   
                                                                                //  value      DieselEmissionValues_particulate_value     
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                            // Enumerated
                                                                            // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005506\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_6050 = (uint8_t*)buffer;
                                                                            buffer += 1;
                                                                            *_tmp_6050 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(DieselEmissionValues_particulate_value) name(value) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005507\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.value.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_6051 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_6051 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.value.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.value.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                                return -1;
                                                                            }
                                                                        
                                                                        // Field:  type(Int2) name(absorption_coeff) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005508\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_6052 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_6052 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].absorption_coeff.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.sound_level.size() != 0)  // CHOICE 7  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_189 = 7;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005509\033[0m| Choice selection: 7";
                                                                
                                                                        // SoundLevel  SEQUENCE
                                                                            //  soundstationary Int1           
                                                                            //  sounddriveby    Int1           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int1) name(soundstationary) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005510\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.sound_level[0].soundstationary.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.sound_level[0].soundstationary.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6053 = (uint8_t*) buffer++;
                                                                        *_tmp_6053 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.sound_level[0].soundstationary.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.sound_level[0].soundstationary.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(sounddriveby) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005511\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.sound_level[0].sounddriveby.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.sound_level[0].sounddriveby.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6054 = (uint8_t*) buffer++;
                                                                        *_tmp_6054 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.sound_level[0].sounddriveby.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.sound_level[0].sounddriveby.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_189) << ") selected in CHOICE VehicleCharacteristicsRanges_limits in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].tractor[0].ranges[0].elements[a].limits'; message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                        }
                                                    }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer.size() != 0) {
                                                // Field:  type(CompleteVehicleCharacteristics_trailer) name(trailer) extGroup(0)
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(3) span(3) ext(false)
                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements.size();
                                                if(__aux64__ > 3) __aux64__ = 3;
                                                uint16_t* _tmp_6055 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_6055 = __aux64__ - 1;
                                                
                                                int __ifb = __aux64__;
                                                for(int b = 0; b < __ifb; b++) { 
                                                    
                                                        // TrailerCharacteristics  SEQUENCE
                                                            //  equalTo    TrailerCharacteristics_equalTo      OPTIONAL  
                                                            //  notEqualTo TrailerCharacteristics_notEqualTo   OPTIONAL  
                                                            //  ranges     TrailerCharacteristics_ranges       OPTIONAL  
                                                        // Optional fields bytemap
                                                        char* _tmp_6056 = (char*) buffer++;
                                                        *_tmp_6056 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005513\033[0m| Optional field equal_to = " << *_tmp_6056;
                                                        char* _tmp_6057 = (char*) buffer++;
                                                        *_tmp_6057 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005514\033[0m| Optional field not_equal_to = " << *_tmp_6057;
                                                        char* _tmp_6058 = (char*) buffer++;
                                                        *_tmp_6058 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005515\033[0m| Optional field ranges = " << *_tmp_6058;
                                                        
                                                        if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to.size() != 0) {
                                                            // Field:  type(TrailerCharacteristics_equalTo) name(equal_to) extGroup(0)
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                            uint8_t* _ext_flag_2891 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].
                                                            *_ext_flag_2891 = 0; 
                                                            
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            uint16_t* _tmp_6059 = (uint16_t*)buffer;
                                                            buffer += 2;
                                                            *_tmp_6059 = __aux64__ - 1;
                                                            
                                                            int __ifc = __aux64__;
                                                            for(int c = 0; c < __ifc; c++) { 
                                                                
                                                                // Choice
                                                                   // #0  simpleVehicleType   StationType
                                                                   // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                                   // #2  iso3833VehicleType   Iso3833VehicleType
                                                                   // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                                   // #4  engineCharacteristics   EngineCharacteristics
                                                                   // #5  loadType   LoadType
                                                                   // #6  usage   VehicleRole
                                                                uint8_t* _ext_flag_2892 = (uint8_t*) buffer; 
                                                                buffer++;
                                                                *_ext_flag_2892 = 0; 
                                                                
                                                                uint8_t* _choice_190 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                                    *_choice_190 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005517\033[0m| Choice selection: 0";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005518\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].simple_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].simple_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6060 = (uint8_t*) buffer++;
                                                                    *_tmp_6060 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].simple_vehicle_type[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].simple_vehicle_type[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_190 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005519\033[0m| Choice selection: 1";
                                                                
                                                                    // Choice
                                                                       // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                                       // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                                       // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                                       // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                                    uint8_t* _choice_191 = (uint8_t*) buffer;
                                                                    buffer++;
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                        *_choice_191 = 0;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005520\033[0m| Choice selection: 0";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005521\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6061 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6061 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                                    {
                                                                        *_choice_191 = 1;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005522\033[0m| Choice selection: 1";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005523\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6062 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6062 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                                    {
                                                                        *_choice_191 = 2;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005524\033[0m| Choice selection: 2";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005525\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6063 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6063 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                                    {
                                                                        *_choice_191 = 3;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005526\033[0m| Choice selection: 3";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005527\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6064 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6064 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else
                                                                    {
                                                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_191) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].eu_vehicle_category_code[0]'; message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_190 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005528\033[0m| Choice selection: 2";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005529\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].iso3833_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].iso3833_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6065 = (uint8_t*) buffer++;
                                                                    *_tmp_6065 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].iso3833_vehicle_type[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].iso3833_vehicle_type[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_190 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005530\033[0m| Choice selection: 3";
                                                                
                                                                        // EnvironmentalCharacteristics  SEQUENCE
                                                                            //  euroValue  EuroValue      
                                                                            //  copValue   CopValue       
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005531\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].euro_and_co2value[0].euro_value.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].euro_and_co2value[0].euro_value.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6066 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6066 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].euro_and_co2value[0].euro_value.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].euro_and_co2value[0].euro_value.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005532\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].euro_and_co2value[0].cop_value.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].euro_and_co2value[0].cop_value.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6067 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6067 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].euro_and_co2value[0].cop_value.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].euro_and_co2value[0].cop_value.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_190 = 4;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005533\033[0m| Choice selection: 4";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005534\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].engine_characteristics[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].engine_characteristics[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6068 = (uint8_t*) buffer++;
                                                                    *_tmp_6068 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].engine_characteristics[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].engine_characteristics[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_190 = 5;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005535\033[0m| Choice selection: 5";
                                                                
                                                                        // LoadType  SEQUENCE
                                                                            //  goodsType            GoodsType                
                                                                            //  dangerousGoodsType   DangerousGoodsBasic      
                                                                            //  specialTransportType SpecialTransportType     
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005536\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].goods_type.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].goods_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _ext_flag_2903 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].goods_type.
                                                                        *_ext_flag_2903 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                        
                                                                        if(*_ext_flag_2903) {
                                                                            uint8_t* _tmp_6070 = (uint8_t*) buffer++; 
                                                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].goods_type.value <= INT32_MAX) {
                                                                                *_tmp_6070 = 0;
                                                                            
                                                                                uint32_t* _tmp_6069 = (uint32_t*)buffer; buffer += 4;
                                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].goods_type.value;
                                                                                __aux64__ -= INT32_MIN;
                                                                                *_tmp_6069 = __aux64__;
                                                                            } 
                                                                            else
                                                                            {
                                                                                *_tmp_6070 = 1;
                                                                            
                                                                                uint64_t* _tmp_6069 = (uint64_t*)buffer; buffer += 8;
                                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].goods_type.value;
                                                                                __aux64__ -= INT64_MIN;
                                                                                *_tmp_6069 = __aux64__;
                                                                            }
                                                                        } else {
                                                                            uint8_t* _tmp_6069 = (uint8_t*) buffer++;
                                                                            *_tmp_6069 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].goods_type.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].goods_type.value;
                                                                        }
                                                                        
                                                                        // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005537\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].dangerous_goods_type.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].dangerous_goods_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6071 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6071 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].dangerous_goods_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].dangerous_goods_type.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                        // BitString
                                                                        // BIT_STRING  min(4) max(4) span(1)
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005538\033[0m| ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].special_transport_type.values.size());
                                                                        
                                                                        if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].special_transport_type.values.size() < 4) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].special_transport_type.values.size() > 4) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6072 = (uint8_t*)buffer;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].special_transport_type.values.size();
                                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                                        *_tmp_6072 = __aux64__ - 4;
                                                                        buffer += 1;
                                                                        
                                                                        int __ifd = __aux64__;
                                                                        for(int d = 0; d < __ifd; d++) {
                                                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                                                            *__b__ = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].load_type[0].special_transport_type.values[d]? 1: 0);
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_190 = 6;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005539\033[0m| Choice selection: 6";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005540\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].usage[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].usage[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6073 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6073 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].usage[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].usage[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_190) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].equal_to[0].elements[c]'; message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to.size() != 0) {
                                                            // Field:  type(TrailerCharacteristics_notEqualTo) name(not_equal_to) extGroup(0)
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                            uint8_t* _ext_flag_2906 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].
                                                            *_ext_flag_2906 = 0; 
                                                            
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            uint16_t* _tmp_6074 = (uint16_t*)buffer;
                                                            buffer += 2;
                                                            *_tmp_6074 = __aux64__ - 1;
                                                            
                                                            int __ife = __aux64__;
                                                            for(int e = 0; e < __ife; e++) { 
                                                                
                                                                // Choice
                                                                   // #0  simpleVehicleType   StationType
                                                                   // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                                   // #2  iso3833VehicleType   Iso3833VehicleType
                                                                   // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                                   // #4  engineCharacteristics   EngineCharacteristics
                                                                   // #5  loadType   LoadType
                                                                   // #6  usage   VehicleRole
                                                                uint8_t* _ext_flag_2907 = (uint8_t*) buffer; 
                                                                buffer++;
                                                                *_ext_flag_2907 = 0; 
                                                                
                                                                uint8_t* _choice_192 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                                    *_choice_192 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005542\033[0m| Choice selection: 0";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005543\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].simple_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].simple_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6075 = (uint8_t*) buffer++;
                                                                    *_tmp_6075 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].simple_vehicle_type[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].simple_vehicle_type[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_192 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005544\033[0m| Choice selection: 1";
                                                                
                                                                    // Choice
                                                                       // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                                       // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                                       // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                                       // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                                    uint8_t* _choice_193 = (uint8_t*) buffer;
                                                                    buffer++;
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                        *_choice_193 = 0;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005545\033[0m| Choice selection: 0";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005546\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6076 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6076 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                                    {
                                                                        *_choice_193 = 1;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005547\033[0m| Choice selection: 1";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005548\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6077 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6077 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                                    {
                                                                        *_choice_193 = 2;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005549\033[0m| Choice selection: 2";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005550\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6078 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6078 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                                    {
                                                                        *_choice_193 = 3;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005551\033[0m| Choice selection: 3";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005552\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6079 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6079 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else
                                                                    {
                                                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_193) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].eu_vehicle_category_code[0]'; message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_192 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005553\033[0m| Choice selection: 2";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005554\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].iso3833_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].iso3833_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6080 = (uint8_t*) buffer++;
                                                                    *_tmp_6080 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].iso3833_vehicle_type[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].iso3833_vehicle_type[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_192 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005555\033[0m| Choice selection: 3";
                                                                
                                                                        // EnvironmentalCharacteristics  SEQUENCE
                                                                            //  euroValue  EuroValue      
                                                                            //  copValue   CopValue       
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005556\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].euro_and_co2value[0].euro_value.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].euro_and_co2value[0].euro_value.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6081 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6081 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].euro_and_co2value[0].euro_value.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].euro_and_co2value[0].euro_value.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005557\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].euro_and_co2value[0].cop_value.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].euro_and_co2value[0].cop_value.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6082 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6082 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].euro_and_co2value[0].cop_value.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].euro_and_co2value[0].cop_value.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_192 = 4;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005558\033[0m| Choice selection: 4";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005559\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].engine_characteristics[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].engine_characteristics[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6083 = (uint8_t*) buffer++;
                                                                    *_tmp_6083 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].engine_characteristics[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].engine_characteristics[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_192 = 5;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005560\033[0m| Choice selection: 5";
                                                                
                                                                        // LoadType  SEQUENCE
                                                                            //  goodsType            GoodsType                
                                                                            //  dangerousGoodsType   DangerousGoodsBasic      
                                                                            //  specialTransportType SpecialTransportType     
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005561\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].goods_type.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].goods_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _ext_flag_2918 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].goods_type.
                                                                        *_ext_flag_2918 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                        
                                                                        if(*_ext_flag_2918) {
                                                                            uint8_t* _tmp_6085 = (uint8_t*) buffer++; 
                                                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].goods_type.value <= INT32_MAX) {
                                                                                *_tmp_6085 = 0;
                                                                            
                                                                                uint32_t* _tmp_6084 = (uint32_t*)buffer; buffer += 4;
                                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].goods_type.value;
                                                                                __aux64__ -= INT32_MIN;
                                                                                *_tmp_6084 = __aux64__;
                                                                            } 
                                                                            else
                                                                            {
                                                                                *_tmp_6085 = 1;
                                                                            
                                                                                uint64_t* _tmp_6084 = (uint64_t*)buffer; buffer += 8;
                                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].goods_type.value;
                                                                                __aux64__ -= INT64_MIN;
                                                                                *_tmp_6084 = __aux64__;
                                                                            }
                                                                        } else {
                                                                            uint8_t* _tmp_6084 = (uint8_t*) buffer++;
                                                                            *_tmp_6084 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].goods_type.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].goods_type.value;
                                                                        }
                                                                        
                                                                        // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005562\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].dangerous_goods_type.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].dangerous_goods_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6086 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6086 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].dangerous_goods_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].dangerous_goods_type.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                        // BitString
                                                                        // BIT_STRING  min(4) max(4) span(1)
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005563\033[0m| ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].special_transport_type.values.size());
                                                                        
                                                                        if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].special_transport_type.values.size() < 4) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].special_transport_type.values.size() > 4) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6087 = (uint8_t*)buffer;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].special_transport_type.values.size();
                                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                                        *_tmp_6087 = __aux64__ - 4;
                                                                        buffer += 1;
                                                                        
                                                                        int __iff = __aux64__;
                                                                        for(int f = 0; f < __iff; f++) {
                                                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                                                            *__b__ = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].load_type[0].special_transport_type.values[f]? 1: 0);
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_192 = 6;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005564\033[0m| Choice selection: 6";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005565\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].usage[0].value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].usage[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6088 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6088 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].usage[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].usage[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_192) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].not_equal_to[0].elements[e]'; message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges.size() != 0) {
                                                            // Field:  type(TrailerCharacteristics_ranges) name(ranges) extGroup(0)
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                            uint8_t* _ext_flag_2921 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].
                                                            *_ext_flag_2921 = 0; 
                                                            
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            uint16_t* _tmp_6089 = (uint16_t*)buffer;
                                                            buffer += 2;
                                                            *_tmp_6089 = __aux64__ - 1;
                                                            
                                                            int __ifg = __aux64__;
                                                            for(int g = 0; g < __ifg; g++) { 
                                                                
                                                                    // VehicleCharacteristicsRanges  SEQUENCE
                                                                        //  comparisonOperator ComparisonOperator                      
                                                                        //  limits             VehicleCharacteristicsRanges_limits     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(ComparisonOperator) name(comparison_operator) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005567\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].comparison_operator.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].comparison_operator.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6090 = (uint8_t*) buffer++;
                                                                    *_tmp_6090 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].comparison_operator.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].comparison_operator.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].comparison_operator.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].comparison_operator.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(VehicleCharacteristicsRanges_limits) name(limits) extGroup(0)
                                                                    // Choice
                                                                       // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles
                                                                       // #1  vehicleDimensions   VehicleDimensions
                                                                       // #2  vehicleWeightLimits   VehicleWeightLimits
                                                                       // #3  axleWeightLimits   AxleWeightLimits
                                                                       // #4  passengerCapacity   PassengerCapacity
                                                                       // #5  exhaustEmissionValues   ExhaustEmissionValues
                                                                       // #6  dieselEmissionValues   DieselEmissionValues
                                                                       // #7  soundLevel   SoundLevel
                                                                    uint8_t* _ext_flag_2923 = (uint8_t*) buffer; 
                                                                    buffer++;
                                                                    *_ext_flag_2923 = 0; 
                                                                    
                                                                    uint8_t* _choice_194 = (uint8_t*) buffer;
                                                                    buffer++;
                                                                    
                                                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.number_of_axles.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                        *_choice_194 = 0;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005568\033[0m| Choice selection: 0";
                                                                    
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005569\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.number_of_axles[0].value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.number_of_axles[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6091 = (uint8_t*) buffer++;
                                                                        *_tmp_6091 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.number_of_axles[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.number_of_axles[0].value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.number_of_axles[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.number_of_axles[0].value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    {
                                                                        *_choice_194 = 1;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005570\033[0m| Choice selection: 1";
                                                                    
                                                                            // VehicleDimensions  SEQUENCE
                                                                                //  vehicleLengthOverall Int1           
                                                                                //  vehicleHeigthOverall Int1           
                                                                                //  vehicleWidthOverall  Int1           
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(Int1) name(vehicle_length_overall) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005571\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_6092 = (uint8_t*) buffer++;
                                                                            *_tmp_6092 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_length_overall.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_length_overall.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int1) name(vehicle_heigth_overall) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005572\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_6093 = (uint8_t*) buffer++;
                                                                            *_tmp_6093 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_heigth_overall.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_heigth_overall.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int1) name(vehicle_width_overall) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005573\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_6094 = (uint8_t*) buffer++;
                                                                            *_tmp_6094 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_width_overall.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_width_overall.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    {
                                                                        *_choice_194 = 2;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005574\033[0m| Choice selection: 2";
                                                                    
                                                                            // VehicleWeightLimits  SEQUENCE
                                                                                //  vehicleMaxLadenWeight     Int2           
                                                                                //  vehicleTrainMaximumWeight Int2           
                                                                                //  vehicleWeightUnladen      Int2           
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(Int2) name(vehicle_max_laden_weight) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005575\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_6095 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_6095 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(vehicle_train_maximum_weight) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005576\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_6096 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_6096 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(vehicle_weight_unladen) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005577\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_6097 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_6097 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    {
                                                                        *_choice_194 = 3;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005578\033[0m| Choice selection: 3";
                                                                    
                                                                            // AxleWeightLimits  SEQUENCE
                                                                                //  maxLadenweightOnAxle1 Int2           
                                                                                //  maxLadenweightOnAxle2 Int2           
                                                                                //  maxLadenweightOnAxle3 Int2           
                                                                                //  maxLadenweightOnAxle4 Int2           
                                                                                //  maxLadenweightOnAxle5 Int2           
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(Int2) name(max_ladenweight_on_axle1) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005579\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_6098 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_6098 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(max_ladenweight_on_axle2) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005580\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_6099 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_6099 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(max_ladenweight_on_axle3) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005581\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_6100 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_6100 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(max_ladenweight_on_axle4) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005582\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_6101 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_6101 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(max_ladenweight_on_axle5) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005583\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_6102 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_6102 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.passenger_capacity.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    {
                                                                        *_choice_194 = 4;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005584\033[0m| Choice selection: 4";
                                                                    
                                                                            // PassengerCapacity  SEQUENCE
                                                                                //  numberOfSeats          Int1           
                                                                                //  numberOfStandingPlaces Int1           
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(Int1) name(number_of_seats) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005585\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.passenger_capacity[0].number_of_seats.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_6103 = (uint8_t*) buffer++;
                                                                            *_tmp_6103 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.passenger_capacity[0].number_of_seats.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.passenger_capacity[0].number_of_seats.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int1) name(number_of_standing_places) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005586\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_6104 = (uint8_t*) buffer++;
                                                                            *_tmp_6104 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.passenger_capacity[0].number_of_standing_places.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.passenger_capacity[0].number_of_standing_places.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    {
                                                                        *_choice_194 = 5;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005587\033[0m| Choice selection: 5";
                                                                    
                                                                            // ExhaustEmissionValues  SEQUENCE
                                                                                //  unitType      UnitType                             
                                                                                //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                                //  emissionHC    Int2                                 
                                                                                //  emissionNOX   Int2                                 
                                                                                //  emissionHCNOX Int2                                 
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                            // Enumerated
                                                                            // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005588\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].unit_type.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_6105 = (uint8_t*)buffer;
                                                                            buffer += 1;
                                                                            *_tmp_6105 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].unit_type.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].unit_type.value; 
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(ExhaustEmissionValues_emissionCO) name(emission_co) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005589\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_co.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_6106 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_6106 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_co.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_co.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(emission_hc) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005590\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_hc.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_6107 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_6107 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_hc.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_hc.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(emission_nox) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005591\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_nox.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_6108 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_6108 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_nox.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_nox.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(emission_hcnox) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005592\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_6109 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_6109 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_hcnox.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    {
                                                                        *_choice_194 = 6;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005593\033[0m| Choice selection: 6";
                                                                    
                                                                            // DieselEmissionValues  SEQUENCE
                                                                                //  particulate     DieselEmissionValues_particulate     
                                                                                //  absorptionCoeff Int2                                 
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(DieselEmissionValues_particulate) name(particulate) extGroup(0)
                                                                                // DieselEmissionValues_particulate  SEQUENCE
                                                                                    //  unitType   UnitType                                   
                                                                                    //  value      DieselEmissionValues_particulate_value     
                                                                                // Optional fields bytemap
                                                                                
                                                                                // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                                // Enumerated
                                                                                // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m005594\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                                }
                                                                                
                                                                                uint8_t* _tmp_6110 = (uint8_t*)buffer;
                                                                                buffer += 1;
                                                                                *_tmp_6110 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                                // MIN validator
                                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                    return -1;
                                                                                }
                                                                                // MAX validator
                                                                                if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                                    return -1;
                                                                                }
                                                                                
                                                                                // Field:  type(DieselEmissionValues_particulate_value) name(value) extGroup(0)
                                                                                // Integer
                                                                                
                                                                                // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m005595\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].particulate.value.value;
                                                                                }
                                                                                
                                                                                uint16_t* _tmp_6111 = (uint16_t*) buffer; buffer += 2;
                                                                                *_tmp_6111 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].particulate.value.value; 
                                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].particulate.value.value;
                                                                                
                                                                                // MIN validator
                                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                    return -1;
                                                                                }
                                                                                // MAX validator
                                                                                if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                                    return -1;
                                                                                }
                                                                            
                                                                            // Field:  type(Int2) name(absorption_coeff) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005596\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_6112 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_6112 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].absorption_coeff.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.sound_level.size() != 0)  // CHOICE 7  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    {
                                                                        *_choice_194 = 7;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m005597\033[0m| Choice selection: 7";
                                                                    
                                                                            // SoundLevel  SEQUENCE
                                                                                //  soundstationary Int1           
                                                                                //  sounddriveby    Int1           
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(Int1) name(soundstationary) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005598\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.sound_level[0].soundstationary.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.sound_level[0].soundstationary.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_6113 = (uint8_t*) buffer++;
                                                                            *_tmp_6113 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.sound_level[0].soundstationary.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.sound_level[0].soundstationary.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int1) name(sounddriveby) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005599\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.sound_level[0].sounddriveby.value) << 
                                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.sound_level[0].sounddriveby.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_6114 = (uint8_t*) buffer++;
                                                                            *_tmp_6114 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.sound_level[0].sounddriveby.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.sound_level[0].sounddriveby.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    
                                                                    }
                                                                    else
                                                                    {
                                                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_194) << ") selected in CHOICE VehicleCharacteristicsRanges_limits in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].trailer[0].elements[b].ranges[0].elements[g].limits'; message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                            }
                                                        }
                                                        
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train.size() != 0) {
                                                // Field:  type(TrainCharacteristics) name(train) extGroup(0)
                                                    // TrainCharacteristics  SEQUENCE
                                                        //  equalTo    TractorCharacteristics_equalTo        
                                                        //  notEqualTo TractorCharacteristics_notEqualTo     
                                                        //  ranges     TractorCharacteristics_ranges         
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(TractorCharacteristics_equalTo) name(equal_to) extGroup(0)
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                    uint8_t* _ext_flag_2948 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.
                                                    *_ext_flag_2948 = 0; 
                                                    
                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements.size();
                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                    uint16_t* _tmp_6115 = (uint16_t*)buffer;
                                                    buffer += 2;
                                                    *_tmp_6115 = __aux64__ - 1;
                                                    
                                                    int __ifh = __aux64__;
                                                    for(int h = 0; h < __ifh; h++) { 
                                                        
                                                        // Choice
                                                           // #0  simpleVehicleType   StationType
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                           // #2  iso3833VehicleType   Iso3833VehicleType
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                           // #4  engineCharacteristics   EngineCharacteristics
                                                           // #5  loadType   LoadType
                                                           // #6  usage   VehicleRole
                                                        uint8_t* _ext_flag_2949 = (uint8_t*) buffer; 
                                                        buffer++;
                                                        *_ext_flag_2949 = 0; 
                                                        
                                                        uint8_t* _choice_195 = (uint8_t*) buffer;
                                                        buffer++;
                                                        
                                                        if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                            *_choice_195 = 0;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005601\033[0m| Choice selection: 0";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005602\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_6116 = (uint8_t*) buffer++;
                                                            *_tmp_6116 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].simple_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].simple_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_195 = 1;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005603\033[0m| Choice selection: 1";
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                            uint8_t* _choice_196 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                *_choice_196 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005604\033[0m| Choice selection: 0";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005605\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6117 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6117 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_196 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005606\033[0m| Choice selection: 1";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005607\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6118 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6118 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_196 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005608\033[0m| Choice selection: 2";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005609\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6119 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6119 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_196 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005610\033[0m| Choice selection: 3";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005611\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6120 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6120 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_196) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].eu_vehicle_category_code[0]'; message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_195 = 2;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005612\033[0m| Choice selection: 2";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005613\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_6121 = (uint8_t*) buffer++;
                                                            *_tmp_6121 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].iso3833_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].iso3833_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_195 = 3;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005614\033[0m| Choice selection: 3";
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005615\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6122 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6122 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].euro_and_co2value[0].euro_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].euro_and_co2value[0].euro_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005616\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].euro_and_co2value[0].cop_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6123 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6123 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].euro_and_co2value[0].cop_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].euro_and_co2value[0].cop_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_195 = 4;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005617\033[0m| Choice selection: 4";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005618\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].engine_characteristics[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_6124 = (uint8_t*) buffer++;
                                                            *_tmp_6124 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].engine_characteristics[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].engine_characteristics[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_195 = 5;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005619\033[0m| Choice selection: 5";
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005620\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].goods_type.value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_2960 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].goods_type.
                                                                *_ext_flag_2960 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_2960) {
                                                                    uint8_t* _tmp_6126 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].goods_type.value <= INT32_MAX) {
                                                                        *_tmp_6126 = 0;
                                                                    
                                                                        uint32_t* _tmp_6125 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_6125 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_6126 = 1;
                                                                    
                                                                        uint64_t* _tmp_6125 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_6125 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_6125 = (uint8_t*) buffer++;
                                                                    *_tmp_6125 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].goods_type.value;
                                                                }
                                                                
                                                                // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005621\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6127 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6127 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].dangerous_goods_type.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].dangerous_goods_type.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005622\033[0m| ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].special_transport_type.values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].special_transport_type.values.size() < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].special_transport_type.values.size() > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_6128 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].special_transport_type.values.size();
                                                                if(__aux64__ > 4) __aux64__ = 4;
                                                                *_tmp_6128 = __aux64__ - 4;
                                                                buffer += 1;
                                                                
                                                                int __ifi = __aux64__;
                                                                for(int i = 0; i < __ifi; i++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].load_type[0].special_transport_type.values[i]? 1: 0);
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_195 = 6;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005623\033[0m| Choice selection: 6";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005624\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].usage[0].value) << 
                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].usage[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_6129 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_6129 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].usage[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].usage[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_195) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].equal_to.elements[h]'; message dropped.";
                                                            return -1;
                                                        }
                                                    }
                                                    
                                                    // Field:  type(TractorCharacteristics_notEqualTo) name(not_equal_to) extGroup(0)
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                    uint8_t* _ext_flag_2963 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.
                                                    *_ext_flag_2963 = 0; 
                                                    
                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements.size();
                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                    uint16_t* _tmp_6130 = (uint16_t*)buffer;
                                                    buffer += 2;
                                                    *_tmp_6130 = __aux64__ - 1;
                                                    
                                                    int __ifj = __aux64__;
                                                    for(int j = 0; j < __ifj; j++) { 
                                                        
                                                        // Choice
                                                           // #0  simpleVehicleType   StationType
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                           // #2  iso3833VehicleType   Iso3833VehicleType
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                           // #4  engineCharacteristics   EngineCharacteristics
                                                           // #5  loadType   LoadType
                                                           // #6  usage   VehicleRole
                                                        uint8_t* _ext_flag_2964 = (uint8_t*) buffer; 
                                                        buffer++;
                                                        *_ext_flag_2964 = 0; 
                                                        
                                                        uint8_t* _choice_197 = (uint8_t*) buffer;
                                                        buffer++;
                                                        
                                                        if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                            *_choice_197 = 0;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005626\033[0m| Choice selection: 0";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005627\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_6131 = (uint8_t*) buffer++;
                                                            *_tmp_6131 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].simple_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].simple_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_197 = 1;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005628\033[0m| Choice selection: 1";
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                            uint8_t* _choice_198 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                *_choice_198 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005629\033[0m| Choice selection: 0";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005630\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6132 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6132 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_198 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005631\033[0m| Choice selection: 1";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005632\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6133 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6133 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_198 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005633\033[0m| Choice selection: 2";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005634\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6134 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6134 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_198 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005635\033[0m| Choice selection: 3";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005636\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6135 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6135 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_198) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].eu_vehicle_category_code[0]'; message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_197 = 2;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005637\033[0m| Choice selection: 2";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005638\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_6136 = (uint8_t*) buffer++;
                                                            *_tmp_6136 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].iso3833_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].iso3833_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_197 = 3;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005639\033[0m| Choice selection: 3";
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005640\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6137 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6137 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].euro_and_co2value[0].euro_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].euro_and_co2value[0].euro_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005641\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].euro_and_co2value[0].cop_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6138 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6138 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].euro_and_co2value[0].cop_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].euro_and_co2value[0].cop_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_197 = 4;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005642\033[0m| Choice selection: 4";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005643\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].engine_characteristics[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_6139 = (uint8_t*) buffer++;
                                                            *_tmp_6139 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].engine_characteristics[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].engine_characteristics[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_197 = 5;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005644\033[0m| Choice selection: 5";
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005645\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].goods_type.value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_2975 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].goods_type.
                                                                *_ext_flag_2975 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_2975) {
                                                                    uint8_t* _tmp_6141 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].goods_type.value <= INT32_MAX) {
                                                                        *_tmp_6141 = 0;
                                                                    
                                                                        uint32_t* _tmp_6140 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_6140 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_6141 = 1;
                                                                    
                                                                        uint64_t* _tmp_6140 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_6140 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_6140 = (uint8_t*) buffer++;
                                                                    *_tmp_6140 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].goods_type.value;
                                                                }
                                                                
                                                                // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005646\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6142 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_6142 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].dangerous_goods_type.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].dangerous_goods_type.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005647\033[0m| ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].special_transport_type.values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].special_transport_type.values.size() < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].special_transport_type.values.size() > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_6143 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].special_transport_type.values.size();
                                                                if(__aux64__ > 4) __aux64__ = 4;
                                                                *_tmp_6143 = __aux64__ - 4;
                                                                buffer += 1;
                                                                
                                                                int __ifk = __aux64__;
                                                                for(int k = 0; k < __ifk; k++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].load_type[0].special_transport_type.values[k]? 1: 0);
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_197 = 6;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m005648\033[0m| Choice selection: 6";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) dataType(Int32)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005649\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].usage[0].value) << 
                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].usage[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_6144 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_6144 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].usage[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].usage[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_197) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].not_equal_to.elements[j]'; message dropped.";
                                                            return -1;
                                                        }
                                                    }
                                                    
                                                    // Field:  type(TractorCharacteristics_ranges) name(ranges) extGroup(0)
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                    uint8_t* _ext_flag_2978 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.
                                                    *_ext_flag_2978 = 0; 
                                                    
                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements.size();
                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                    uint16_t* _tmp_6145 = (uint16_t*)buffer;
                                                    buffer += 2;
                                                    *_tmp_6145 = __aux64__ - 1;
                                                    
                                                    int __ifl = __aux64__;
                                                    for(int l = 0; l < __ifl; l++) { 
                                                        
                                                            // VehicleCharacteristicsRanges  SEQUENCE
                                                                //  comparisonOperator ComparisonOperator                      
                                                                //  limits             VehicleCharacteristicsRanges_limits     
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(ComparisonOperator) name(comparison_operator) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005651\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].comparison_operator.value) << 
                                                                             " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].comparison_operator.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_6146 = (uint8_t*) buffer++;
                                                            *_tmp_6146 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].comparison_operator.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].comparison_operator.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].comparison_operator.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].comparison_operator.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(VehicleCharacteristicsRanges_limits) name(limits) extGroup(0)
                                                            // Choice
                                                               // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles
                                                               // #1  vehicleDimensions   VehicleDimensions
                                                               // #2  vehicleWeightLimits   VehicleWeightLimits
                                                               // #3  axleWeightLimits   AxleWeightLimits
                                                               // #4  passengerCapacity   PassengerCapacity
                                                               // #5  exhaustEmissionValues   ExhaustEmissionValues
                                                               // #6  dieselEmissionValues   DieselEmissionValues
                                                               // #7  soundLevel   SoundLevel
                                                            uint8_t* _ext_flag_2980 = (uint8_t*) buffer; 
                                                            buffer++;
                                                            *_ext_flag_2980 = 0; 
                                                            
                                                            uint8_t* _choice_199 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.number_of_axles.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                *_choice_199 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005652\033[0m| Choice selection: 0";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005653\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.number_of_axles[0].value) << 
                                                                                 " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.number_of_axles[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_6147 = (uint8_t*) buffer++;
                                                                *_tmp_6147 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.number_of_axles[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.number_of_axles[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.number_of_axles[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.number_of_axles[0].value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_199 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005654\033[0m| Choice selection: 1";
                                                            
                                                                    // VehicleDimensions  SEQUENCE
                                                                        //  vehicleLengthOverall Int1           
                                                                        //  vehicleHeigthOverall Int1           
                                                                        //  vehicleWidthOverall  Int1           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int1) name(vehicle_length_overall) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005655\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6148 = (uint8_t*) buffer++;
                                                                    *_tmp_6148 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_length_overall.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_length_overall.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(vehicle_heigth_overall) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005656\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6149 = (uint8_t*) buffer++;
                                                                    *_tmp_6149 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_heigth_overall.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_heigth_overall.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(vehicle_width_overall) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005657\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6150 = (uint8_t*) buffer++;
                                                                    *_tmp_6150 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_width_overall.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_width_overall.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_199 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005658\033[0m| Choice selection: 2";
                                                            
                                                                    // VehicleWeightLimits  SEQUENCE
                                                                        //  vehicleMaxLadenWeight     Int2           
                                                                        //  vehicleTrainMaximumWeight Int2           
                                                                        //  vehicleWeightUnladen      Int2           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int2) name(vehicle_max_laden_weight) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005659\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_6151 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_6151 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(vehicle_train_maximum_weight) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005660\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_6152 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_6152 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(vehicle_weight_unladen) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005661\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_6153 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_6153 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_199 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005662\033[0m| Choice selection: 3";
                                                            
                                                                    // AxleWeightLimits  SEQUENCE
                                                                        //  maxLadenweightOnAxle1 Int2           
                                                                        //  maxLadenweightOnAxle2 Int2           
                                                                        //  maxLadenweightOnAxle3 Int2           
                                                                        //  maxLadenweightOnAxle4 Int2           
                                                                        //  maxLadenweightOnAxle5 Int2           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle1) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005663\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_6154 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_6154 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle2) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005664\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_6155 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_6155 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle3) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005665\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_6156 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_6156 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle4) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005666\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_6157 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_6157 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle5) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005667\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_6158 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_6158 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.passenger_capacity.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_199 = 4;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005668\033[0m| Choice selection: 4";
                                                            
                                                                    // PassengerCapacity  SEQUENCE
                                                                        //  numberOfSeats          Int1           
                                                                        //  numberOfStandingPlaces Int1           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int1) name(number_of_seats) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005669\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.passenger_capacity[0].number_of_seats.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6159 = (uint8_t*) buffer++;
                                                                    *_tmp_6159 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.passenger_capacity[0].number_of_seats.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.passenger_capacity[0].number_of_seats.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(number_of_standing_places) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005670\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6160 = (uint8_t*) buffer++;
                                                                    *_tmp_6160 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.passenger_capacity[0].number_of_standing_places.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.passenger_capacity[0].number_of_standing_places.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_199 = 5;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005671\033[0m| Choice selection: 5";
                                                            
                                                                    // ExhaustEmissionValues  SEQUENCE
                                                                        //  unitType      UnitType                             
                                                                        //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                        //  emissionHC    Int2                                 
                                                                        //  emissionNOX   Int2                                 
                                                                        //  emissionHCNOX Int2                                 
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005672\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].unit_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6161 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_6161 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].unit_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].unit_type.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(ExhaustEmissionValues_emissionCO) name(emission_co) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005673\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_co.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_6162 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_6162 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_co.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_co.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(emission_hc) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005674\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_hc.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_6163 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_6163 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_hc.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_hc.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(emission_nox) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005675\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_nox.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_6164 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_6164 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_nox.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_nox.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(emission_hcnox) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005676\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_6165 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_6165 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_hcnox.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_199 = 6;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005677\033[0m| Choice selection: 6";
                                                            
                                                                    // DieselEmissionValues  SEQUENCE
                                                                        //  particulate     DieselEmissionValues_particulate     
                                                                        //  absorptionCoeff Int2                                 
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(DieselEmissionValues_particulate) name(particulate) extGroup(0)
                                                                        // DieselEmissionValues_particulate  SEQUENCE
                                                                            //  unitType   UnitType                                   
                                                                            //  value      DieselEmissionValues_particulate_value     
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005678\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_6166 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_6166 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(DieselEmissionValues_particulate_value) name(value) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005679\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].particulate.value.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_6167 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_6167 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].particulate.value.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].particulate.value.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    // Field:  type(Int2) name(absorption_coeff) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005680\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_6168 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_6168 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].absorption_coeff.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.sound_level.size() != 0)  // CHOICE 7  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_199 = 7;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005681\033[0m| Choice selection: 7";
                                                            
                                                                    // SoundLevel  SEQUENCE
                                                                        //  soundstationary Int1           
                                                                        //  sounddriveby    Int1           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int1) name(soundstationary) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005682\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.sound_level[0].soundstationary.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.sound_level[0].soundstationary.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6169 = (uint8_t*) buffer++;
                                                                    *_tmp_6169 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.sound_level[0].soundstationary.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.sound_level[0].soundstationary.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(sounddriveby) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005683\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.sound_level[0].sounddriveby.value) << 
                                                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.sound_level[0].sounddriveby.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_6170 = (uint8_t*) buffer++;
                                                                    *_tmp_6170 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.sound_level[0].sounddriveby.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.sound_level[0].sounddriveby.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_199) << ") selected in CHOICE VehicleCharacteristicsRanges_limits in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_type_qualifier[0].train[0].ranges.elements[l].limits'; message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                    }
                                            }
                                    }
                                    
                                    // Field:  type(LaneStatus) name(lane_status) extGroup(0)
                                    // Integer
                                    
                                    // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005684\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_status.value) << 
                                                     " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_status.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_status.value);
                                    }
                                    
                                    uint8_t* _ext_flag_3005 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_status.
                                    *_ext_flag_3005 = (ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_status.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_status.value <= 7) ? 0 : 1;
                                    
                                    if(*_ext_flag_3005) {
                                        uint8_t* _tmp_6172 = (uint8_t*) buffer++; 
                                        if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_status.value >= 0 && ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_status.value <= INT32_MAX) {
                                            *_tmp_6172 = 0;
                                        
                                            uint32_t* _tmp_6171 = (uint32_t*)buffer; buffer += 4;
                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_status.value;
                                            __aux64__ -= INT32_MIN;
                                            *_tmp_6171 = __aux64__;
                                        } 
                                        else
                                        {
                                            *_tmp_6172 = 1;
                                        
                                            uint64_t* _tmp_6171 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_status.value;
                                            __aux64__ -= INT64_MIN;
                                            *_tmp_6171 = __aux64__;
                                        }
                                    } else {
                                        uint8_t* _tmp_6171 = (uint8_t*) buffer++;
                                        *_tmp_6171 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_status.value; 
                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_status.value;
                                    }
                                    
                                    if(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_width.size() != 0) {
                                        // Field:  type(IVILaneWidth) name(lane_width) extGroup(0)
                                        // Integer
                                        
                                        // UINT16  min(0) max(1023) span(1024) dataType(UInt16)
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m005685\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_width[0].value) << 
                                                         " ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_width[0].value: " << ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_width[0].value;
                                        }
                                        
                                        uint16_t* _tmp_6173 = (uint16_t*) buffer; buffer += 2;
                                        *_tmp_6173 = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_width[0].value; 
                                        __aux64__ = ros->ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_width[0].value;
                                        
                                        // MIN validator
                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_width[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                            return -1;
                                        }
                                        // MAX validator
                                        if (VALIDATORS_ENABLED && __aux64__ > 1023) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].rcc[0].elements[r].lane_configuration.elements[t].lane_width[0].value' (" << __aux64__ << ") exceeds max allowable (1023); message dropped.";
                                            return -1;
                                        }
                                    }
                                    
                                    if(*_ext_flag_2818) {
                                    }
                            }
                            
                            if(*_ext_flag_2813) {
                            }
                    }
                
                }
                else if(ros->ivi.optional[0].elements[e].tc.size() != 0)  // CHOICE 3  fieldType(IviContainer) 
                {
                    *_choice_159 = 3;  // Setting choice selection
                
                    if(debug)
                        logger->debug() << "|\033[38;5;94m005686\033[0m| Choice selection: 3";
                
                    // SequenceOf
                    // Data Type UInt8
                    // SEQUENCE_OF  min(1) max(16) span(16) ext(true)
                    uint8_t* _ext_flag_3007 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].tc[0].
                    *_ext_flag_3007 = 0; 
                    
                    __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements.size();
                    if(__aux64__ > 16) __aux64__ = 16;
                    uint16_t* _tmp_6176 = (uint16_t*)buffer;
                    buffer += 2;
                    *_tmp_6176 = __aux64__ - 1;
                    
                    int __ifm = __aux64__;
                    for(int m = 0; m < __ifm; m++) { 
                        
                            // TcPart  SEQUENCE
                                //  detectionZoneIds       TcPart_detectionZoneIds         OPTIONAL  
                                //  relevanceZoneIds       TcPart_relevanceZoneIds           
                                //  direction              Direction                       OPTIONAL  
                                //  driverAwarenessZoneIds TcPart_driverAwarenessZoneIds   OPTIONAL  
                                //  minimumAwarenessTime   TcPart_minimumAwarenessTime     OPTIONAL  
                                //  applicableLanes        TcPart_applicableLanes          OPTIONAL  
                                //  layoutId               TcPart_layoutId                 OPTIONAL  
                                //  preStoredlayoutId      TcPart_preStoredlayoutId        OPTIONAL  
                                //  text                   TcPart_text                     OPTIONAL  
                                //  data                   TcPart_data                       
                                //  ...
                            uint8_t* _ext_flag_3008 = (uint8_t*) buffer++;  // Write extension flag for TcPart
                            *_ext_flag_3008 = 0;  
                            
                            // Optional fields bytemap
                            char* _tmp_6177 = (char*) buffer++;
                            *_tmp_6177 = (ros->ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m005688\033[0m| Optional field detection_zone_ids = " << *_tmp_6177;
                            char* _tmp_6178 = (char*) buffer++;
                            *_tmp_6178 = (ros->ivi.optional[0].elements[e].tc[0].elements[m].direction.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m005689\033[0m| Optional field direction = " << *_tmp_6178;
                            char* _tmp_6179 = (char*) buffer++;
                            *_tmp_6179 = (ros->ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m005690\033[0m| Optional field driver_awareness_zone_ids = " << *_tmp_6179;
                            char* _tmp_6180 = (char*) buffer++;
                            *_tmp_6180 = (ros->ivi.optional[0].elements[e].tc[0].elements[m].minimum_awareness_time.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m005691\033[0m| Optional field minimum_awareness_time = " << *_tmp_6180;
                            char* _tmp_6181 = (char*) buffer++;
                            *_tmp_6181 = (ros->ivi.optional[0].elements[e].tc[0].elements[m].applicable_lanes.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m005692\033[0m| Optional field applicable_lanes = " << *_tmp_6181;
                            char* _tmp_6182 = (char*) buffer++;
                            *_tmp_6182 = (ros->ivi.optional[0].elements[e].tc[0].elements[m].layout_id.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m005693\033[0m| Optional field layout_id = " << *_tmp_6182;
                            char* _tmp_6183 = (char*) buffer++;
                            *_tmp_6183 = (ros->ivi.optional[0].elements[e].tc[0].elements[m].pre_storedlayout_id.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m005694\033[0m| Optional field pre_storedlayout_id = " << *_tmp_6183;
                            char* _tmp_6184 = (char*) buffer++;
                            *_tmp_6184 = (ros->ivi.optional[0].elements[e].tc[0].elements[m].text.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->debug() << "|\033[38;5;94m005695\033[0m| Optional field text = " << *_tmp_6184;
                            
                            if(ros->ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids.size() != 0) {
                                // Field:  type(TcPart_detectionZoneIds) name(detection_zone_ids) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_3009 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids[0].
                                *_ext_flag_3009 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_6185 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_6185 = __aux64__ - 1;
                                
                                int __ifn = __aux64__;
                                for(int n = 0; n < __ifn; n++) { 
                                    
                                    // Integer
                                    
                                    // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005697\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids[0].elements[n].value) << 
                                                     " ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids[0].elements[n].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids[0].elements[n].value);
                                    }
                                    
                                    uint8_t* _ext_flag_3010 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids[0].elements[n].
                                    *_ext_flag_3010 = (ros->ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids[0].elements[n].value >= 1 && ros->ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids[0].elements[n].value <= 32) ? 0 : 1;
                                    
                                    if(*_ext_flag_3010) {
                                        uint8_t* _tmp_6187 = (uint8_t*) buffer++; 
                                        if(ros->ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids[0].elements[n].value >= 0 && ros->ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids[0].elements[n].value <= INT32_MAX) {
                                            *_tmp_6187 = 0;
                                        
                                            uint32_t* _tmp_6186 = (uint32_t*)buffer; buffer += 4;
                                            __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids[0].elements[n].value;
                                            __aux64__ -= INT32_MIN;
                                            *_tmp_6186 = __aux64__;
                                        } 
                                        else
                                        {
                                            *_tmp_6187 = 1;
                                        
                                            uint64_t* _tmp_6186 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids[0].elements[n].value;
                                            __aux64__ -= INT64_MIN;
                                            *_tmp_6186 = __aux64__;
                                        }
                                    } else {
                                        uint8_t* _tmp_6186 = (uint8_t*) buffer++;
                                        __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids[0].elements[n].value - 1;
                                        *_tmp_6186 = __aux64__;
                                        __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].detection_zone_ids[0].elements[n].value;
                                    }
                                }
                            }
                            
                            // Field:  type(TcPart_relevanceZoneIds) name(relevance_zone_ids) extGroup(0)
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                            uint8_t* _ext_flag_3011 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].tc[0].elements[m].relevance_zone_ids.
                            *_ext_flag_3011 = 0; 
                            
                            __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].relevance_zone_ids.elements.size();
                            if(__aux64__ > 8) __aux64__ = 8;
                            uint16_t* _tmp_6188 = (uint16_t*)buffer;
                            buffer += 2;
                            *_tmp_6188 = __aux64__ - 1;
                            
                            int __ifo = __aux64__;
                            for(int o = 0; o < __ifo; o++) { 
                                
                                // Integer
                                
                                // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005699\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].tc[0].elements[m].relevance_zone_ids.elements[o].value) << 
                                                 " ivi.optional[0].elements[e].tc[0].elements[m].relevance_zone_ids.elements[o].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].tc[0].elements[m].relevance_zone_ids.elements[o].value);
                                }
                                
                                uint8_t* _ext_flag_3012 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].tc[0].elements[m].relevance_zone_ids.elements[o].
                                *_ext_flag_3012 = (ros->ivi.optional[0].elements[e].tc[0].elements[m].relevance_zone_ids.elements[o].value >= 1 && ros->ivi.optional[0].elements[e].tc[0].elements[m].relevance_zone_ids.elements[o].value <= 32) ? 0 : 1;
                                
                                if(*_ext_flag_3012) {
                                    uint8_t* _tmp_6190 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[e].tc[0].elements[m].relevance_zone_ids.elements[o].value >= 0 && ros->ivi.optional[0].elements[e].tc[0].elements[m].relevance_zone_ids.elements[o].value <= INT32_MAX) {
                                        *_tmp_6190 = 0;
                                    
                                        uint32_t* _tmp_6189 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].relevance_zone_ids.elements[o].value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_6189 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_6190 = 1;
                                    
                                        uint64_t* _tmp_6189 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].relevance_zone_ids.elements[o].value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_6189 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_6189 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].relevance_zone_ids.elements[o].value - 1;
                                    *_tmp_6189 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].relevance_zone_ids.elements[o].value;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].tc[0].elements[m].direction.size() != 0) {
                                // Field:  type(Direction) name(direction) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005700\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].tc[0].elements[m].direction[0].value) << 
                                                 " ivi.optional[0].elements[e].tc[0].elements[m].direction[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].tc[0].elements[m].direction[0].value);
                                }
                                
                                uint8_t* _tmp_6191 = (uint8_t*) buffer++;
                                *_tmp_6191 = ros->ivi.optional[0].elements[e].tc[0].elements[m].direction[0].value; 
                                __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].direction[0].value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].tc[0].elements[m].direction[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].tc[0].elements[m].direction[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                    return -1;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids.size() != 0) {
                                // Field:  type(TcPart_driverAwarenessZoneIds) name(driver_awareness_zone_ids) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_3014 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids[0].
                                *_ext_flag_3014 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_6192 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_6192 = __aux64__ - 1;
                                
                                int __ifp = __aux64__;
                                for(int p = 0; p < __ifp; p++) { 
                                    
                                    // Integer
                                    
                                    // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005702\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids[0].elements[p].value) << 
                                                     " ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids[0].elements[p].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids[0].elements[p].value);
                                    }
                                    
                                    uint8_t* _ext_flag_3015 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids[0].elements[p].
                                    *_ext_flag_3015 = (ros->ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids[0].elements[p].value >= 1 && ros->ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids[0].elements[p].value <= 32) ? 0 : 1;
                                    
                                    if(*_ext_flag_3015) {
                                        uint8_t* _tmp_6194 = (uint8_t*) buffer++; 
                                        if(ros->ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids[0].elements[p].value >= 0 && ros->ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids[0].elements[p].value <= INT32_MAX) {
                                            *_tmp_6194 = 0;
                                        
                                            uint32_t* _tmp_6193 = (uint32_t*)buffer; buffer += 4;
                                            __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids[0].elements[p].value;
                                            __aux64__ -= INT32_MIN;
                                            *_tmp_6193 = __aux64__;
                                        } 
                                        else
                                        {
                                            *_tmp_6194 = 1;
                                        
                                            uint64_t* _tmp_6193 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids[0].elements[p].value;
                                            __aux64__ -= INT64_MIN;
                                            *_tmp_6193 = __aux64__;
                                        }
                                    } else {
                                        uint8_t* _tmp_6193 = (uint8_t*) buffer++;
                                        __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids[0].elements[p].value - 1;
                                        *_tmp_6193 = __aux64__;
                                        __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].driver_awareness_zone_ids[0].elements[p].value;
                                    }
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].tc[0].elements[m].minimum_awareness_time.size() != 0) {
                                // Field:  type(TcPart_minimumAwarenessTime) name(minimum_awareness_time) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005703\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].tc[0].elements[m].minimum_awareness_time[0].value) << 
                                                 " ivi.optional[0].elements[e].tc[0].elements[m].minimum_awareness_time[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].tc[0].elements[m].minimum_awareness_time[0].value);
                                }
                                
                                uint8_t* _tmp_6195 = (uint8_t*) buffer++;
                                *_tmp_6195 = ros->ivi.optional[0].elements[e].tc[0].elements[m].minimum_awareness_time[0].value; 
                                __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].minimum_awareness_time[0].value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].tc[0].elements[m].minimum_awareness_time[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].tc[0].elements[m].minimum_awareness_time[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                    return -1;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].tc[0].elements[m].applicable_lanes.size() != 0) {
                                // Field:  type(TcPart_applicableLanes) name(applicable_lanes) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_3017 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].tc[0].elements[m].applicable_lanes[0].
                                *_ext_flag_3017 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].applicable_lanes[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_6196 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_6196 = __aux64__ - 1;
                                
                                int __ifq = __aux64__;
                                for(int q = 0; q < __ifq; q++) { 
                                    
                                    // Integer
                                    
                                    // INT8  min(-1) max(14) span(16) dataType(Int8)
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005705\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].tc[0].elements[m].applicable_lanes[0].elements[q].value) << 
                                                     " ivi.optional[0].elements[e].tc[0].elements[m].applicable_lanes[0].elements[q].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].tc[0].elements[m].applicable_lanes[0].elements[q].value);
                                    }
                                    
                                    uint8_t* _tmp_6197 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].applicable_lanes[0].elements[q].value - -1;
                                    *_tmp_6197 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].applicable_lanes[0].elements[q].value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].tc[0].elements[m].applicable_lanes[0].elements[q].value' (" << __aux64__ << ") less than (-1); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].tc[0].elements[m].applicable_lanes[0].elements[q].value' (" << __aux64__ << ") exceeds max allowable (14); message dropped.";
                                        return -1;
                                    }
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].tc[0].elements[m].layout_id.size() != 0) {
                                // Field:  type(TcPart_layoutId) name(layout_id) extGroup(0)
                                // Integer
                                
                                // UINT8  min(1) max(4) span(4) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005706\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].tc[0].elements[m].layout_id[0].value) << 
                                                 " ivi.optional[0].elements[e].tc[0].elements[m].layout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].tc[0].elements[m].layout_id[0].value);
                                }
                                
                                uint8_t* _ext_flag_3019 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].tc[0].elements[m].layout_id[0].
                                *_ext_flag_3019 = (ros->ivi.optional[0].elements[e].tc[0].elements[m].layout_id[0].value >= 1 && ros->ivi.optional[0].elements[e].tc[0].elements[m].layout_id[0].value <= 4) ? 0 : 1;
                                
                                if(*_ext_flag_3019) {
                                    uint8_t* _tmp_6199 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[e].tc[0].elements[m].layout_id[0].value >= 0 && ros->ivi.optional[0].elements[e].tc[0].elements[m].layout_id[0].value <= INT32_MAX) {
                                        *_tmp_6199 = 0;
                                    
                                        uint32_t* _tmp_6198 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].layout_id[0].value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_6198 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_6199 = 1;
                                    
                                        uint64_t* _tmp_6198 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].layout_id[0].value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_6198 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_6198 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].layout_id[0].value - 1;
                                    *_tmp_6198 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].layout_id[0].value;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].tc[0].elements[m].pre_storedlayout_id.size() != 0) {
                                // Field:  type(TcPart_preStoredlayoutId) name(pre_storedlayout_id) extGroup(0)
                                // Integer
                                
                                // UINT8  min(1) max(64) span(64) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005707\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].tc[0].elements[m].pre_storedlayout_id[0].value) << 
                                                 " ivi.optional[0].elements[e].tc[0].elements[m].pre_storedlayout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].tc[0].elements[m].pre_storedlayout_id[0].value);
                                }
                                
                                uint8_t* _ext_flag_3020 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].tc[0].elements[m].pre_storedlayout_id[0].
                                *_ext_flag_3020 = (ros->ivi.optional[0].elements[e].tc[0].elements[m].pre_storedlayout_id[0].value >= 1 && ros->ivi.optional[0].elements[e].tc[0].elements[m].pre_storedlayout_id[0].value <= 64) ? 0 : 1;
                                
                                if(*_ext_flag_3020) {
                                    uint8_t* _tmp_6201 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[e].tc[0].elements[m].pre_storedlayout_id[0].value >= 0 && ros->ivi.optional[0].elements[e].tc[0].elements[m].pre_storedlayout_id[0].value <= INT32_MAX) {
                                        *_tmp_6201 = 0;
                                    
                                        uint32_t* _tmp_6200 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].pre_storedlayout_id[0].value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_6200 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_6201 = 1;
                                    
                                        uint64_t* _tmp_6200 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].pre_storedlayout_id[0].value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_6200 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_6200 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].pre_storedlayout_id[0].value - 1;
                                    *_tmp_6200 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].pre_storedlayout_id[0].value;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[e].tc[0].elements[m].text.size() != 0) {
                                // Field:  type(TcPart_text) name(text) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                uint8_t* _ext_flag_3021 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].
                                *_ext_flag_3021 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements.size();
                                if(__aux64__ > 4) __aux64__ = 4;
                                uint16_t* _tmp_6202 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_6202 = __aux64__ - 1;
                                
                                int __ifr = __aux64__;
                                for(int r = 0; r < __ifr; r++) { 
                                    
                                        // Text  SEQUENCE
                                            //  layoutComponentId Text_layoutComponentId   OPTIONAL  
                                            //  language          Text_language              
                                            //  textContent       Text_textContent           
                                        // Optional fields bytemap
                                        char* _tmp_6203 = (char*) buffer++;
                                        *_tmp_6203 = (ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].layout_component_id.size() != 0 ? 1 : 0);
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m005709\033[0m| Optional field layout_component_id = " << *_tmp_6203;
                                        
                                        if(ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].layout_component_id.size() != 0) {
                                            // Field:  type(Text_layoutComponentId) name(layout_component_id) extGroup(0)
                                            // Integer
                                            
                                            // UINT8  min(1) max(4) span(4) dataType(UInt8)
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005710\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].layout_component_id[0].value) << 
                                                             " ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].layout_component_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].layout_component_id[0].value);
                                            }
                                            
                                            uint8_t* _ext_flag_3022 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].layout_component_id[0].
                                            *_ext_flag_3022 = (ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].layout_component_id[0].value >= 1 && ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].layout_component_id[0].value <= 4) ? 0 : 1;
                                            
                                            if(*_ext_flag_3022) {
                                                uint8_t* _tmp_6205 = (uint8_t*) buffer++; 
                                                if(ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].layout_component_id[0].value >= 0 && ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].layout_component_id[0].value <= INT32_MAX) {
                                                    *_tmp_6205 = 0;
                                                
                                                    uint32_t* _tmp_6204 = (uint32_t*)buffer; buffer += 4;
                                                    __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].layout_component_id[0].value;
                                                    __aux64__ -= INT32_MIN;
                                                    *_tmp_6204 = __aux64__;
                                                } 
                                                else
                                                {
                                                    *_tmp_6205 = 1;
                                                
                                                    uint64_t* _tmp_6204 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].layout_component_id[0].value;
                                                    __aux64__ -= INT64_MIN;
                                                    *_tmp_6204 = __aux64__;
                                                }
                                            } else {
                                                uint8_t* _tmp_6204 = (uint8_t*) buffer++;
                                                __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].layout_component_id[0].value - 1;
                                                *_tmp_6204 = __aux64__;
                                                __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].layout_component_id[0].value;
                                            }
                                        }
                                        
                                        // Field:  type(Text_language) name(language) extGroup(0)
                                        // BitString
                                        // BIT_STRING  min(10) max(10) span(1)
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m005711\033[0m| ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].language.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].language.values.size());
                                        
                                        if(ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].language.values.size() < 10) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].language.value' " << (ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].language.values.size()) << " is less than allowable (10); message dropped.";
                                            return -1;
                                        }
                                        if(ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].language.values.size() > 10) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].language.value' " << (ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].language.values.size()) << " exceeds max allowable (10); message dropped.";
                                            return -1;
                                        }
                                        
                                        uint8_t* _tmp_6206 = (uint8_t*)buffer;
                                        __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].language.values.size();
                                        if(__aux64__ > 10) __aux64__ = 10;
                                        *_tmp_6206 = __aux64__ - 10;
                                        buffer += 1;
                                        
                                        int __ifs = __aux64__;
                                        for(int s = 0; s < __ifs; s++) {
                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                            *__b__ = (ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].language.values[s]? 1: 0);
                                        }
                                        
                                        // Field:  type(Text_textContent) name(text_content) extGroup(0)
                                        // Text
                                        
                                        // Indefinite length
                                        // TEXT  min(0) max(16383) span(16384)
                                        uint16_t* _tmp_6207 = (uint16_t*)buffer;
                                        __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].text_content.value.size();
                                        
                                        if(ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].text_content.value.size() < 0) {
                                            logger->warning() << "Error: Length of 'ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].text_content.value' " << (ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].text_content.value) << " is less than allowable (0); message dropped.";
                                            return -1;
                                        }
                                        if(ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].text_content.value.size() > 16383) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].text_content.value' " << (ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].text_content.value) << " exceeds max allowable (16383); message dropped.";
                                            return -1;
                                        }
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m005712\033[0m| ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].text_content.value.size(): " << 
                                                        static_cast<int>(ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].text_content.value.size());
                                        
                                        if(__aux64__ > 16383) __aux64__ = 16383;
                                        *_tmp_6207 = __aux64__;
                                        buffer += 2;
                                        
                                        int __ift = __aux64__;
                                        for(int t = 0; t < __ift; t++) {  // 16383
                                            char* __tmp__ = (char*)buffer++;
                                            *__tmp__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].text[0].elements[r].text_content.value.c_str()[t];
                                        }
                                        
                                }
                            }
                            
                            // Field:  type(TcPart_data) name(data) extGroup(0)
                            // OctetString
                            // Indefinite length
                            // OCTET_STRING  min(0) max(16383) span(16384)
                            
                            if(debug)
                                logger->debug() << "|\033[38;5;94m005713\033[0m| ivi.optional[0].elements[e].tc[0].elements[m].data.values.size(): ivi.optional[0].elements[e].tc[0].elements[m].data" << static_cast<int>(ros->ivi.optional[0].elements[e].tc[0].elements[m].data.values.size());
                            
                            if(ros->ivi.optional[0].elements[e].tc[0].elements[m].data.values.size() < 0) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].tc[0].elements[m].data.value' (" << 
                                            ros->ivi.optional[0].elements[e].tc[0].elements[m].data.values.size() << ") is less than allowable (0); message dropped.";
                                return -1;
                            }
                            if(ros->ivi.optional[0].elements[e].tc[0].elements[m].data.values.size() > 16383) {
                                logger->warning() << "Error: Value in 'ros->ivi.optional[0].elements[e].tc[0].elements[m].data.value' (" << 
                                            ros->ivi.optional[0].elements[e].tc[0].elements[m].data.values.size() << ") exceeds max allowable (16383); message dropped.";
                                return -1;
                            }
                            uint16_t* _tmp_6208 = (uint16_t*)buffer;
                            buffer += 2;
                            __aux64__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].data.values.size();
                            if(__aux64__ > 16383) __aux64__ = 16383;
                            *_tmp_6208 = __aux64__;
                            
                            int __ifu = __aux64__;
                            for(int u = 0; u < __ifu; u++) {
                                int8_t* __m__ = (int8_t*)buffer++;
                                *__m__ = ros->ivi.optional[0].elements[e].tc[0].elements[m].data.values[u];
                            }
                            
                            if(*_ext_flag_3008) {
                            }
                    }
                
                }
                else if(ros->ivi.optional[0].elements[e].lac.size() != 0)  // CHOICE 4  fieldType(IviContainer) 
                {
                    *_choice_159 = 4;  // Setting choice selection
                
                    if(debug)
                        logger->debug() << "|\033[38;5;94m005714\033[0m| Choice selection: 4";
                
                        // LayoutContainer  SEQUENCE
                            //  layoutId         LayoutContainer_layoutId             
                            //  height           LayoutContainer_height             OPTIONAL  
                            //  width            LayoutContainer_width              OPTIONAL  
                            //  layoutComponents LayoutContainer_layoutComponents     
                            //  ...
                        uint8_t* _ext_flag_3023 = (uint8_t*) buffer++;  // Write extension flag for LayoutContainer
                        *_ext_flag_3023 = 0;  
                        
                        // Optional fields bytemap
                        char* _tmp_6210 = (char*) buffer++;
                        *_tmp_6210 = (ros->ivi.optional[0].elements[e].lac[0].height.size() != 0 ? 1 : 0);
                        if(debug)
                            logger->debug() << "|\033[38;5;94m005715\033[0m| Optional field height = " << *_tmp_6210;
                        char* _tmp_6211 = (char*) buffer++;
                        *_tmp_6211 = (ros->ivi.optional[0].elements[e].lac[0].width.size() != 0 ? 1 : 0);
                        if(debug)
                            logger->debug() << "|\033[38;5;94m005716\033[0m| Optional field width = " << *_tmp_6211;
                        
                        // Field:  type(LayoutContainer_layoutId) name(layout_id) extGroup(0)
                        // Integer
                        
                        // UINT8  min(1) max(4) span(4) dataType(UInt8)
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m005717\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].lac[0].layout_id.value) << 
                                         " ivi.optional[0].elements[e].lac[0].layout_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].lac[0].layout_id.value);
                        }
                        
                        uint8_t* _ext_flag_3024 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].lac[0].layout_id.
                        *_ext_flag_3024 = (ros->ivi.optional[0].elements[e].lac[0].layout_id.value >= 1 && ros->ivi.optional[0].elements[e].lac[0].layout_id.value <= 4) ? 0 : 1;
                        
                        if(*_ext_flag_3024) {
                            uint8_t* _tmp_6213 = (uint8_t*) buffer++; 
                            if(ros->ivi.optional[0].elements[e].lac[0].layout_id.value >= 0 && ros->ivi.optional[0].elements[e].lac[0].layout_id.value <= INT32_MAX) {
                                *_tmp_6213 = 0;
                            
                                uint32_t* _tmp_6212 = (uint32_t*)buffer; buffer += 4;
                                __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_id.value;
                                __aux64__ -= INT32_MIN;
                                *_tmp_6212 = __aux64__;
                            } 
                            else
                            {
                                *_tmp_6213 = 1;
                            
                                uint64_t* _tmp_6212 = (uint64_t*)buffer; buffer += 8;
                                __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_id.value;
                                __aux64__ -= INT64_MIN;
                                *_tmp_6212 = __aux64__;
                            }
                        } else {
                            uint8_t* _tmp_6212 = (uint8_t*) buffer++;
                            __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_id.value - 1;
                            *_tmp_6212 = __aux64__;
                            __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_id.value;
                        }
                        
                        if(ros->ivi.optional[0].elements[e].lac[0].height.size() != 0) {
                            // Field:  type(LayoutContainer_height) name(height) extGroup(0)
                            // Integer
                            
                            // UINT8  min(10) max(73) span(64) dataType(UInt8)
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m005718\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].lac[0].height[0].value) << 
                                             " ivi.optional[0].elements[e].lac[0].height[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].lac[0].height[0].value);
                            }
                            
                            uint8_t* _tmp_6214 = (uint8_t*) buffer++;
                            __aux64__ = ros->ivi.optional[0].elements[e].lac[0].height[0].value - 10;
                            *_tmp_6214 = __aux64__;
                            __aux64__ = ros->ivi.optional[0].elements[e].lac[0].height[0].value;
                            
                            // MIN validator
                            if (VALIDATORS_ENABLED && __aux64__ < 10) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].lac[0].height[0].value' (" << __aux64__ << ") less than (10); message dropped.";
                                return -1;
                            }
                            // MAX validator
                            if (VALIDATORS_ENABLED && __aux64__ > 73) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].lac[0].height[0].value' (" << __aux64__ << ") exceeds max allowable (73); message dropped.";
                                return -1;
                            }
                        }
                        
                        if(ros->ivi.optional[0].elements[e].lac[0].width.size() != 0) {
                            // Field:  type(LayoutContainer_width) name(width) extGroup(0)
                            // Integer
                            
                            // UINT16  min(10) max(265) span(256) dataType(UInt16)
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m005719\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].lac[0].width[0].value) << 
                                             " ivi.optional[0].elements[e].lac[0].width[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[e].lac[0].width[0].value);
                            }
                            
                            uint8_t* _tmp_6215 = (uint8_t*) buffer++;
                            __aux64__ = ros->ivi.optional[0].elements[e].lac[0].width[0].value - 10;
                            *_tmp_6215 = __aux64__;
                            __aux64__ = ros->ivi.optional[0].elements[e].lac[0].width[0].value;
                            
                            // MIN validator
                            if (VALIDATORS_ENABLED && __aux64__ < 10) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].lac[0].width[0].value' (" << __aux64__ << ") less than (10); message dropped.";
                                return -1;
                            }
                            // MAX validator
                            if (VALIDATORS_ENABLED && __aux64__ > 265) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].lac[0].width[0].value' (" << __aux64__ << ") exceeds max allowable (265); message dropped.";
                                return -1;
                            }
                        }
                        
                        // Field:  type(LayoutContainer_layoutComponents) name(layout_components) extGroup(0)
                        // SequenceOf
                        // Data Type UInt8
                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                        uint8_t* _ext_flag_3027 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[e].lac[0].layout_components.
                        *_ext_flag_3027 = 0; 
                        
                        __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_components.elements.size();
                        if(__aux64__ > 4) __aux64__ = 4;
                        uint16_t* _tmp_6216 = (uint16_t*)buffer;
                        buffer += 2;
                        *_tmp_6216 = __aux64__ - 1;
                        
                        int __ifv = __aux64__;
                        for(int v = 0; v < __ifv; v++) { 
                            
                                // LayoutComponent  SEQUENCE
                                    //  layoutComponentId LayoutComponent_layoutComponentId     
                                    //  height            LayoutComponent_height                
                                    //  width             LayoutComponent_width                 
                                    //  x                 LayoutComponent_x                     
                                    //  y                 LayoutComponent_y                     
                                    //  textScripting     LayoutComponent_textScripting         
                                // Optional fields bytemap
                                
                                // Field:  type(LayoutComponent_layoutComponentId) name(layout_component_id) extGroup(0)
                                // Integer
                                
                                // UINT8  min(1) max(8) span(8) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005721\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].layout_component_id.value) << 
                                                 " ivi.optional[0].elements[e].lac[0].layout_components.elements[v].layout_component_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].layout_component_id.value);
                                }
                                
                                uint8_t* _ext_flag_3028 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].layout_component_id.
                                *_ext_flag_3028 = (ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].layout_component_id.value >= 1 && ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].layout_component_id.value <= 8) ? 0 : 1;
                                
                                if(*_ext_flag_3028) {
                                    uint8_t* _tmp_6218 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].layout_component_id.value >= 0 && ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].layout_component_id.value <= INT32_MAX) {
                                        *_tmp_6218 = 0;
                                    
                                        uint32_t* _tmp_6217 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].layout_component_id.value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_6217 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_6218 = 1;
                                    
                                        uint64_t* _tmp_6217 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].layout_component_id.value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_6217 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_6217 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].layout_component_id.value - 1;
                                    *_tmp_6217 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].layout_component_id.value;
                                }
                                
                                // Field:  type(LayoutComponent_height) name(height) extGroup(0)
                                // Integer
                                
                                // UINT8  min(10) max(73) span(64) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005722\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].height.value) << 
                                                 " ivi.optional[0].elements[e].lac[0].layout_components.elements[v].height.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].height.value);
                                }
                                
                                uint8_t* _tmp_6219 = (uint8_t*) buffer++;
                                __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].height.value - 10;
                                *_tmp_6219 = __aux64__;
                                __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].height.value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].lac[0].layout_components.elements[v].height.value' (" << __aux64__ << ") less than (10); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 73) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].lac[0].layout_components.elements[v].height.value' (" << __aux64__ << ") exceeds max allowable (73); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(LayoutComponent_width) name(width) extGroup(0)
                                // Integer
                                
                                // UINT16  min(10) max(265) span(256) dataType(UInt16)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005723\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].width.value) << 
                                                 " ivi.optional[0].elements[e].lac[0].layout_components.elements[v].width.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].width.value);
                                }
                                
                                uint8_t* _tmp_6220 = (uint8_t*) buffer++;
                                __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].width.value - 10;
                                *_tmp_6220 = __aux64__;
                                __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].width.value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].lac[0].layout_components.elements[v].width.value' (" << __aux64__ << ") less than (10); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 265) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].lac[0].layout_components.elements[v].width.value' (" << __aux64__ << ") exceeds max allowable (265); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(LayoutComponent_x) name(x) extGroup(0)
                                // Integer
                                
                                // UINT16  min(10) max(265) span(256) dataType(UInt16)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005724\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].x.value) << 
                                                 " ivi.optional[0].elements[e].lac[0].layout_components.elements[v].x.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].x.value);
                                }
                                
                                uint8_t* _tmp_6221 = (uint8_t*) buffer++;
                                __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].x.value - 10;
                                *_tmp_6221 = __aux64__;
                                __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].x.value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].lac[0].layout_components.elements[v].x.value' (" << __aux64__ << ") less than (10); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 265) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].lac[0].layout_components.elements[v].x.value' (" << __aux64__ << ") exceeds max allowable (265); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(LayoutComponent_y) name(y) extGroup(0)
                                // Integer
                                
                                // UINT8  min(10) max(73) span(64) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005725\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].y.value) << 
                                                 " ivi.optional[0].elements[e].lac[0].layout_components.elements[v].y.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].y.value);
                                }
                                
                                uint8_t* _tmp_6222 = (uint8_t*) buffer++;
                                __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].y.value - 10;
                                *_tmp_6222 = __aux64__;
                                __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].y.value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].lac[0].layout_components.elements[v].y.value' (" << __aux64__ << ") less than (10); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 73) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].lac[0].layout_components.elements[v].y.value' (" << __aux64__ << ") exceeds max allowable (73); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(LayoutComponent_textScripting) name(text_scripting) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(1) span(2) dataType(UInt8)
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005726\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].text_scripting.value) << 
                                                 " ivi.optional[0].elements[e].lac[0].layout_components.elements[v].text_scripting.value: " << static_cast<int>(ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].text_scripting.value);
                                }
                                
                                uint8_t* _tmp_6223 = (uint8_t*) buffer++;
                                *_tmp_6223 = ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].text_scripting.value; 
                                __aux64__ = ros->ivi.optional[0].elements[e].lac[0].layout_components.elements[v].text_scripting.value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].lac[0].layout_components.elements[v].text_scripting.value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[e].lac[0].layout_components.elements[v].text_scripting.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                    return -1;
                                }
                                
                        }
                        
                        if(*_ext_flag_3023) {
                        }
                
                }
                else
                {
                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_159) << ") selected in CHOICE IviContainer in 'ivi.optional[0].elements[e]'; message dropped.";
                    return -1;
                }
            }
        }
    
	
            return buffer - start;
        }
    } 
}