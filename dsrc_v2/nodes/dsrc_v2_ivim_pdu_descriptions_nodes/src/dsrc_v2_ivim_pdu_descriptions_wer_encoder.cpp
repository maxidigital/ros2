/*
 *
 * Copyright (C) German Aerospace Center e.V. (https://www.dlr.de)
 * Institute of Transportation Systems. (https://www.dlr.de/ts/)
 *
 * 
 * Eclipse ADORe, Automated Driving Open Research https://eclipse.org/adore
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 *
 * 
 * File automatically generated with DLR Wind v2
 * 
 * This file belongs to the DLR Wind project de.dlr.ts.v2x:dsrc_v2:4.0
 * 
 * Module: IVIM_PDU_Descriptions {itu-t(0) identified-organization(4) etsi(0) itsDomain(5) 
 *         wg1(1) en(103301) ivim(2) version2(2)}
 * 
 * For support contact v2x-ts@dlr.de
 * 
 *
 */
#include <dsrc_v2_ivim_pdu_descriptions_wer_encoder.h>

namespace wind
{
    namespace encoder_dsrc_v2_ivim_pdu_descriptions
    {
        WerEncoder::WerEncoder(ScreenLogger* logger, bool debug) 
            : logger(logger), debug(debug) {
        }

        WerEncoder::~WerEncoder() {            
        }
        

        #if WIND_ROS_VERSION == 1
          int WerEncoder::encode(const dsrc_v2_ivim_pdu_descriptions_msgs::IVIM::ConstPtr& ros, const uint8_t *buffer)
		#else
		  int WerEncoder::encode(const std::shared_ptr<dsrc_v2_ivim_pdu_descriptions_msgs::msg::IVIM>& ros, const uint8_t *buffer)
          //int WerEncoder::encode(const dsrc_v2_ivim_pdu_descriptions_msgs::msg::IVIM* ros, const uint8_t *buffer)
		#endif
		{
            const uint8_t *start = buffer;
            int64_t __aux64__;

    // IVIM  SEQUENCE
        //  header     ItsPduHeader     
        //  ivi        IviStructure     
    // Optional fields bytemap
    
    // Field:  type(ItsPduHeader) name(hheader) extGroup(0)
        // ItsPduHeader  SEQUENCE
            //  protocolVersion ItsPduHeader_protocolVersion     
            //  messageID       ItsPduHeader_messageID           
            //  stationID       StationID                        
        // Optional fields bytemap
        
        // Field:  type(ItsPduHeader_protocolVersion) name(protocol_version) extGroup(0)
        // Integer
        
        // UINT8  min(0) max(255) span(256) dataType(UInt8)
        if(debug) {
            logger->print() << "|\033[38;5;94m000000\033[0m| " << tools::getTypeName(ros->hheader.protocol_version.value) << 
                         " hheader.protocol_version.value: " << static_cast<int>(ros->hheader.protocol_version.value);
        }
        
        uint8_t* _tmp_1 = (uint8_t*) buffer++;
        *_tmp_1 = ros->hheader.protocol_version.value; 
        __aux64__ = ros->hheader.protocol_version.value;
        
        // MIN validator
        if (VALIDATORS_ENABLED && __aux64__ < 0) {
            logger->warning() << "Error: Value in 'hheader.protocol_version.value' (" << __aux64__ << ") less than (0); message dropped.";
            return -1;
        }
        // MAX validator
        if (VALIDATORS_ENABLED && __aux64__ > 255) {
            logger->warning() << "Error: Value in 'hheader.protocol_version.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
            return -1;
        }
        
        // Field:  type(ItsPduHeader_messageID) name(message_id) extGroup(0)
        // Integer
        
        // UINT8  min(0) max(255) span(256) dataType(UInt8)
        if(debug) {
            logger->print() << "|\033[38;5;94m000001\033[0m| " << tools::getTypeName(ros->hheader.message_id.value) << 
                         " hheader.message_id.value: " << static_cast<int>(ros->hheader.message_id.value);
        }
        
        uint8_t* _tmp_2 = (uint8_t*) buffer++;
        *_tmp_2 = ros->hheader.message_id.value; 
        __aux64__ = ros->hheader.message_id.value;
        
        // MIN validator
        if (VALIDATORS_ENABLED && __aux64__ < 0) {
            logger->warning() << "Error: Value in 'hheader.message_id.value' (" << __aux64__ << ") less than (0); message dropped.";
            return -1;
        }
        // MAX validator
        if (VALIDATORS_ENABLED && __aux64__ > 255) {
            logger->warning() << "Error: Value in 'hheader.message_id.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
            return -1;
        }
        
        // Field:  type(StationID) name(station_id) extGroup(0)
        // Integer
        
        // UINT32  min(0) max(4294967295) span(4294967296) dataType(UInt32)
        if(debug) {
            logger->print() << "|\033[38;5;94m000002\033[0m| " << tools::getTypeName(ros->hheader.station_id.value) << 
                         " hheader.station_id.value: " << ros->hheader.station_id.value;
        }
        
        uint32_t* _tmp_3 = (uint32_t*) buffer; buffer += 4;
        *_tmp_3 = ros->hheader.station_id.value; 
        __aux64__ = ros->hheader.station_id.value;
        
        // MIN validator
        if (VALIDATORS_ENABLED && __aux64__ < 0) {
            logger->warning() << "Error: Value in 'hheader.station_id.value' (" << __aux64__ << ") less than (0); message dropped.";
            return -1;
        }
        // MAX validator
        if (VALIDATORS_ENABLED && __aux64__ > 4294967295) {
            logger->warning() << "Error: Value in 'hheader.station_id.value' (" << __aux64__ << ") exceeds max allowable (4294967295); message dropped.";
            return -1;
        }
    
    // Field:  type(IviStructure) name(ivi) extGroup(0)
        // IviStructure  SEQUENCE
            //  mandatory  IVIManagementContainer     
            //  optional   IviStructure_optional    OPTIONAL  
        // Optional fields bytemap
        char* _tmp_4 = (char*) buffer++;
        *_tmp_4 = (ros->ivi.optional.size() != 0 ? 1 : 0);
        if(debug)
            logger->print() << "|\033[38;5;94m000003\033[0m| Optional field optional = " << *_tmp_4;
        
        // Field:  type(IVIManagementContainer) name(mandatory) extGroup(0)
            // IVIManagementContainer  SEQUENCE
                //  serviceProviderId       Provider                                          
                //  iviIdentificationNumber IviIdentificationNumber                           
                //  timeStamp               TimestampIts                                    OPTIONAL  
                //  validFrom               TimestampIts                                    OPTIONAL  
                //  validTo                 TimestampIts                                    OPTIONAL  
                //  connectedIviStructures  IVIManagementContainer_connectedIviStructures   OPTIONAL  
                //  iviStatus               IviStatus                                         
                //  ...
            uint8_t* _ext_flag_4 = (uint8_t*) buffer++;  // Write extension flag for IVIManagementContainer
            *_ext_flag_4 = 0;  
            
            // Optional fields bytemap
            char* _tmp_5 = (char*) buffer++;
            *_tmp_5 = (ros->ivi.mandatory.time_stamp.size() != 0 ? 1 : 0);
            if(debug)
                logger->print() << "|\033[38;5;94m000004\033[0m| Optional field time_stamp = " << *_tmp_5;
            char* _tmp_6 = (char*) buffer++;
            *_tmp_6 = (ros->ivi.mandatory.valid_from.size() != 0 ? 1 : 0);
            if(debug)
                logger->print() << "|\033[38;5;94m000005\033[0m| Optional field valid_from = " << *_tmp_6;
            char* _tmp_7 = (char*) buffer++;
            *_tmp_7 = (ros->ivi.mandatory.valid_to.size() != 0 ? 1 : 0);
            if(debug)
                logger->print() << "|\033[38;5;94m000006\033[0m| Optional field valid_to = " << *_tmp_7;
            char* _tmp_8 = (char*) buffer++;
            *_tmp_8 = (ros->ivi.mandatory.connected_ivi_structures.size() != 0 ? 1 : 0);
            if(debug)
                logger->print() << "|\033[38;5;94m000007\033[0m| Optional field connected_ivi_structures = " << *_tmp_8;
            
            // Field:  type(Provider) name(service_provider_id) extGroup(0)
                // Provider  SEQUENCE
                    //  countryCode        CountryCode          
                    //  providerIdentifier IssuerIdentifier     
                // Optional fields bytemap
                
                // Field:  type(CountryCode) name(country_code) extGroup(0)
                // BitString
                // BIT_STRING  min(10) max(10) span(1)
                if(debug)
                    logger->print() << "|\033[38;5;94m000008\033[0m| ivi.mandatory.service_provider_id.country_code.value: " << static_cast<int>(ros->ivi.mandatory.service_provider_id.country_code.values.size());
                
                if(ros->ivi.mandatory.service_provider_id.country_code.values.size() < 10) {
                        logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.country_code.value' " << (ros->ivi.mandatory.service_provider_id.country_code.values.size()) << " is less than allowable (10); message dropped.";
                    return -1;
                }
                if(ros->ivi.mandatory.service_provider_id.country_code.values.size() > 10) {
                        logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.country_code.value' " << (ros->ivi.mandatory.service_provider_id.country_code.values.size()) << " exceeds max allowable (10); message dropped.";
                    return -1;
                }
                
                uint8_t* _tmp_9 = (uint8_t*)buffer;
                __aux64__ = ros->ivi.mandatory.service_provider_id.country_code.values.size();
                if(__aux64__ > 10) __aux64__ = 10;
                *_tmp_9 = __aux64__ - 10;
                buffer += 1;
                
                int __ifa = __aux64__;
                for(int a = 0; a < __ifa; a++) {
                    uint8_t* __b__ = (uint8_t*)buffer++;
                    *__b__ = (ros->ivi.mandatory.service_provider_id.country_code.values[a]? 1: 0);
                }
                
                // Field:  type(IssuerIdentifier) name(provider_identifier) extGroup(0)
                // Integer
                
                // UINT16  min(0) max(16383) span(16384) dataType(UInt16)
                if(debug) {
                    logger->print() << "|\033[38;5;94m000009\033[0m| " << tools::getTypeName(ros->ivi.mandatory.service_provider_id.provider_identifier.value) << 
                                 " ivi.mandatory.service_provider_id.provider_identifier.value: " << ros->ivi.mandatory.service_provider_id.provider_identifier.value;
                }
                
                uint16_t* _tmp_10 = (uint16_t*) buffer; buffer += 2;
                *_tmp_10 = ros->ivi.mandatory.service_provider_id.provider_identifier.value; 
                __aux64__ = ros->ivi.mandatory.service_provider_id.provider_identifier.value;
                
                // MIN validator
                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.provider_identifier.value' (" << __aux64__ << ") less than (0); message dropped.";
                    return -1;
                }
                // MAX validator
                if (VALIDATORS_ENABLED && __aux64__ > 16383) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.provider_identifier.value' (" << __aux64__ << ") exceeds max allowable (16383); message dropped.";
                    return -1;
                }
            
            // Field:  type(IviIdentificationNumber) name(ivi_identification_number) extGroup(0)
            // Integer
            
            // UINT16  min(1) max(32767) span(32767) dataType(UInt16)
            if(debug) {
                logger->print() << "|\033[38;5;94m000010\033[0m| " << tools::getTypeName(ros->ivi.mandatory.ivi_identification_number.value) << 
                             " ivi.mandatory.ivi_identification_number.value: " << ros->ivi.mandatory.ivi_identification_number.value;
            }
            
            uint8_t* _ext_flag_6 = (uint8_t*) buffer++; // Extension flag for ros->ivi.mandatory.ivi_identification_number.
            *_ext_flag_6 = (ros->ivi.mandatory.ivi_identification_number.value >= 1 && ros->ivi.mandatory.ivi_identification_number.value <= 32767) ? 0 : 1;
            
            if(*_ext_flag_6) {
                uint8_t* _tmp_12 = (uint8_t*) buffer++; 
                if(ros->ivi.mandatory.ivi_identification_number.value >= 0 && ros->ivi.mandatory.ivi_identification_number.value <= INT32_MAX) {
                    *_tmp_12 = 0;
                
                    uint32_t* _tmp_11 = (uint32_t*)buffer; buffer += 4;
                    __aux64__ = ros->ivi.mandatory.ivi_identification_number.value;
                    __aux64__ -= INT32_MIN;
                    *_tmp_11 = __aux64__;
                } 
                else
                {
                    *_tmp_12 = 1;
                
                    uint64_t* _tmp_11 = (uint64_t*)buffer; buffer += 8;
                    __aux64__ = ros->ivi.mandatory.ivi_identification_number.value;
                    __aux64__ -= INT64_MIN;
                    *_tmp_11 = __aux64__;
                }
            } else {
                uint16_t* _tmp_11 = (uint16_t*) buffer; buffer += 2;
                __aux64__ = ros->ivi.mandatory.ivi_identification_number.value - 1;
                *_tmp_11 = __aux64__;
                __aux64__ = ros->ivi.mandatory.ivi_identification_number.value;
            }
            
            if(ros->ivi.mandatory.time_stamp.size() != 0) {
                // Field:  type(TimestampIts) name(time_stamp) extGroup(0)
                // Integer
                
                // INT64  min(0) max(4398046511103) span(4398046511104) dataType(Int64)
                if(debug) {
                    logger->print() << "|\033[38;5;94m000011\033[0m| " << tools::getTypeName(ros->ivi.mandatory.time_stamp[0].value) << 
                                 " ivi.mandatory.time_stamp[0].value: " << ros->ivi.mandatory.time_stamp[0].value;
                }
                
                uint64_t* _tmp_13 = (uint64_t*)buffer; buffer += 8;
                *_tmp_13 = ros->ivi.mandatory.time_stamp[0].value; 
                __aux64__ = ros->ivi.mandatory.time_stamp[0].value;
                
                // MIN validator
                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.time_stamp[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                    return -1;
                }
                // MAX validator
                if (VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.time_stamp[0].value' (" << __aux64__ << ") exceeds max allowable (4398046511103); message dropped.";
                    return -1;
                }
            }
            
            if(ros->ivi.mandatory.valid_from.size() != 0) {
                // Field:  type(TimestampIts) name(valid_from) extGroup(0)
                // Integer
                
                // INT64  min(0) max(4398046511103) span(4398046511104) dataType(Int64)
                if(debug) {
                    logger->print() << "|\033[38;5;94m000012\033[0m| " << tools::getTypeName(ros->ivi.mandatory.valid_from[0].value) << 
                                 " ivi.mandatory.valid_from[0].value: " << ros->ivi.mandatory.valid_from[0].value;
                }
                
                uint64_t* _tmp_14 = (uint64_t*)buffer; buffer += 8;
                *_tmp_14 = ros->ivi.mandatory.valid_from[0].value; 
                __aux64__ = ros->ivi.mandatory.valid_from[0].value;
                
                // MIN validator
                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_from[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                    return -1;
                }
                // MAX validator
                if (VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_from[0].value' (" << __aux64__ << ") exceeds max allowable (4398046511103); message dropped.";
                    return -1;
                }
            }
            
            if(ros->ivi.mandatory.valid_to.size() != 0) {
                // Field:  type(TimestampIts) name(valid_to) extGroup(0)
                // Integer
                
                // INT64  min(0) max(4398046511103) span(4398046511104) dataType(Int64)
                if(debug) {
                    logger->print() << "|\033[38;5;94m000013\033[0m| " << tools::getTypeName(ros->ivi.mandatory.valid_to[0].value) << 
                                 " ivi.mandatory.valid_to[0].value: " << ros->ivi.mandatory.valid_to[0].value;
                }
                
                uint64_t* _tmp_15 = (uint64_t*)buffer; buffer += 8;
                *_tmp_15 = ros->ivi.mandatory.valid_to[0].value; 
                __aux64__ = ros->ivi.mandatory.valid_to[0].value;
                
                // MIN validator
                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_to[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                    return -1;
                }
                // MAX validator
                if (VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_to[0].value' (" << __aux64__ << ") exceeds max allowable (4398046511103); message dropped.";
                    return -1;
                }
            }
            
            if(ros->ivi.mandatory.connected_ivi_structures.size() != 0) {
                // Field:  type(IVIManagementContainer_connectedIviStructures) name(connected_ivi_structures) extGroup(0)
                // SequenceOf
                // Data Type UInt8
                // SEQUENCE_OF  min(1) max(8) span(8) ext(false)
                __aux64__ = ros->ivi.mandatory.connected_ivi_structures[0].elements.size();
                if(__aux64__ > 8) __aux64__ = 8;
                uint16_t* _tmp_16 = (uint16_t*)buffer;
                buffer += 2;
                *_tmp_16 = __aux64__ - 1;
                
                int __ifb = __aux64__;
                for(int b = 0; b < __ifb; b++) { 
                    
                    // Integer
                    
                    // UINT16  min(1) max(32767) span(32767) dataType(UInt16)
                    if(debug) {
                        logger->print() << "|\033[38;5;94m000015\033[0m| " << tools::getTypeName(ros->ivi.mandatory.connected_ivi_structures[0].elements[b].value) << 
                                     " ivi.mandatory.connected_ivi_structures[0].elements[b].value: " << ros->ivi.mandatory.connected_ivi_structures[0].elements[b].value;
                    }
                    
                    uint8_t* _ext_flag_10 = (uint8_t*) buffer++; // Extension flag for ros->ivi.mandatory.connected_ivi_structures[0].elements[b].
                    *_ext_flag_10 = (ros->ivi.mandatory.connected_ivi_structures[0].elements[b].value >= 1 && ros->ivi.mandatory.connected_ivi_structures[0].elements[b].value <= 32767) ? 0 : 1;
                    
                    if(*_ext_flag_10) {
                        uint8_t* _tmp_18 = (uint8_t*) buffer++; 
                        if(ros->ivi.mandatory.connected_ivi_structures[0].elements[b].value >= 0 && ros->ivi.mandatory.connected_ivi_structures[0].elements[b].value <= INT32_MAX) {
                            *_tmp_18 = 0;
                        
                            uint32_t* _tmp_17 = (uint32_t*)buffer; buffer += 4;
                            __aux64__ = ros->ivi.mandatory.connected_ivi_structures[0].elements[b].value;
                            __aux64__ -= INT32_MIN;
                            *_tmp_17 = __aux64__;
                        } 
                        else
                        {
                            *_tmp_18 = 1;
                        
                            uint64_t* _tmp_17 = (uint64_t*)buffer; buffer += 8;
                            __aux64__ = ros->ivi.mandatory.connected_ivi_structures[0].elements[b].value;
                            __aux64__ -= INT64_MIN;
                            *_tmp_17 = __aux64__;
                        }
                    } else {
                        uint16_t* _tmp_17 = (uint16_t*) buffer; buffer += 2;
                        __aux64__ = ros->ivi.mandatory.connected_ivi_structures[0].elements[b].value - 1;
                        *_tmp_17 = __aux64__;
                        __aux64__ = ros->ivi.mandatory.connected_ivi_structures[0].elements[b].value;
                    }
                }
            }
            
            // Field:  type(IviStatus) name(ivi_status) extGroup(0)
            // Integer
            
            // UINT8  min(0) max(7) span(8) dataType(UInt8)
            if(debug) {
                logger->print() << "|\033[38;5;94m000016\033[0m| " << tools::getTypeName(ros->ivi.mandatory.ivi_status.value) << 
                             " ivi.mandatory.ivi_status.value: " << static_cast<int>(ros->ivi.mandatory.ivi_status.value);
            }
            
            uint8_t* _tmp_19 = (uint8_t*) buffer++;
            *_tmp_19 = ros->ivi.mandatory.ivi_status.value; 
            __aux64__ = ros->ivi.mandatory.ivi_status.value;
            
            // MIN validator
            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                logger->warning() << "Error: Value in 'ivi.mandatory.ivi_status.value' (" << __aux64__ << ") less than (0); message dropped.";
                return -1;
            }
            // MAX validator
            if (VALIDATORS_ENABLED && __aux64__ > 7) {
                logger->warning() << "Error: Value in 'ivi.mandatory.ivi_status.value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                return -1;
            }
            
            if(*_ext_flag_4) {
            }
        
        if(ros->ivi.optional.size() != 0) {
            // Field:  type(IviStructure_optional) name(optional) extGroup(0)
            // SequenceOf
            // Data Type UInt8
            // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
            uint8_t* _ext_flag_12 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].
            *_ext_flag_12 = 0; 
            
            __aux64__ = ros->ivi.optional[0].elements.size();
            if(__aux64__ > 8) __aux64__ = 8;
            uint16_t* _tmp_21 = (uint16_t*)buffer;
            buffer += 2;
            *_tmp_21 = __aux64__ - 1;
            
            int __ifc = __aux64__;
            for(int c = 0; c < __ifc; c++) { 
                
                // Choice
                   // #0  glc   GeographicLocationContainer
                   // #1  giv   GeneralIviContainer
                   // #2  rcc   RoadConfigurationContainer
                   // #3  tc   TextContainer
                   // #4  lac   LayoutContainer
                uint8_t* _ext_flag_13 = (uint8_t*) buffer; 
                buffer++;
                *_ext_flag_13 = 0; 
                
                uint8_t* _choice_1 = (uint8_t*) buffer;
                buffer++;
                
                if(ros->ivi.optional[0].elements[c].glc.size() != 0) {  // CHOICE 0  fieldType(IviContainer) 
                    *_choice_1 = 0;  // Setting choice selection
                
                    if(debug)
                        logger->debug() << "|\033[38;5;94m000018\033[0m| Choice selection: 0";
                
                        // GeographicLocationContainer  SEQUENCE
                            //  referencePosition        ReferencePosition                     
                            //  referencePositionTime    TimestampIts                        OPTIONAL  
                            //  referencePositionHeading Heading                             OPTIONAL  
                            //  referencePositionSpeed   Speed                               OPTIONAL  
                            //  parts                    GeographicLocationContainer_parts     
                            //  ...
                        uint8_t* _ext_flag_14 = (uint8_t*) buffer++;  // Write extension flag for GeographicLocationContainer
                        *_ext_flag_14 = 0;  
                        
                        // Optional fields bytemap
                        char* _tmp_22 = (char*) buffer++;
                        *_tmp_22 = (ros->ivi.optional[0].elements[c].glc[0].reference_position_time.size() != 0 ? 1 : 0);
                        if(debug)
                            logger->print() << "|\033[38;5;94m000019\033[0m| Optional field reference_position_time = " << *_tmp_22;
                        char* _tmp_23 = (char*) buffer++;
                        *_tmp_23 = (ros->ivi.optional[0].elements[c].glc[0].reference_position_heading.size() != 0 ? 1 : 0);
                        if(debug)
                            logger->print() << "|\033[38;5;94m000020\033[0m| Optional field reference_position_heading = " << *_tmp_23;
                        char* _tmp_24 = (char*) buffer++;
                        *_tmp_24 = (ros->ivi.optional[0].elements[c].glc[0].reference_position_speed.size() != 0 ? 1 : 0);
                        if(debug)
                            logger->print() << "|\033[38;5;94m000021\033[0m| Optional field reference_position_speed = " << *_tmp_24;
                        
                        // Field:  type(ReferencePosition) name(reference_position) extGroup(0)
                            // ReferencePosition  SEQUENCE
                                //  latitude                  Latitude                 
                                //  longitude                 Longitude                
                                //  positionConfidenceEllipse PosConfidenceEllipse     
                                //  altitude                  Altitude                 
                            // Optional fields bytemap
                            
                            // Field:  type(Latitude) name(latitude) extGroup(0)
                            // Real
                            
                            // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                            if(debug) {
                                logger->print() << "|\033[38;5;94m000022\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position.latitude.value) << 
                                             " ivi.optional[0].elements[c].glc[0].reference_position.latitude.value: " << ros->ivi.optional[0].elements[c].glc[0].reference_position.latitude.value;
                            }
                            
                            double _tmp_26 = ros->ivi.optional[0].elements[c].glc[0].reference_position.latitude.value;
                            _tmp_26 *= 1.0E7;
                            __aux64__ = static_cast<uint64_t>(_tmp_26);
                            _tmp_26 -= -900000000;
                            uint32_t* _tmp_25 = (uint32_t*) buffer; buffer += 4;
                            *_tmp_25 = static_cast<uint32_t>(_tmp_26);
                            
                            // MIN validator
                            if (VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.latitude.value' (" << __aux64__ << ") less than (-900000000); message dropped.";
                                return -1;
                            }
                            // MAX validator
                            if (VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.latitude.value' (" << __aux64__ << ") exceeds max allowable (900000001); message dropped.";
                                return -1;
                            }
                            
                            // Field:  type(Longitude) name(longitude) extGroup(0)
                            // Real
                            
                            // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                            if(debug) {
                                logger->print() << "|\033[38;5;94m000023\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position.longitude.value) << 
                                             " ivi.optional[0].elements[c].glc[0].reference_position.longitude.value: " << ros->ivi.optional[0].elements[c].glc[0].reference_position.longitude.value;
                            }
                            
                            double _tmp_28 = ros->ivi.optional[0].elements[c].glc[0].reference_position.longitude.value;
                            _tmp_28 *= 1.0E7;
                            __aux64__ = static_cast<uint64_t>(_tmp_28);
                            _tmp_28 -= -1800000000;
                            uint32_t* _tmp_27 = (uint32_t*) buffer; buffer += 4;
                            *_tmp_27 = static_cast<uint32_t>(_tmp_28);
                            
                            // MIN validator
                            if (VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.longitude.value' (" << __aux64__ << ") less than (-1800000000); message dropped.";
                                return -1;
                            }
                            // MAX validator
                            if (VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.longitude.value' (" << __aux64__ << ") exceeds max allowable (1800000001); message dropped.";
                                return -1;
                            }
                            
                            // Field:  type(PosConfidenceEllipse) name(position_confidence_ellipse) extGroup(0)
                                // PosConfidenceEllipse  SEQUENCE
                                    //  semiMajorConfidence  SemiAxisLength     
                                    //  semiMinorConfidence  SemiAxisLength     
                                    //  semiMajorOrientation HeadingValue       
                                // Optional fields bytemap
                                
                                // Field:  type(SemiAxisLength) name(semi_major_confidence) extGroup(0)
                                // Integer
                                
                                // UINT16  min(0) max(4095) span(4096) dataType(UInt16)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000024\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value) << 
                                                 " ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value: " << ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value;
                                }
                                
                                uint16_t* _tmp_29 = (uint16_t*) buffer; buffer += 2;
                                *_tmp_29 = ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value; 
                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 4095) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value' (" << __aux64__ << ") exceeds max allowable (4095); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(SemiAxisLength) name(semi_minor_confidence) extGroup(0)
                                // Integer
                                
                                // UINT16  min(0) max(4095) span(4096) dataType(UInt16)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000025\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value) << 
                                                 " ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value: " << ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value;
                                }
                                
                                uint16_t* _tmp_30 = (uint16_t*) buffer; buffer += 2;
                                *_tmp_30 = ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value; 
                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 4095) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value' (" << __aux64__ << ") exceeds max allowable (4095); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(HeadingValue) name(semi_major_orientation) extGroup(0)
                                // Real
                                
                                // FLOAT  min(0) max(3601) span(3602) scaleDivisor(10.0) dataType(Float)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000026\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value) << 
                                                 " ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value: " << ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value;
                                }
                                
                                float _tmp_32 = ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value;
                                _tmp_32 *= 10.0;
                                __aux64__ = static_cast<uint64_t>(_tmp_32);
                                uint16_t* _tmp_31 = (uint16_t*) buffer; buffer += 2;
                                *_tmp_31 = static_cast<uint16_t>(_tmp_32);
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 3601) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value' (" << __aux64__ << ") exceeds max allowable (3601); message dropped.";
                                    return -1;
                                }
                            
                            // Field:  type(Altitude) name(altitude) extGroup(0)
                                // Altitude  SEQUENCE
                                    //  altitudeValue      AltitudeValue          
                                    //  altitudeConfidence AltitudeConfidence     
                                // Optional fields bytemap
                                
                                // Field:  type(AltitudeValue) name(altitude_value) extGroup(0)
                                // Real
                                
                                // FLOAT  min(-100000) max(800001) span(900002) scaleDivisor(100.0) dataType(Float)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000027\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_value.value) << 
                                                 " ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_value.value: " << ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_value.value;
                                }
                                
                                float _tmp_34 = ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_value.value;
                                _tmp_34 *= 100.0;
                                __aux64__ = static_cast<uint64_t>(_tmp_34);
                                _tmp_34 -= -100000;
                                uint32_t* _tmp_33 = (uint32_t*) buffer; buffer += 4;
                                *_tmp_33 = static_cast<uint32_t>(_tmp_34);
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < -100000) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_value.value' (" << __aux64__ << ") less than (-100000); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 800001) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_value.value' (" << __aux64__ << ") exceeds max allowable (800001); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(AltitudeConfidence) name(altitude_confidence) extGroup(0)
                                // Enumerated
                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000028\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_confidence.value) << 
                                                 " ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_confidence.value);
                                }
                                
                                uint8_t* _tmp_35 = (uint8_t*)buffer;
                                buffer += 1;
                                *_tmp_35 = ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_confidence.value; 
                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_confidence.value; 
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_confidence.value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_confidence.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                    return -1;
                                }
                        
                        if(ros->ivi.optional[0].elements[c].glc[0].reference_position_time.size() != 0) {
                            // Field:  type(TimestampIts) name(reference_position_time) extGroup(0)
                            // Integer
                            
                            // INT64  min(0) max(4398046511103) span(4398046511104) dataType(Int64)
                            if(debug) {
                                logger->print() << "|\033[38;5;94m000029\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position_time[0].value) << 
                                             " ivi.optional[0].elements[c].glc[0].reference_position_time[0].value: " << ros->ivi.optional[0].elements[c].glc[0].reference_position_time[0].value;
                            }
                            
                            uint64_t* _tmp_36 = (uint64_t*)buffer; buffer += 8;
                            *_tmp_36 = ros->ivi.optional[0].elements[c].glc[0].reference_position_time[0].value; 
                            __aux64__ = ros->ivi.optional[0].elements[c].glc[0].reference_position_time[0].value;
                            
                            // MIN validator
                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_time[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                return -1;
                            }
                            // MAX validator
                            if (VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_time[0].value' (" << __aux64__ << ") exceeds max allowable (4398046511103); message dropped.";
                                return -1;
                            }
                        }
                        
                        if(ros->ivi.optional[0].elements[c].glc[0].reference_position_heading.size() != 0) {
                            // Field:  type(Heading) name(reference_position_heading) extGroup(0)
                                // Heading  SEQUENCE
                                    //  headingValue      HeadingValue          
                                    //  headingConfidence HeadingConfidence     
                                // Optional fields bytemap
                                
                                // Field:  type(HeadingValue) name(heading_value) extGroup(0)
                                // Real
                                
                                // FLOAT  min(0) max(3601) span(3602) scaleDivisor(10.0) dataType(Float)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000030\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_value.value) << 
                                                 " ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_value.value: " << ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_value.value;
                                }
                                
                                float _tmp_38 = ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_value.value;
                                _tmp_38 *= 10.0;
                                __aux64__ = static_cast<uint64_t>(_tmp_38);
                                uint16_t* _tmp_37 = (uint16_t*) buffer; buffer += 2;
                                *_tmp_37 = static_cast<uint16_t>(_tmp_38);
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 3601) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_value.value' (" << __aux64__ << ") exceeds max allowable (3601); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(HeadingConfidence) name(heading_confidence) extGroup(0)
                                // Real
                                
                                // FLOAT  min(1) max(127) span(127) scaleDivisor(10.0) dataType(Float)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000031\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_confidence.value) << 
                                                 " ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_confidence.value);
                                }
                                
                                float _tmp_40 = ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_confidence.value;
                                _tmp_40 *= 10.0;
                                __aux64__ = static_cast<uint64_t>(_tmp_40);
                                _tmp_40 -= 1;
                                uint8_t* _tmp_39 = (uint8_t*) buffer; buffer += 1;
                                *_tmp_39 = static_cast<uint8_t>(_tmp_40);
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_confidence.value' (" << __aux64__ << ") less than (1); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 127) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_confidence.value' (" << __aux64__ << ") exceeds max allowable (127); message dropped.";
                                    return -1;
                                }
                        }
                        
                        if(ros->ivi.optional[0].elements[c].glc[0].reference_position_speed.size() != 0) {
                            // Field:  type(Speed) name(reference_position_speed) extGroup(0)
                                // Speed  SEQUENCE
                                    //  speedValue      SpeedValue          
                                    //  speedConfidence SpeedConfidence     
                                // Optional fields bytemap
                                
                                // Field:  type(SpeedValue) name(speed_value) extGroup(0)
                                // Real
                                
                                // FLOAT  min(0) max(16383) span(16384) scaleDivisor(100.0) dataType(Float)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000032\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_value.value) << 
                                                 " ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_value.value: " << ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_value.value;
                                }
                                
                                float _tmp_42 = ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_value.value;
                                _tmp_42 *= 100.0;
                                __aux64__ = static_cast<uint64_t>(_tmp_42);
                                uint16_t* _tmp_41 = (uint16_t*) buffer; buffer += 2;
                                *_tmp_41 = static_cast<uint16_t>(_tmp_42);
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 16383) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_value.value' (" << __aux64__ << ") exceeds max allowable (16383); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(SpeedConfidence) name(speed_confidence) extGroup(0)
                                // Real
                                
                                // FLOAT  min(1) max(127) span(127) scaleDivisor(100.0) dataType(Float)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000033\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_confidence.value) << 
                                                 " ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_confidence.value);
                                }
                                
                                float _tmp_44 = ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_confidence.value;
                                _tmp_44 *= 100.0;
                                __aux64__ = static_cast<uint64_t>(_tmp_44);
                                _tmp_44 -= 1;
                                uint8_t* _tmp_43 = (uint8_t*) buffer; buffer += 1;
                                *_tmp_43 = static_cast<uint8_t>(_tmp_44);
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_confidence.value' (" << __aux64__ << ") less than (1); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 127) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_confidence.value' (" << __aux64__ << ") exceeds max allowable (127); message dropped.";
                                    return -1;
                                }
                        }
                        
                        // Field:  type(GeographicLocationContainer_parts) name(parts) extGroup(0)
                        // SequenceOf
                        // Data Type UInt8
                        // SEQUENCE_OF  min(1) max(16) span(16) ext(true)
                        uint8_t* _ext_flag_27 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].glc[0].parts.
                        *_ext_flag_27 = 0; 
                        
                        __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements.size();
                        if(__aux64__ > 16) __aux64__ = 16;
                        uint16_t* _tmp_45 = (uint16_t*)buffer;
                        buffer += 2;
                        *_tmp_45 = __aux64__ - 1;
                        
                        int __ifd = __aux64__;
                        for(int d = 0; d < __ifd; d++) { 
                            
                                // GlcPart  SEQUENCE
                                    //  zoneId        Zid                       
                                    //  laneNumber    LanePosition            OPTIONAL  
                                    //  zoneExtension GlcPart_zoneExtension   OPTIONAL  
                                    //  zoneHeading   HeadingValue            OPTIONAL  
                                    //  zone          Zone                    OPTIONAL  
                                    //  ...
                                uint8_t* _ext_flag_28 = (uint8_t*) buffer++;  // Write extension flag for GlcPart
                                *_ext_flag_28 = 0;  
                                
                                // Optional fields bytemap
                                char* _tmp_46 = (char*) buffer++;
                                *_tmp_46 = (ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number.size() != 0 ? 1 : 0);
                                if(debug)
                                    logger->print() << "|\033[38;5;94m000035\033[0m| Optional field lane_number = " << *_tmp_46;
                                char* _tmp_47 = (char*) buffer++;
                                *_tmp_47 = (ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension.size() != 0 ? 1 : 0);
                                if(debug)
                                    logger->print() << "|\033[38;5;94m000036\033[0m| Optional field zone_extension = " << *_tmp_47;
                                char* _tmp_48 = (char*) buffer++;
                                *_tmp_48 = (ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading.size() != 0 ? 1 : 0);
                                if(debug)
                                    logger->print() << "|\033[38;5;94m000037\033[0m| Optional field zone_heading = " << *_tmp_48;
                                char* _tmp_49 = (char*) buffer++;
                                *_tmp_49 = (ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone.size() != 0 ? 1 : 0);
                                if(debug)
                                    logger->print() << "|\033[38;5;94m000038\033[0m| Optional field zone = " << *_tmp_49;
                                
                                // Field:  type(Zid) name(zone_id) extGroup(0)
                                // Integer
                                
                                // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000039\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value) << 
                                                 " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value);
                                }
                                
                                uint8_t* _ext_flag_29 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.
                                *_ext_flag_29 = (ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value >= 1 && ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value <= 32) ? 0 : 1;
                                
                                if(*_ext_flag_29) {
                                    uint8_t* _tmp_51 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value >= 0 && ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value <= INT32_MAX) {
                                        *_tmp_51 = 0;
                                    
                                        uint32_t* _tmp_50 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_50 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_51 = 1;
                                    
                                        uint64_t* _tmp_50 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_50 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_50 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value - 1;
                                    *_tmp_50 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value;
                                }
                                
                                if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number.size() != 0) {
                                    // Field:  type(LanePosition) name(lane_number) extGroup(0)
                                    // Integer
                                    
                                    // INT8  min(-1) max(14) span(16) dataType(Int8)
                                    if(debug) {
                                        logger->print() << "|\033[38;5;94m000040\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number[0].value) << 
                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number[0].value);
                                    }
                                    
                                    uint8_t* _tmp_52 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number[0].value - -1;
                                    *_tmp_52 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number[0].value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number[0].value' (" << __aux64__ << ") less than (-1); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number[0].value' (" << __aux64__ << ") exceeds max allowable (14); message dropped.";
                                        return -1;
                                    }
                                }
                                
                                if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension.size() != 0) {
                                    // Field:  type(GlcPart_zoneExtension) name(zone_extension) extGroup(0)
                                    // Integer
                                    
                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                    if(debug) {
                                        logger->print() << "|\033[38;5;94m000041\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension[0].value) << 
                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension[0].value);
                                    }
                                    
                                    uint8_t* _tmp_53 = (uint8_t*) buffer++;
                                    *_tmp_53 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension[0].value; 
                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension[0].value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                        return -1;
                                    }
                                }
                                
                                if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading.size() != 0) {
                                    // Field:  type(HeadingValue) name(zone_heading) extGroup(0)
                                    // Real
                                    
                                    // FLOAT  min(0) max(3601) span(3602) scaleDivisor(10.0) dataType(Float)
                                    if(debug) {
                                        logger->print() << "|\033[38;5;94m000042\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading[0].value) << 
                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading[0].value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading[0].value;
                                    }
                                    
                                    float _tmp_55 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading[0].value;
                                    _tmp_55 *= 10.0;
                                    __aux64__ = static_cast<uint64_t>(_tmp_55);
                                    uint16_t* _tmp_54 = (uint16_t*) buffer; buffer += 2;
                                    *_tmp_54 = static_cast<uint16_t>(_tmp_55);
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 3601) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading[0].value' (" << __aux64__ << ") exceeds max allowable (3601); message dropped.";
                                        return -1;
                                    }
                                }
                                
                                if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone.size() != 0) {
                                    // Field:  type(Zone) name(zone) extGroup(0)
                                    // Choice
                                       // #0  segment   Segment
                                       // #1  area   PolygonalLine
                                       // #2  computedSegment   ComputedSegment
                                    uint8_t* _ext_flag_33 = (uint8_t*) buffer; 
                                    buffer++;
                                    *_ext_flag_33 = 0; 
                                    
                                    uint8_t* _choice_2 = (uint8_t*) buffer;
                                    buffer++;
                                    
                                    if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment.size() != 0) {  // CHOICE 0  fieldType(Zone) 
                                        *_choice_2 = 0;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000043\033[0m| Choice selection: 0";
                                    
                                            // Segment  SEQUENCE
                                                //  line       PolygonalLine     
                                                //  laneWidth  IVILaneWidth    OPTIONAL  
                                            // Optional fields bytemap
                                            char* _tmp_56 = (char*) buffer++;
                                            *_tmp_56 = (ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000044\033[0m| Optional field lane_width = " << *_tmp_56;
                                            
                                            // Field:  type(PolygonalLine) name(line) extGroup(0)
                                            // Choice
                                               // #0  deltaPositions   PolygonalLine_deltaPositions
                                               // #1  deltaPositionsWithAltitude   PolygonalLine_deltaPositionsWithAltitude
                                               // #2  absolutePositions   PolygonalLine_absolutePositions
                                               // #3  absolutePositionsWithAltitude   PolygonalLine_absolutePositionsWithAltitude
                                            uint8_t* _ext_flag_34 = (uint8_t*) buffer; 
                                            buffer++;
                                            *_ext_flag_34 = 0; 
                                            
                                            uint8_t* _choice_3 = (uint8_t*) buffer;
                                            buffer++;
                                            
                                            if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions.size() != 0) {  // CHOICE 0  fieldType(PolygonalLine) 
                                                *_choice_3   = 0 - 4;  // Setting choice selection
                                                *_ext_flag_34 = 1;      // setting ext flag
                                            
                                                uint16_t* _tmp_57_openType = (uint16_t*) buffer;  // OpenType length variable 
                                                buffer += 2;
                                                const uint8_t *_tmp_58_start = buffer; // Starting point
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000045\033[0m| Choice selection: 0";
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(32) span(32) ext(true)
                                                uint8_t* _ext_flag_35 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].
                                                *_ext_flag_35 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements.size();
                                                if(__aux64__ > 32) __aux64__ = 32;
                                                uint16_t* _tmp_59 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_59 = __aux64__ - 1;
                                                
                                                int __ife = __aux64__;
                                                for(int e = 0; e < __ife; e++) { 
                                                    
                                                        // DeltaPosition  SEQUENCE
                                                            //  deltaLatitude  DeltaLatitude      
                                                            //  deltaLongitude DeltaLongitude     
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(DeltaLatitude) name(delta_latitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000047\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_latitude.value) << 
                                                                         " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_latitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_latitude.value;
                                                        }
                                                        
                                                        double _tmp_61 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_latitude.value;
                                                        _tmp_61 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_61);
                                                        _tmp_61 -= -131071;
                                                        uint32_t* _tmp_60 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_60 = static_cast<uint32_t>(_tmp_61);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_latitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_latitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(DeltaLongitude) name(delta_longitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000048\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_longitude.value) << 
                                                                         " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_longitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_longitude.value;
                                                        }
                                                        
                                                        double _tmp_63 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_longitude.value;
                                                        _tmp_63 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_63);
                                                        _tmp_63 -= -131071;
                                                        uint32_t* _tmp_62 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_62 = static_cast<uint32_t>(_tmp_63);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_longitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_longitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                }
                                            
                                                *_tmp_57_openType = buffer - _tmp_58_start;  // OpenType length  
                                            }
                                            else if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude.size() != 0)  // CHOICE 1  fieldType(PolygonalLine) 
                                            {
                                                *_choice_3   = 1 - 4;  // Setting choice selection
                                                *_ext_flag_34 = 1;      // setting ext flag
                                            
                                                uint16_t* _tmp_64_openType = (uint16_t*) buffer;  // OpenType length variable 
                                                buffer += 2;
                                                const uint8_t *_tmp_65_start = buffer; // Starting point
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000049\033[0m| Choice selection: 1";
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(32) span(32) ext(true)
                                                uint8_t* _ext_flag_38 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].
                                                *_ext_flag_38 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements.size();
                                                if(__aux64__ > 32) __aux64__ = 32;
                                                uint16_t* _tmp_66 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_66 = __aux64__ - 1;
                                                
                                                int __iff = __aux64__;
                                                for(int f = 0; f < __iff; f++) { 
                                                    
                                                        // DeltaReferencePosition  SEQUENCE
                                                            //  deltaLatitude  DeltaLatitude      
                                                            //  deltaLongitude DeltaLongitude     
                                                            //  deltaAltitude  DeltaAltitude      
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(DeltaLatitude) name(delta_latitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000051\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_latitude.value) << 
                                                                         " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_latitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_latitude.value;
                                                        }
                                                        
                                                        double _tmp_68 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_latitude.value;
                                                        _tmp_68 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_68);
                                                        _tmp_68 -= -131071;
                                                        uint32_t* _tmp_67 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_67 = static_cast<uint32_t>(_tmp_68);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_latitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_latitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(DeltaLongitude) name(delta_longitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000052\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_longitude.value) << 
                                                                         " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_longitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_longitude.value;
                                                        }
                                                        
                                                        double _tmp_70 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_longitude.value;
                                                        _tmp_70 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_70);
                                                        _tmp_70 -= -131071;
                                                        uint32_t* _tmp_69 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_69 = static_cast<uint32_t>(_tmp_70);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_longitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_longitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(DeltaAltitude) name(delta_altitude) extGroup(0)
                                                        // Real
                                                        
                                                        // FLOAT  min(-12700) max(12800) span(25501) scaleDivisor(100.0) dataType(Float)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000053\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_altitude.value) << 
                                                                         " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_altitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_altitude.value;
                                                        }
                                                        
                                                        float _tmp_72 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_altitude.value;
                                                        _tmp_72 *= 100.0;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_72);
                                                        _tmp_72 -= -12700;
                                                        uint16_t* _tmp_71 = (uint16_t*) buffer; buffer += 2;
                                                        *_tmp_71 = static_cast<uint16_t>(_tmp_72);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -12700) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_altitude.value' (" << __aux64__ << ") less than (-12700); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 12800) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_altitude.value' (" << __aux64__ << ") exceeds max allowable (12800); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                }
                                            
                                                *_tmp_64_openType = buffer - _tmp_65_start;  // OpenType length  
                                            }
                                            else if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions.size() != 0)  // CHOICE 2  fieldType(PolygonalLine) 
                                            {
                                                *_choice_3   = 2 - 4;  // Setting choice selection
                                                *_ext_flag_34 = 1;      // setting ext flag
                                            
                                                uint16_t* _tmp_73_openType = (uint16_t*) buffer;  // OpenType length variable 
                                                buffer += 2;
                                                const uint8_t *_tmp_74_start = buffer; // Starting point
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000054\033[0m| Choice selection: 2";
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                                uint8_t* _ext_flag_42 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].
                                                *_ext_flag_42 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements.size();
                                                if(__aux64__ > 8) __aux64__ = 8;
                                                uint16_t* _tmp_75 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_75 = __aux64__ - 1;
                                                
                                                int __ifg = __aux64__;
                                                for(int g = 0; g < __ifg; g++) { 
                                                    
                                                        // AbsolutePosition  SEQUENCE
                                                            //  latitude   Latitude       
                                                            //  longitude  Longitude      
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(Latitude) name(latitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000056\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].latitude.value) << 
                                                                         " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].latitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].latitude.value;
                                                        }
                                                        
                                                        double _tmp_77 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].latitude.value;
                                                        _tmp_77 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_77);
                                                        _tmp_77 -= -900000000;
                                                        uint32_t* _tmp_76 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_76 = static_cast<uint32_t>(_tmp_77);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].latitude.value' (" << __aux64__ << ") less than (-900000000); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].latitude.value' (" << __aux64__ << ") exceeds max allowable (900000001); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(Longitude) name(longitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000057\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].longitude.value) << 
                                                                         " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].longitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].longitude.value;
                                                        }
                                                        
                                                        double _tmp_79 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].longitude.value;
                                                        _tmp_79 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_79);
                                                        _tmp_79 -= -1800000000;
                                                        uint32_t* _tmp_78 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_78 = static_cast<uint32_t>(_tmp_79);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].longitude.value' (" << __aux64__ << ") less than (-1800000000); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].longitude.value' (" << __aux64__ << ") exceeds max allowable (1800000001); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                }
                                            
                                                *_tmp_73_openType = buffer - _tmp_74_start;  // OpenType length  
                                            }
                                            else if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude.size() != 0)  // CHOICE 3  fieldType(PolygonalLine) 
                                            {
                                                *_choice_3   = 3 - 4;  // Setting choice selection
                                                *_ext_flag_34 = 1;      // setting ext flag
                                            
                                                uint16_t* _tmp_80_openType = (uint16_t*) buffer;  // OpenType length variable 
                                                buffer += 2;
                                                const uint8_t *_tmp_81_start = buffer; // Starting point
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000058\033[0m| Choice selection: 3";
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                                uint8_t* _ext_flag_45 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].
                                                *_ext_flag_45 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements.size();
                                                if(__aux64__ > 8) __aux64__ = 8;
                                                uint16_t* _tmp_82 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_82 = __aux64__ - 1;
                                                
                                                int __ifh = __aux64__;
                                                for(int h = 0; h < __ifh; h++) { 
                                                    
                                                        // AbsolutePositionWAltitude  SEQUENCE
                                                            //  latitude   Latitude       
                                                            //  longitude  Longitude      
                                                            //  altitude   Altitude       
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(Latitude) name(latitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000060\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].latitude.value) << 
                                                                         " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].latitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].latitude.value;
                                                        }
                                                        
                                                        double _tmp_84 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].latitude.value;
                                                        _tmp_84 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_84);
                                                        _tmp_84 -= -900000000;
                                                        uint32_t* _tmp_83 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_83 = static_cast<uint32_t>(_tmp_84);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].latitude.value' (" << __aux64__ << ") less than (-900000000); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].latitude.value' (" << __aux64__ << ") exceeds max allowable (900000001); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(Longitude) name(longitude) extGroup(0)
                                                        // Real
                                                        
                                                        // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000061\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].longitude.value) << 
                                                                         " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].longitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].longitude.value;
                                                        }
                                                        
                                                        double _tmp_86 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].longitude.value;
                                                        _tmp_86 *= 1.0E7;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_86);
                                                        _tmp_86 -= -1800000000;
                                                        uint32_t* _tmp_85 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_85 = static_cast<uint32_t>(_tmp_86);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].longitude.value' (" << __aux64__ << ") less than (-1800000000); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].longitude.value' (" << __aux64__ << ") exceeds max allowable (1800000001); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(Altitude) name(altitude) extGroup(0)
                                                            // Altitude  SEQUENCE
                                                                //  altitudeValue      AltitudeValue          
                                                                //  altitudeConfidence AltitudeConfidence     
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(AltitudeValue) name(altitude_value) extGroup(0)
                                                            // Real
                                                            
                                                            // FLOAT  min(-100000) max(800001) span(900002) scaleDivisor(100.0) dataType(Float)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000062\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value) << 
                                                                             " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value;
                                                            }
                                                            
                                                            float _tmp_88 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value;
                                                            _tmp_88 *= 100.0;
                                                            __aux64__ = static_cast<uint64_t>(_tmp_88);
                                                            _tmp_88 -= -100000;
                                                            uint32_t* _tmp_87 = (uint32_t*) buffer; buffer += 4;
                                                            *_tmp_87 = static_cast<uint32_t>(_tmp_88);
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < -100000) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value' (" << __aux64__ << ") less than (-100000); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 800001) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value' (" << __aux64__ << ") exceeds max allowable (800001); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(AltitudeConfidence) name(altitude_confidence) extGroup(0)
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000063\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value) << 
                                                                             " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_89 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_89 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                }
                                            
                                                *_tmp_80_openType = buffer - _tmp_81_start;  // OpenType length  
                                            }
                                            else
                                            {
                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_3) << ") selected in CHOICE PolygonalLine in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line'; message dropped.";
                                                return -1;
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width.size() != 0) {
                                                // Field:  type(IVILaneWidth) name(lane_width) extGroup(0)
                                                // Integer
                                                
                                                // UINT16  min(0) max(1023) span(1024) dataType(UInt16)
                                                if(debug) {
                                                    logger->print() << "|\033[38;5;94m000064\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width[0].value) << 
                                                                 " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width[0].value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width[0].value;
                                                }
                                                
                                                uint16_t* _tmp_90 = (uint16_t*) buffer; buffer += 2;
                                                *_tmp_90 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width[0].value; 
                                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width[0].value;
                                                
                                                // MIN validator
                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                    return -1;
                                                }
                                                // MAX validator
                                                if (VALIDATORS_ENABLED && __aux64__ > 1023) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width[0].value' (" << __aux64__ << ") exceeds max allowable (1023); message dropped.";
                                                    return -1;
                                                }
                                            }
                                    
                                    }
                                    else if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area.size() != 0)  // CHOICE 1  fieldType(Zone) 
                                    {
                                        *_choice_2 = 1;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000065\033[0m| Choice selection: 1";
                                    
                                        // Choice
                                           // #0  deltaPositions   PolygonalLine_deltaPositions
                                           // #1  deltaPositionsWithAltitude   PolygonalLine_deltaPositionsWithAltitude
                                           // #2  absolutePositions   PolygonalLine_absolutePositions
                                           // #3  absolutePositionsWithAltitude   PolygonalLine_absolutePositionsWithAltitude
                                        uint8_t* _ext_flag_51 = (uint8_t*) buffer; 
                                        buffer++;
                                        *_ext_flag_51 = 0; 
                                        
                                        uint8_t* _choice_4 = (uint8_t*) buffer;
                                        buffer++;
                                        
                                        if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions.size() != 0) {  // CHOICE 0  fieldType(PolygonalLine) 
                                            *_choice_4   = 0 - 4;  // Setting choice selection
                                            *_ext_flag_51 = 1;      // setting ext flag
                                        
                                            uint16_t* _tmp_91_openType = (uint16_t*) buffer;  // OpenType length variable 
                                            buffer += 2;
                                            const uint8_t *_tmp_92_start = buffer; // Starting point
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m000066\033[0m| Choice selection: 0";
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(32) span(32) ext(true)
                                            uint8_t* _ext_flag_52 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].
                                            *_ext_flag_52 = 0; 
                                            
                                            __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements.size();
                                            if(__aux64__ > 32) __aux64__ = 32;
                                            uint16_t* _tmp_93 = (uint16_t*)buffer;
                                            buffer += 2;
                                            *_tmp_93 = __aux64__ - 1;
                                            
                                            int __ifi = __aux64__;
                                            for(int i = 0; i < __ifi; i++) { 
                                                
                                                    // DeltaPosition  SEQUENCE
                                                        //  deltaLatitude  DeltaLatitude      
                                                        //  deltaLongitude DeltaLongitude     
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(DeltaLatitude) name(delta_latitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000068\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_latitude.value) << 
                                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_latitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_latitude.value;
                                                    }
                                                    
                                                    double _tmp_95 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_latitude.value;
                                                    _tmp_95 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_95);
                                                    _tmp_95 -= -131071;
                                                    uint32_t* _tmp_94 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_94 = static_cast<uint32_t>(_tmp_95);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_latitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_latitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(DeltaLongitude) name(delta_longitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000069\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_longitude.value) << 
                                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_longitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_longitude.value;
                                                    }
                                                    
                                                    double _tmp_97 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_longitude.value;
                                                    _tmp_97 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_97);
                                                    _tmp_97 -= -131071;
                                                    uint32_t* _tmp_96 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_96 = static_cast<uint32_t>(_tmp_97);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_longitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_longitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                            }
                                        
                                            *_tmp_91_openType = buffer - _tmp_92_start;  // OpenType length  
                                        }
                                        else if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude.size() != 0)  // CHOICE 1  fieldType(PolygonalLine) 
                                        {
                                            *_choice_4   = 1 - 4;  // Setting choice selection
                                            *_ext_flag_51 = 1;      // setting ext flag
                                        
                                            uint16_t* _tmp_98_openType = (uint16_t*) buffer;  // OpenType length variable 
                                            buffer += 2;
                                            const uint8_t *_tmp_99_start = buffer; // Starting point
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m000070\033[0m| Choice selection: 1";
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(32) span(32) ext(true)
                                            uint8_t* _ext_flag_55 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].
                                            *_ext_flag_55 = 0; 
                                            
                                            __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements.size();
                                            if(__aux64__ > 32) __aux64__ = 32;
                                            uint16_t* _tmp_100 = (uint16_t*)buffer;
                                            buffer += 2;
                                            *_tmp_100 = __aux64__ - 1;
                                            
                                            int __ifj = __aux64__;
                                            for(int j = 0; j < __ifj; j++) { 
                                                
                                                    // DeltaReferencePosition  SEQUENCE
                                                        //  deltaLatitude  DeltaLatitude      
                                                        //  deltaLongitude DeltaLongitude     
                                                        //  deltaAltitude  DeltaAltitude      
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(DeltaLatitude) name(delta_latitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000072\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_latitude.value) << 
                                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_latitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_latitude.value;
                                                    }
                                                    
                                                    double _tmp_102 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_latitude.value;
                                                    _tmp_102 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_102);
                                                    _tmp_102 -= -131071;
                                                    uint32_t* _tmp_101 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_101 = static_cast<uint32_t>(_tmp_102);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_latitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_latitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(DeltaLongitude) name(delta_longitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000073\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_longitude.value) << 
                                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_longitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_longitude.value;
                                                    }
                                                    
                                                    double _tmp_104 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_longitude.value;
                                                    _tmp_104 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_104);
                                                    _tmp_104 -= -131071;
                                                    uint32_t* _tmp_103 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_103 = static_cast<uint32_t>(_tmp_104);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_longitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_longitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(DeltaAltitude) name(delta_altitude) extGroup(0)
                                                    // Real
                                                    
                                                    // FLOAT  min(-12700) max(12800) span(25501) scaleDivisor(100.0) dataType(Float)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000074\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_altitude.value) << 
                                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_altitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_altitude.value;
                                                    }
                                                    
                                                    float _tmp_106 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_altitude.value;
                                                    _tmp_106 *= 100.0;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_106);
                                                    _tmp_106 -= -12700;
                                                    uint16_t* _tmp_105 = (uint16_t*) buffer; buffer += 2;
                                                    *_tmp_105 = static_cast<uint16_t>(_tmp_106);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -12700) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_altitude.value' (" << __aux64__ << ") less than (-12700); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 12800) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_altitude.value' (" << __aux64__ << ") exceeds max allowable (12800); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                            }
                                        
                                            *_tmp_98_openType = buffer - _tmp_99_start;  // OpenType length  
                                        }
                                        else if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions.size() != 0)  // CHOICE 2  fieldType(PolygonalLine) 
                                        {
                                            *_choice_4   = 2 - 4;  // Setting choice selection
                                            *_ext_flag_51 = 1;      // setting ext flag
                                        
                                            uint16_t* _tmp_107_openType = (uint16_t*) buffer;  // OpenType length variable 
                                            buffer += 2;
                                            const uint8_t *_tmp_108_start = buffer; // Starting point
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m000075\033[0m| Choice selection: 2";
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                            uint8_t* _ext_flag_59 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].
                                            *_ext_flag_59 = 0; 
                                            
                                            __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements.size();
                                            if(__aux64__ > 8) __aux64__ = 8;
                                            uint16_t* _tmp_109 = (uint16_t*)buffer;
                                            buffer += 2;
                                            *_tmp_109 = __aux64__ - 1;
                                            
                                            int __ifk = __aux64__;
                                            for(int k = 0; k < __ifk; k++) { 
                                                
                                                    // AbsolutePosition  SEQUENCE
                                                        //  latitude   Latitude       
                                                        //  longitude  Longitude      
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(Latitude) name(latitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000077\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].latitude.value) << 
                                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].latitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].latitude.value;
                                                    }
                                                    
                                                    double _tmp_111 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].latitude.value;
                                                    _tmp_111 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_111);
                                                    _tmp_111 -= -900000000;
                                                    uint32_t* _tmp_110 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_110 = static_cast<uint32_t>(_tmp_111);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].latitude.value' (" << __aux64__ << ") less than (-900000000); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].latitude.value' (" << __aux64__ << ") exceeds max allowable (900000001); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(Longitude) name(longitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000078\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].longitude.value) << 
                                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].longitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].longitude.value;
                                                    }
                                                    
                                                    double _tmp_113 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].longitude.value;
                                                    _tmp_113 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_113);
                                                    _tmp_113 -= -1800000000;
                                                    uint32_t* _tmp_112 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_112 = static_cast<uint32_t>(_tmp_113);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].longitude.value' (" << __aux64__ << ") less than (-1800000000); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].longitude.value' (" << __aux64__ << ") exceeds max allowable (1800000001); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                            }
                                        
                                            *_tmp_107_openType = buffer - _tmp_108_start;  // OpenType length  
                                        }
                                        else if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude.size() != 0)  // CHOICE 3  fieldType(PolygonalLine) 
                                        {
                                            *_choice_4   = 3 - 4;  // Setting choice selection
                                            *_ext_flag_51 = 1;      // setting ext flag
                                        
                                            uint16_t* _tmp_114_openType = (uint16_t*) buffer;  // OpenType length variable 
                                            buffer += 2;
                                            const uint8_t *_tmp_115_start = buffer; // Starting point
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m000079\033[0m| Choice selection: 3";
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                            uint8_t* _ext_flag_62 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].
                                            *_ext_flag_62 = 0; 
                                            
                                            __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements.size();
                                            if(__aux64__ > 8) __aux64__ = 8;
                                            uint16_t* _tmp_116 = (uint16_t*)buffer;
                                            buffer += 2;
                                            *_tmp_116 = __aux64__ - 1;
                                            
                                            int __ifl = __aux64__;
                                            for(int l = 0; l < __ifl; l++) { 
                                                
                                                    // AbsolutePositionWAltitude  SEQUENCE
                                                        //  latitude   Latitude       
                                                        //  longitude  Longitude      
                                                        //  altitude   Altitude       
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(Latitude) name(latitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000081\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].latitude.value) << 
                                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].latitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].latitude.value;
                                                    }
                                                    
                                                    double _tmp_118 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].latitude.value;
                                                    _tmp_118 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_118);
                                                    _tmp_118 -= -900000000;
                                                    uint32_t* _tmp_117 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_117 = static_cast<uint32_t>(_tmp_118);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].latitude.value' (" << __aux64__ << ") less than (-900000000); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].latitude.value' (" << __aux64__ << ") exceeds max allowable (900000001); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(Longitude) name(longitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000082\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].longitude.value) << 
                                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].longitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].longitude.value;
                                                    }
                                                    
                                                    double _tmp_120 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].longitude.value;
                                                    _tmp_120 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_120);
                                                    _tmp_120 -= -1800000000;
                                                    uint32_t* _tmp_119 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_119 = static_cast<uint32_t>(_tmp_120);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].longitude.value' (" << __aux64__ << ") less than (-1800000000); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].longitude.value' (" << __aux64__ << ") exceeds max allowable (1800000001); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(Altitude) name(altitude) extGroup(0)
                                                        // Altitude  SEQUENCE
                                                            //  altitudeValue      AltitudeValue          
                                                            //  altitudeConfidence AltitudeConfidence     
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(AltitudeValue) name(altitude_value) extGroup(0)
                                                        // Real
                                                        
                                                        // FLOAT  min(-100000) max(800001) span(900002) scaleDivisor(100.0) dataType(Float)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000083\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_value.value) << 
                                                                         " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_value.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_value.value;
                                                        }
                                                        
                                                        float _tmp_122 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_value.value;
                                                        _tmp_122 *= 100.0;
                                                        __aux64__ = static_cast<uint64_t>(_tmp_122);
                                                        _tmp_122 -= -100000;
                                                        uint32_t* _tmp_121 = (uint32_t*) buffer; buffer += 4;
                                                        *_tmp_121 = static_cast<uint32_t>(_tmp_122);
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < -100000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_value.value' (" << __aux64__ << ") less than (-100000); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 800001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_value.value' (" << __aux64__ << ") exceeds max allowable (800001); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(AltitudeConfidence) name(altitude_confidence) extGroup(0)
                                                        // Enumerated
                                                        // INT32  min(0) max(15) span(16) dataType(Int32)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000084\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_confidence.value) << 
                                                                         " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_confidence.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_123 = (uint8_t*)buffer;
                                                        buffer += 1;
                                                        *_tmp_123 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_confidence.value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_confidence.value; 
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_confidence.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_confidence.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                            }
                                        
                                            *_tmp_114_openType = buffer - _tmp_115_start;  // OpenType length  
                                        }
                                        else
                                        {
                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_4) << ") selected in CHOICE PolygonalLine in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0]'; message dropped.";
                                            return -1;
                                        }
                                    
                                    }
                                    else if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment.size() != 0)  // CHOICE 2  fieldType(Zone) 
                                    {
                                        *_choice_2 = 2;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000085\033[0m| Choice selection: 2";
                                    
                                            // ComputedSegment  SEQUENCE
                                                //  zoneId         Zid                                
                                                //  laneNumber     LanePosition                       
                                                //  laneWidth      IVILaneWidth                       
                                                //  offsetDistance ComputedSegment_offsetDistance   OPTIONAL  
                                                //  offsetPosition DeltaReferencePosition           OPTIONAL  
                                            // Optional fields bytemap
                                            char* _tmp_124 = (char*) buffer++;
                                            *_tmp_124 = (ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000086\033[0m| Optional field offset_distance = " << *_tmp_124;
                                            char* _tmp_125 = (char*) buffer++;
                                            *_tmp_125 = (ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000087\033[0m| Optional field offset_position = " << *_tmp_125;
                                            
                                            // Field:  type(Zid) name(zone_id) extGroup(0)
                                            // Integer
                                            
                                            // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                            if(debug) {
                                                logger->print() << "|\033[38;5;94m000088\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value) << 
                                                             " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value);
                                            }
                                            
                                            uint8_t* _ext_flag_67 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.
                                            *_ext_flag_67 = (ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value >= 1 && ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value <= 32) ? 0 : 1;
                                            
                                            if(*_ext_flag_67) {
                                                uint8_t* _tmp_127 = (uint8_t*) buffer++; 
                                                if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value >= 0 && ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value <= INT32_MAX) {
                                                    *_tmp_127 = 0;
                                                
                                                    uint32_t* _tmp_126 = (uint32_t*)buffer; buffer += 4;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value;
                                                    __aux64__ -= INT32_MIN;
                                                    *_tmp_126 = __aux64__;
                                                } 
                                                else
                                                {
                                                    *_tmp_127 = 1;
                                                
                                                    uint64_t* _tmp_126 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value;
                                                    __aux64__ -= INT64_MIN;
                                                    *_tmp_126 = __aux64__;
                                                }
                                            } else {
                                                uint8_t* _tmp_126 = (uint8_t*) buffer++;
                                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value - 1;
                                                *_tmp_126 = __aux64__;
                                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value;
                                            }
                                            
                                            // Field:  type(LanePosition) name(lane_number) extGroup(0)
                                            // Integer
                                            
                                            // INT8  min(-1) max(14) span(16) dataType(Int8)
                                            if(debug) {
                                                logger->print() << "|\033[38;5;94m000089\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_number.value) << 
                                                             " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_number.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_number.value);
                                            }
                                            
                                            uint8_t* _tmp_128 = (uint8_t*) buffer++;
                                            __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_number.value - -1;
                                            *_tmp_128 = __aux64__;
                                            __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_number.value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < -1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_number.value' (" << __aux64__ << ") less than (-1); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 14) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_number.value' (" << __aux64__ << ") exceeds max allowable (14); message dropped.";
                                                return -1;
                                            }
                                            
                                            // Field:  type(IVILaneWidth) name(lane_width) extGroup(0)
                                            // Integer
                                            
                                            // UINT16  min(0) max(1023) span(1024) dataType(UInt16)
                                            if(debug) {
                                                logger->print() << "|\033[38;5;94m000090\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_width.value) << 
                                                             " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_width.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_width.value;
                                            }
                                            
                                            uint16_t* _tmp_129 = (uint16_t*) buffer; buffer += 2;
                                            *_tmp_129 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_width.value; 
                                            __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_width.value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_width.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 1023) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_width.value' (" << __aux64__ << ") exceeds max allowable (1023); message dropped.";
                                                return -1;
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance.size() != 0) {
                                                // Field:  type(ComputedSegment_offsetDistance) name(offset_distance) extGroup(0)
                                                // Integer
                                                
                                                // INT16  min(-32768) max(32767) span(65536) dataType(Int16)
                                                if(debug) {
                                                    logger->print() << "|\033[38;5;94m000091\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance[0].value) << 
                                                                 " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance[0].value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance[0].value;
                                                }
                                                
                                                uint16_t* _tmp_130 = (uint16_t*) buffer; buffer += 2;
                                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance[0].value - -32768;
                                                *_tmp_130 = __aux64__;
                                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance[0].value;
                                                
                                                // MIN validator
                                                if (VALIDATORS_ENABLED && __aux64__ < -32768) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance[0].value' (" << __aux64__ << ") less than (-32768); message dropped.";
                                                    return -1;
                                                }
                                                // MAX validator
                                                if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance[0].value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                    return -1;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position.size() != 0) {
                                                // Field:  type(DeltaReferencePosition) name(offset_position) extGroup(0)
                                                    // DeltaReferencePosition  SEQUENCE
                                                        //  deltaLatitude  DeltaLatitude      
                                                        //  deltaLongitude DeltaLongitude     
                                                        //  deltaAltitude  DeltaAltitude      
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(DeltaLatitude) name(delta_latitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000092\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_latitude.value) << 
                                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_latitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_latitude.value;
                                                    }
                                                    
                                                    double _tmp_132 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_latitude.value;
                                                    _tmp_132 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_132);
                                                    _tmp_132 -= -131071;
                                                    uint32_t* _tmp_131 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_131 = static_cast<uint32_t>(_tmp_132);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_latitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_latitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(DeltaLongitude) name(delta_longitude) extGroup(0)
                                                    // Real
                                                    
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000093\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_longitude.value) << 
                                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_longitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_longitude.value;
                                                    }
                                                    
                                                    double _tmp_134 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_longitude.value;
                                                    _tmp_134 *= 1.0E7;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_134);
                                                    _tmp_134 -= -131071;
                                                    uint32_t* _tmp_133 = (uint32_t*) buffer; buffer += 4;
                                                    *_tmp_133 = static_cast<uint32_t>(_tmp_134);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_longitude.value' (" << __aux64__ << ") less than (-131071); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_longitude.value' (" << __aux64__ << ") exceeds max allowable (131072); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(DeltaAltitude) name(delta_altitude) extGroup(0)
                                                    // Real
                                                    
                                                    // FLOAT  min(-12700) max(12800) span(25501) scaleDivisor(100.0) dataType(Float)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000094\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_altitude.value) << 
                                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_altitude.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_altitude.value;
                                                    }
                                                    
                                                    float _tmp_136 = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_altitude.value;
                                                    _tmp_136 *= 100.0;
                                                    __aux64__ = static_cast<uint64_t>(_tmp_136);
                                                    _tmp_136 -= -12700;
                                                    uint16_t* _tmp_135 = (uint16_t*) buffer; buffer += 2;
                                                    *_tmp_135 = static_cast<uint16_t>(_tmp_136);
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < -12700) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_altitude.value' (" << __aux64__ << ") less than (-12700); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 12800) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_altitude.value' (" << __aux64__ << ") exceeds max allowable (12800); message dropped.";
                                                        return -1;
                                                    }
                                            }
                                    
                                    }
                                    else
                                    {
                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_2) << ") selected in CHOICE Zone in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0]'; message dropped.";
                                        return -1;
                                    }
                                }
                                
                                if(*_ext_flag_28) {
                                }
                        }
                        
                        if(*_ext_flag_14) {
                        }
                
                }
                else if(ros->ivi.optional[0].elements[c].giv.size() != 0)  // CHOICE 1  fieldType(IviContainer) 
                {
                    *_choice_1 = 1;  // Setting choice selection
                
                    if(debug)
                        logger->debug() << "|\033[38;5;94m000095\033[0m| Choice selection: 1";
                
                    // SequenceOf
                    // Data Type UInt8
                    // SEQUENCE_OF  min(1) max(16) span(16) ext(true)
                    uint8_t* _ext_flag_74 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].
                    *_ext_flag_74 = 0; 
                    
                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements.size();
                    if(__aux64__ > 16) __aux64__ = 16;
                    uint16_t* _tmp_139 = (uint16_t*)buffer;
                    buffer += 2;
                    *_tmp_139 = __aux64__ - 1;
                    
                    int __ifm = __aux64__;
                    for(int m = 0; m < __ifm; m++) { 
                        
                            // GicPart  SEQUENCE
                                //  detectionZoneIds       GicPart_detectionZoneIds         OPTIONAL  
                                //  its_Rrid               VarLengthNumber                  OPTIONAL  
                                //  relevanceZoneIds       GicPart_relevanceZoneIds         OPTIONAL  
                                //  direction              Direction                        OPTIONAL  
                                //  driverAwarenessZoneIds GicPart_driverAwarenessZoneIds   OPTIONAL  
                                //  minimumAwarenessTime   GicPart_minimumAwarenessTime     OPTIONAL  
                                //  applicableLanes        GicPart_applicableLanes          OPTIONAL  
                                //  iviType                IviType                            
                                //  iviPurpose             IviPurpose                       OPTIONAL  
                                //  laneStatus             LaneStatus                       OPTIONAL  
                                //  vehicleCharacteristics GicPart_vehicleCharacteristics   OPTIONAL  
                                //  driverCharacteristics  DriverCharacteristics            OPTIONAL  
                                //  layoutId               GicPart_layoutId                 OPTIONAL  
                                //  preStoredlayoutId      GicPart_preStoredlayoutId        OPTIONAL  
                                //  roadSignCodes          GicPart_roadSignCodes              
                                //  extraText              GicPart_extraText                OPTIONAL  
                                //  ...
                            uint8_t* _ext_flag_75 = (uint8_t*) buffer++;  // Write extension flag for GicPart
                            *_ext_flag_75 = 0;  
                            
                            // Optional fields bytemap
                            char* _tmp_140 = (char*) buffer++;
                            *_tmp_140 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000097\033[0m| Optional field detection_zone_ids = " << *_tmp_140;
                            char* _tmp_141 = (char*) buffer++;
                            *_tmp_141 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000098\033[0m| Optional field its_rrid = " << *_tmp_141;
                            char* _tmp_142 = (char*) buffer++;
                            *_tmp_142 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000099\033[0m| Optional field relevance_zone_ids = " << *_tmp_142;
                            char* _tmp_143 = (char*) buffer++;
                            *_tmp_143 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].direction.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000100\033[0m| Optional field direction = " << *_tmp_143;
                            char* _tmp_144 = (char*) buffer++;
                            *_tmp_144 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000101\033[0m| Optional field driver_awareness_zone_ids = " << *_tmp_144;
                            char* _tmp_145 = (char*) buffer++;
                            *_tmp_145 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000102\033[0m| Optional field minimum_awareness_time = " << *_tmp_145;
                            char* _tmp_146 = (char*) buffer++;
                            *_tmp_146 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000103\033[0m| Optional field applicable_lanes = " << *_tmp_146;
                            char* _tmp_147 = (char*) buffer++;
                            *_tmp_147 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000104\033[0m| Optional field ivi_purpose = " << *_tmp_147;
                            char* _tmp_148 = (char*) buffer++;
                            *_tmp_148 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000105\033[0m| Optional field lane_status = " << *_tmp_148;
                            char* _tmp_149 = (char*) buffer++;
                            *_tmp_149 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000106\033[0m| Optional field vehicle_characteristics = " << *_tmp_149;
                            char* _tmp_150 = (char*) buffer++;
                            *_tmp_150 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000107\033[0m| Optional field driver_characteristics = " << *_tmp_150;
                            char* _tmp_151 = (char*) buffer++;
                            *_tmp_151 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000108\033[0m| Optional field layout_id = " << *_tmp_151;
                            char* _tmp_152 = (char*) buffer++;
                            *_tmp_152 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000109\033[0m| Optional field pre_storedlayout_id = " << *_tmp_152;
                            char* _tmp_153 = (char*) buffer++;
                            *_tmp_153 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000110\033[0m| Optional field extra_text = " << *_tmp_153;
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids.size() != 0) {
                                // Field:  type(GicPart_detectionZoneIds) name(detection_zone_ids) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_76 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].
                                *_ext_flag_76 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_154 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_154 = __aux64__ - 1;
                                
                                int __ifn = __aux64__;
                                for(int n = 0; n < __ifn; n++) { 
                                    
                                    // Integer
                                    
                                    // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                    if(debug) {
                                        logger->print() << "|\033[38;5;94m000112\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value) << 
                                                     " ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value);
                                    }
                                    
                                    uint8_t* _ext_flag_77 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].
                                    *_ext_flag_77 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value >= 1 && ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value <= 32) ? 0 : 1;
                                    
                                    if(*_ext_flag_77) {
                                        uint8_t* _tmp_156 = (uint8_t*) buffer++; 
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value <= INT32_MAX) {
                                            *_tmp_156 = 0;
                                        
                                            uint32_t* _tmp_155 = (uint32_t*)buffer; buffer += 4;
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value;
                                            __aux64__ -= INT32_MIN;
                                            *_tmp_155 = __aux64__;
                                        } 
                                        else
                                        {
                                            *_tmp_156 = 1;
                                        
                                            uint64_t* _tmp_155 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value;
                                            __aux64__ -= INT64_MIN;
                                            *_tmp_155 = __aux64__;
                                        }
                                    } else {
                                        uint8_t* _tmp_155 = (uint8_t*) buffer++;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value - 1;
                                        *_tmp_155 = __aux64__;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value;
                                    }
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid.size() != 0) {
                                // Field:  type(VarLengthNumber) name(its_rrid) extGroup(0)
                                // Choice
                                   // #0  content   VarLengthNumber_content
                                   // #1  extension   Ext1
                                uint8_t* _choice_5 = (uint8_t*) buffer;
                                buffer++;
                                
                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].content.size() != 0) {  // CHOICE 0  fieldType(VarLengthNumber) 
                                    *_choice_5 = 0;  // Setting choice selection
                                
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m000113\033[0m| Choice selection: 0";
                                
                                    // Integer
                                    
                                    // UINT8  min(0) max(127) span(128) dataType(UInt8)
                                    if(debug) {
                                        logger->print() << "|\033[38;5;94m000114\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].content[0].value) << 
                                                     " ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].content[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].content[0].value);
                                    }
                                    
                                    uint8_t* _tmp_157 = (uint8_t*) buffer++;
                                    *_tmp_157 = ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].content[0].value; 
                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].content[0].value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].content[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 127) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].content[0].value' (" << __aux64__ << ") exceeds max allowable (127); message dropped.";
                                        return -1;
                                    }
                                
                                }
                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension.size() != 0)  // CHOICE 1  fieldType(VarLengthNumber) 
                                {
                                    *_choice_5 = 1;  // Setting choice selection
                                
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m000115\033[0m| Choice selection: 1";
                                
                                    // Choice
                                       // #0  content   Ext1_content
                                       // #1  extension   Ext2
                                    uint8_t* _choice_6 = (uint8_t*) buffer;
                                    buffer++;
                                    
                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].content.size() != 0) {  // CHOICE 0  fieldType(Ext1) 
                                        *_choice_6 = 0;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000116\033[0m| Choice selection: 0";
                                    
                                        // Integer
                                        
                                        // UINT16  min(128) max(16511) span(16384) dataType(UInt16)
                                        if(debug) {
                                            logger->print() << "|\033[38;5;94m000117\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].content[0].value) << 
                                                         " ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].content[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].content[0].value;
                                        }
                                        
                                        uint16_t* _tmp_158 = (uint16_t*) buffer; buffer += 2;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].content[0].value - 128;
                                        *_tmp_158 = __aux64__;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].content[0].value;
                                        
                                        // MIN validator
                                        if (VALIDATORS_ENABLED && __aux64__ < 128) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].content[0].value' (" << __aux64__ << ") less than (128); message dropped.";
                                            return -1;
                                        }
                                        // MAX validator
                                        if (VALIDATORS_ENABLED && __aux64__ > 16511) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].content[0].value' (" << __aux64__ << ") exceeds max allowable (16511); message dropped.";
                                            return -1;
                                        }
                                    
                                    }
                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension.size() != 0)  // CHOICE 1  fieldType(Ext1) 
                                    {
                                        *_choice_6 = 1;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000118\033[0m| Choice selection: 1";
                                    
                                        // Choice
                                           // #0  content   Ext2_content
                                           // #1  extension   Ext3
                                        uint8_t* _choice_7 = (uint8_t*) buffer;
                                        buffer++;
                                        
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].content.size() != 0) {  // CHOICE 0  fieldType(Ext2) 
                                            *_choice_7 = 0;  // Setting choice selection
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m000119\033[0m| Choice selection: 0";
                                        
                                            // Integer
                                            
                                            // UINT32  min(16512) max(2113663) span(2097152) dataType(UInt32)
                                            if(debug) {
                                                logger->print() << "|\033[38;5;94m000120\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].content[0].value) << 
                                                             " ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].content[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].content[0].value;
                                            }
                                            
                                            uint32_t* _tmp_159 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].content[0].value - 16512;
                                            *_tmp_159 = __aux64__;
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].content[0].value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < 16512) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].content[0].value' (" << __aux64__ << ") less than (16512); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 2113663) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].content[0].value' (" << __aux64__ << ") exceeds max allowable (2113663); message dropped.";
                                                return -1;
                                            }
                                        
                                        }
                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension.size() != 0)  // CHOICE 1  fieldType(Ext2) 
                                        {
                                            *_choice_7 = 1;  // Setting choice selection
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m000121\033[0m| Choice selection: 1";
                                        
                                            // Integer
                                            
                                            // UINT32  min(2113664) max(270549119) span(268435456) dataType(UInt32)
                                            if(debug) {
                                                logger->print() << "|\033[38;5;94m000122\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value) << 
                                                             " ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value;
                                            }
                                            
                                            uint8_t* _ext_flag_84 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].
                                            *_ext_flag_84 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value >= 2113664 && ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value <= 270549119) ? 0 : 1;
                                            
                                            if(*_ext_flag_84) {
                                                uint8_t* _tmp_161 = (uint8_t*) buffer++; 
                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value <= INT32_MAX) {
                                                    *_tmp_161 = 0;
                                                
                                                    uint32_t* _tmp_160 = (uint32_t*)buffer; buffer += 4;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value;
                                                    __aux64__ -= INT32_MIN;
                                                    *_tmp_160 = __aux64__;
                                                } 
                                                else
                                                {
                                                    *_tmp_161 = 1;
                                                
                                                    uint64_t* _tmp_160 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value;
                                                    __aux64__ -= INT64_MIN;
                                                    *_tmp_160 = __aux64__;
                                                }
                                            } else {
                                                uint32_t* _tmp_160 = (uint32_t*) buffer; buffer += 4;
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value - 2113664;
                                                *_tmp_160 = __aux64__;
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value;
                                            }
                                        
                                        }
                                        else
                                        {
                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_7) << ") selected in CHOICE Ext2 in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0]'; message dropped.";
                                            return -1;
                                        }
                                    
                                    }
                                    else
                                    {
                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_6) << ") selected in CHOICE Ext1 in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0]'; message dropped.";
                                        return -1;
                                    }
                                
                                }
                                else
                                {
                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_5) << ") selected in CHOICE VarLengthNumber in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0]'; message dropped.";
                                    return -1;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids.size() != 0) {
                                // Field:  type(GicPart_relevanceZoneIds) name(relevance_zone_ids) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_85 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].
                                *_ext_flag_85 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_162 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_162 = __aux64__ - 1;
                                
                                int __ifo = __aux64__;
                                for(int o = 0; o < __ifo; o++) { 
                                    
                                    // Integer
                                    
                                    // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                    if(debug) {
                                        logger->print() << "|\033[38;5;94m000124\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value) << 
                                                     " ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value);
                                    }
                                    
                                    uint8_t* _ext_flag_86 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].
                                    *_ext_flag_86 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value >= 1 && ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value <= 32) ? 0 : 1;
                                    
                                    if(*_ext_flag_86) {
                                        uint8_t* _tmp_164 = (uint8_t*) buffer++; 
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value <= INT32_MAX) {
                                            *_tmp_164 = 0;
                                        
                                            uint32_t* _tmp_163 = (uint32_t*)buffer; buffer += 4;
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value;
                                            __aux64__ -= INT32_MIN;
                                            *_tmp_163 = __aux64__;
                                        } 
                                        else
                                        {
                                            *_tmp_164 = 1;
                                        
                                            uint64_t* _tmp_163 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value;
                                            __aux64__ -= INT64_MIN;
                                            *_tmp_163 = __aux64__;
                                        }
                                    } else {
                                        uint8_t* _tmp_163 = (uint8_t*) buffer++;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value - 1;
                                        *_tmp_163 = __aux64__;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value;
                                    }
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].direction.size() != 0) {
                                // Field:  type(Direction) name(direction) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000125\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].direction[0].value) << 
                                                 " ivi.optional[0].elements[c].giv[0].elements[m].direction[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].direction[0].value);
                                }
                                
                                uint8_t* _tmp_165 = (uint8_t*) buffer++;
                                *_tmp_165 = ros->ivi.optional[0].elements[c].giv[0].elements[m].direction[0].value; 
                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].direction[0].value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].direction[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].direction[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                    return -1;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids.size() != 0) {
                                // Field:  type(GicPart_driverAwarenessZoneIds) name(driver_awareness_zone_ids) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_88 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].
                                *_ext_flag_88 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_166 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_166 = __aux64__ - 1;
                                
                                int __ifp = __aux64__;
                                for(int p = 0; p < __ifp; p++) { 
                                    
                                    // Integer
                                    
                                    // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                    if(debug) {
                                        logger->print() << "|\033[38;5;94m000127\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value) << 
                                                     " ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value);
                                    }
                                    
                                    uint8_t* _ext_flag_89 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].
                                    *_ext_flag_89 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value >= 1 && ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value <= 32) ? 0 : 1;
                                    
                                    if(*_ext_flag_89) {
                                        uint8_t* _tmp_168 = (uint8_t*) buffer++; 
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value <= INT32_MAX) {
                                            *_tmp_168 = 0;
                                        
                                            uint32_t* _tmp_167 = (uint32_t*)buffer; buffer += 4;
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value;
                                            __aux64__ -= INT32_MIN;
                                            *_tmp_167 = __aux64__;
                                        } 
                                        else
                                        {
                                            *_tmp_168 = 1;
                                        
                                            uint64_t* _tmp_167 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value;
                                            __aux64__ -= INT64_MIN;
                                            *_tmp_167 = __aux64__;
                                        }
                                    } else {
                                        uint8_t* _tmp_167 = (uint8_t*) buffer++;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value - 1;
                                        *_tmp_167 = __aux64__;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value;
                                    }
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time.size() != 0) {
                                // Field:  type(GicPart_minimumAwarenessTime) name(minimum_awareness_time) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000128\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time[0].value) << 
                                                 " ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time[0].value);
                                }
                                
                                uint8_t* _tmp_169 = (uint8_t*) buffer++;
                                *_tmp_169 = ros->ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time[0].value; 
                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time[0].value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                    return -1;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes.size() != 0) {
                                // Field:  type(GicPart_applicableLanes) name(applicable_lanes) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_91 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].
                                *_ext_flag_91 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_170 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_170 = __aux64__ - 1;
                                
                                int __ifq = __aux64__;
                                for(int q = 0; q < __ifq; q++) { 
                                    
                                    // Integer
                                    
                                    // INT8  min(-1) max(14) span(16) dataType(Int8)
                                    if(debug) {
                                        logger->print() << "|\033[38;5;94m000130\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].elements[q].value) << 
                                                     " ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].elements[q].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].elements[q].value);
                                    }
                                    
                                    uint8_t* _tmp_171 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].elements[q].value - -1;
                                    *_tmp_171 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].elements[q].value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].elements[q].value' (" << __aux64__ << ") less than (-1); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].elements[q].value' (" << __aux64__ << ") exceeds max allowable (14); message dropped.";
                                        return -1;
                                    }
                                    
                                }
                            }
                            
                            // Field:  type(IviType) name(ivi_type) extGroup(0)
                            // Integer
                            
                            // UINT8  min(0) max(7) span(8) dataType(UInt8)
                            if(debug) {
                                logger->print() << "|\033[38;5;94m000131\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_type.value) << 
                                             " ivi.optional[0].elements[c].giv[0].elements[m].ivi_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_type.value);
                            }
                            
                            uint8_t* _tmp_172 = (uint8_t*) buffer++;
                            *_tmp_172 = ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_type.value; 
                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_type.value;
                            
                            // MIN validator
                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].ivi_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                return -1;
                            }
                            // MAX validator
                            if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].ivi_type.value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                return -1;
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose.size() != 0) {
                                // Field:  type(IviPurpose) name(ivi_purpose) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000132\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose[0].value) << 
                                                 " ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose[0].value);
                                }
                                
                                uint8_t* _tmp_173 = (uint8_t*) buffer++;
                                *_tmp_173 = ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose[0].value; 
                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose[0].value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                    return -1;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status.size() != 0) {
                                // Field:  type(LaneStatus) name(lane_status) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000133\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value) << 
                                                 " ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value);
                                }
                                
                                uint8_t* _ext_flag_95 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].
                                *_ext_flag_95 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value <= 7) ? 0 : 1;
                                
                                if(*_ext_flag_95) {
                                    uint8_t* _tmp_175 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value <= INT32_MAX) {
                                        *_tmp_175 = 0;
                                    
                                        uint32_t* _tmp_174 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_174 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_175 = 1;
                                    
                                        uint64_t* _tmp_174 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_174 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_174 = (uint8_t*) buffer++;
                                    *_tmp_174 = ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value; 
                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics.size() != 0) {
                                // Field:  type(GicPart_vehicleCharacteristics) name(vehicle_characteristics) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_96 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].
                                *_ext_flag_96 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_176 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_176 = __aux64__ - 1;
                                
                                int __ifr = __aux64__;
                                for(int r = 0; r < __ifr; r++) { 
                                    
                                        // CompleteVehicleCharacteristics  SEQUENCE
                                            //  tractor    TractorCharacteristics                   OPTIONAL  
                                            //  trailer    CompleteVehicleCharacteristics_trailer   OPTIONAL  
                                            //  train      TrainCharacteristics                     OPTIONAL  
                                        // Optional fields bytemap
                                        char* _tmp_177 = (char*) buffer++;
                                        *_tmp_177 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor.size() != 0 ? 1 : 0);
                                        if(debug)
                                            logger->print() << "|\033[38;5;94m000135\033[0m| Optional field tractor = " << *_tmp_177;
                                        char* _tmp_178 = (char*) buffer++;
                                        *_tmp_178 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer.size() != 0 ? 1 : 0);
                                        if(debug)
                                            logger->print() << "|\033[38;5;94m000136\033[0m| Optional field trailer = " << *_tmp_178;
                                        char* _tmp_179 = (char*) buffer++;
                                        *_tmp_179 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train.size() != 0 ? 1 : 0);
                                        if(debug)
                                            logger->print() << "|\033[38;5;94m000137\033[0m| Optional field train = " << *_tmp_179;
                                        
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor.size() != 0) {
                                            // Field:  type(TractorCharacteristics) name(tractor) extGroup(0)
                                                // TractorCharacteristics  SEQUENCE
                                                    //  equalTo    TractorCharacteristics_equalTo      OPTIONAL  
                                                    //  notEqualTo TractorCharacteristics_notEqualTo   OPTIONAL  
                                                    //  ranges     TractorCharacteristics_ranges       OPTIONAL  
                                                // Optional fields bytemap
                                                char* _tmp_180 = (char*) buffer++;
                                                *_tmp_180 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to.size() != 0 ? 1 : 0);
                                                if(debug)
                                                    logger->print() << "|\033[38;5;94m000138\033[0m| Optional field equal_to = " << *_tmp_180;
                                                char* _tmp_181 = (char*) buffer++;
                                                *_tmp_181 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to.size() != 0 ? 1 : 0);
                                                if(debug)
                                                    logger->print() << "|\033[38;5;94m000139\033[0m| Optional field not_equal_to = " << *_tmp_181;
                                                char* _tmp_182 = (char*) buffer++;
                                                *_tmp_182 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges.size() != 0 ? 1 : 0);
                                                if(debug)
                                                    logger->print() << "|\033[38;5;94m000140\033[0m| Optional field ranges = " << *_tmp_182;
                                                
                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to.size() != 0) {
                                                    // Field:  type(TractorCharacteristics_equalTo) name(equal_to) extGroup(0)
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                    uint8_t* _ext_flag_97 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].
                                                    *_ext_flag_97 = 0; 
                                                    
                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements.size();
                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                    uint16_t* _tmp_183 = (uint16_t*)buffer;
                                                    buffer += 2;
                                                    *_tmp_183 = __aux64__ - 1;
                                                    
                                                    int __ifs = __aux64__;
                                                    for(int s = 0; s < __ifs; s++) { 
                                                        
                                                        // Choice
                                                           // #0  simpleVehicleType   StationType
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                           // #2  iso3833VehicleType   Iso3833VehicleType
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                           // #4  engineCharacteristics   EngineCharacteristics
                                                           // #5  loadType   LoadType
                                                           // #6  usage   VehicleRole
                                                        uint8_t* _ext_flag_98 = (uint8_t*) buffer; 
                                                        buffer++;
                                                        *_ext_flag_98 = 0; 
                                                        
                                                        uint8_t* _choice_8 = (uint8_t*) buffer;
                                                        buffer++;
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                            *_choice_8 = 0;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000142\033[0m| Choice selection: 0";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000143\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_184 = (uint8_t*) buffer++;
                                                            *_tmp_184 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].simple_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].simple_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_8 = 1;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000144\033[0m| Choice selection: 1";
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                            uint8_t* _choice_9 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                *_choice_9 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000145\033[0m| Choice selection: 0";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000146\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_185 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_185 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_9 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000147\033[0m| Choice selection: 1";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000148\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_186 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_186 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_9 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000149\033[0m| Choice selection: 2";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000150\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_187 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_187 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_9 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000151\033[0m| Choice selection: 3";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000152\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_188 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_188 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_9) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0]'; message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_8 = 2;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000153\033[0m| Choice selection: 2";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000154\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_189 = (uint8_t*) buffer++;
                                                            *_tmp_189 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].iso3833_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].iso3833_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_8 = 3;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000155\033[0m| Choice selection: 3";
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000156\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_190 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_190 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].euro_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].euro_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000157\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].cop_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_191 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_191 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].cop_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].cop_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_8 = 4;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000158\033[0m| Choice selection: 4";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000159\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].engine_characteristics[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_192 = (uint8_t*) buffer++;
                                                            *_tmp_192 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].engine_characteristics[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].engine_characteristics[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_8 = 5;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000160\033[0m| Choice selection: 5";
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000161\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_109 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.
                                                                *_ext_flag_109 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_109) {
                                                                    uint8_t* _tmp_194 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value <= INT32_MAX) {
                                                                        *_tmp_194 = 0;
                                                                    
                                                                        uint32_t* _tmp_193 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_193 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_194 = 1;
                                                                    
                                                                        uint64_t* _tmp_193 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_193 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_193 = (uint8_t*) buffer++;
                                                                    *_tmp_193 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value;
                                                                }
                                                                
                                                                // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000162\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_195 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_195 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].dangerous_goods_type.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].dangerous_goods_type.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                if(debug)
                                                                    logger->print() << "|\033[38;5;94m000163\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].special_transport_type.values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].special_transport_type.values.size() < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].special_transport_type.values.size() > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_196 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].special_transport_type.values.size();
                                                                if(__aux64__ > 4) __aux64__ = 4;
                                                                *_tmp_196 = __aux64__ - 4;
                                                                buffer += 1;
                                                                
                                                                int __ift = __aux64__;
                                                                for(int t = 0; t < __ift; t++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].special_transport_type.values[t]? 1: 0);
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_8 = 6;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000164\033[0m| Choice selection: 6";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000165\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].usage[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].usage[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_197 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_197 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].usage[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].usage[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_8) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s]'; message dropped.";
                                                            return -1;
                                                        }
                                                    }
                                                }
                                                
                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to.size() != 0) {
                                                    // Field:  type(TractorCharacteristics_notEqualTo) name(not_equal_to) extGroup(0)
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                    uint8_t* _ext_flag_112 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].
                                                    *_ext_flag_112 = 0; 
                                                    
                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements.size();
                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                    uint16_t* _tmp_198 = (uint16_t*)buffer;
                                                    buffer += 2;
                                                    *_tmp_198 = __aux64__ - 1;
                                                    
                                                    int __ifu = __aux64__;
                                                    for(int u = 0; u < __ifu; u++) { 
                                                        
                                                        // Choice
                                                           // #0  simpleVehicleType   StationType
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                           // #2  iso3833VehicleType   Iso3833VehicleType
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                           // #4  engineCharacteristics   EngineCharacteristics
                                                           // #5  loadType   LoadType
                                                           // #6  usage   VehicleRole
                                                        uint8_t* _ext_flag_113 = (uint8_t*) buffer; 
                                                        buffer++;
                                                        *_ext_flag_113 = 0; 
                                                        
                                                        uint8_t* _choice_10 = (uint8_t*) buffer;
                                                        buffer++;
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                            *_choice_10 = 0;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000167\033[0m| Choice selection: 0";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000168\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_199 = (uint8_t*) buffer++;
                                                            *_tmp_199 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].simple_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].simple_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_10 = 1;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000169\033[0m| Choice selection: 1";
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                            uint8_t* _choice_11 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                *_choice_11 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000170\033[0m| Choice selection: 0";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000171\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_200 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_200 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_11 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000172\033[0m| Choice selection: 1";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000173\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_201 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_201 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_11 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000174\033[0m| Choice selection: 2";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000175\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_202 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_202 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_11 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000176\033[0m| Choice selection: 3";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000177\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_203 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_203 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_11) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0]'; message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_10 = 2;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000178\033[0m| Choice selection: 2";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000179\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_204 = (uint8_t*) buffer++;
                                                            *_tmp_204 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].iso3833_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].iso3833_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_10 = 3;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000180\033[0m| Choice selection: 3";
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000181\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_205 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_205 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].euro_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].euro_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000182\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].cop_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_206 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_206 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].cop_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].cop_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_10 = 4;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000183\033[0m| Choice selection: 4";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000184\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].engine_characteristics[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_207 = (uint8_t*) buffer++;
                                                            *_tmp_207 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].engine_characteristics[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].engine_characteristics[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_10 = 5;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000185\033[0m| Choice selection: 5";
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000186\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_124 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.
                                                                *_ext_flag_124 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_124) {
                                                                    uint8_t* _tmp_209 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value <= INT32_MAX) {
                                                                        *_tmp_209 = 0;
                                                                    
                                                                        uint32_t* _tmp_208 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_208 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_209 = 1;
                                                                    
                                                                        uint64_t* _tmp_208 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_208 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_208 = (uint8_t*) buffer++;
                                                                    *_tmp_208 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value;
                                                                }
                                                                
                                                                // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000187\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_210 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_210 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].dangerous_goods_type.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].dangerous_goods_type.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                if(debug)
                                                                    logger->print() << "|\033[38;5;94m000188\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].special_transport_type.values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].special_transport_type.values.size() < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].special_transport_type.values.size() > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_211 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].special_transport_type.values.size();
                                                                if(__aux64__ > 4) __aux64__ = 4;
                                                                *_tmp_211 = __aux64__ - 4;
                                                                buffer += 1;
                                                                
                                                                int __ifv = __aux64__;
                                                                for(int v = 0; v < __ifv; v++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].special_transport_type.values[v]? 1: 0);
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_10 = 6;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000189\033[0m| Choice selection: 6";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000190\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].usage[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].usage[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_212 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_212 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].usage[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].usage[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_10) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u]'; message dropped.";
                                                            return -1;
                                                        }
                                                    }
                                                }
                                                
                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges.size() != 0) {
                                                    // Field:  type(TractorCharacteristics_ranges) name(ranges) extGroup(0)
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                    uint8_t* _ext_flag_127 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].
                                                    *_ext_flag_127 = 0; 
                                                    
                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements.size();
                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                    uint16_t* _tmp_213 = (uint16_t*)buffer;
                                                    buffer += 2;
                                                    *_tmp_213 = __aux64__ - 1;
                                                    
                                                    int __ifw = __aux64__;
                                                    for(int w = 0; w < __ifw; w++) { 
                                                        
                                                            // VehicleCharacteristicsRanges  SEQUENCE
                                                                //  comparisonOperator ComparisonOperator                      
                                                                //  limits             VehicleCharacteristicsRanges_limits     
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(ComparisonOperator) name(comparison_operator) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000192\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].comparison_operator.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].comparison_operator.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_214 = (uint8_t*) buffer++;
                                                            *_tmp_214 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].comparison_operator.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].comparison_operator.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].comparison_operator.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].comparison_operator.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(VehicleCharacteristicsRanges_limits) name(limits) extGroup(0)
                                                            // Choice
                                                               // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles
                                                               // #1  vehicleDimensions   VehicleDimensions
                                                               // #2  vehicleWeightLimits   VehicleWeightLimits
                                                               // #3  axleWeightLimits   AxleWeightLimits
                                                               // #4  passengerCapacity   PassengerCapacity
                                                               // #5  exhaustEmissionValues   ExhaustEmissionValues
                                                               // #6  dieselEmissionValues   DieselEmissionValues
                                                               // #7  soundLevel   SoundLevel
                                                            uint8_t* _ext_flag_129 = (uint8_t*) buffer; 
                                                            buffer++;
                                                            *_ext_flag_129 = 0; 
                                                            
                                                            uint8_t* _choice_12 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.number_of_axles.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                *_choice_12 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000193\033[0m| Choice selection: 0";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000194\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.number_of_axles[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.number_of_axles[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_215 = (uint8_t*) buffer++;
                                                                *_tmp_215 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.number_of_axles[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.number_of_axles[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.number_of_axles[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.number_of_axles[0].value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_12 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000195\033[0m| Choice selection: 1";
                                                            
                                                                    // VehicleDimensions  SEQUENCE
                                                                        //  vehicleLengthOverall Int1           
                                                                        //  vehicleHeigthOverall Int1           
                                                                        //  vehicleWidthOverall  Int1           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int1) name(vehicle_length_overall) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000196\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_216 = (uint8_t*) buffer++;
                                                                    *_tmp_216 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_length_overall.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_length_overall.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(vehicle_heigth_overall) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000197\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_217 = (uint8_t*) buffer++;
                                                                    *_tmp_217 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_heigth_overall.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_heigth_overall.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(vehicle_width_overall) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000198\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_218 = (uint8_t*) buffer++;
                                                                    *_tmp_218 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_width_overall.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_width_overall.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_12 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000199\033[0m| Choice selection: 2";
                                                            
                                                                    // VehicleWeightLimits  SEQUENCE
                                                                        //  vehicleMaxLadenWeight     Int2           
                                                                        //  vehicleTrainMaximumWeight Int2           
                                                                        //  vehicleWeightUnladen      Int2           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int2) name(vehicle_max_laden_weight) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000200\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_219 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_219 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(vehicle_train_maximum_weight) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000201\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_220 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_220 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(vehicle_weight_unladen) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000202\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_221 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_221 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_12 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000203\033[0m| Choice selection: 3";
                                                            
                                                                    // AxleWeightLimits  SEQUENCE
                                                                        //  maxLadenweightOnAxle1 Int2           
                                                                        //  maxLadenweightOnAxle2 Int2           
                                                                        //  maxLadenweightOnAxle3 Int2           
                                                                        //  maxLadenweightOnAxle4 Int2           
                                                                        //  maxLadenweightOnAxle5 Int2           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle1) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000204\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_222 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_222 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle2) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000205\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_223 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_223 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle3) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000206\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_224 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_224 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle4) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000207\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_225 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_225 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle5) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000208\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_226 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_226 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_12 = 4;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000209\033[0m| Choice selection: 4";
                                                            
                                                                    // PassengerCapacity  SEQUENCE
                                                                        //  numberOfSeats          Int1           
                                                                        //  numberOfStandingPlaces Int1           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int1) name(number_of_seats) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000210\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_seats.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_227 = (uint8_t*) buffer++;
                                                                    *_tmp_227 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_seats.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_seats.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(number_of_standing_places) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000211\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_228 = (uint8_t*) buffer++;
                                                                    *_tmp_228 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_standing_places.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_standing_places.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_12 = 5;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000212\033[0m| Choice selection: 5";
                                                            
                                                                    // ExhaustEmissionValues  SEQUENCE
                                                                        //  unitType      UnitType                             
                                                                        //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                        //  emissionHC    Int2                                 
                                                                        //  emissionNOX   Int2                                 
                                                                        //  emissionHCNOX Int2                                 
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000213\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].unit_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_229 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_229 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].unit_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].unit_type.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(ExhaustEmissionValues_emissionCO) name(emission_co) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000214\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_co.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_230 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_230 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_co.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_co.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(emission_hc) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000215\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hc.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_231 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_231 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hc.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hc.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(emission_nox) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000216\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_nox.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_232 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_232 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_nox.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_nox.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(emission_hcnox) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000217\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_233 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_233 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hcnox.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_12 = 6;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000218\033[0m| Choice selection: 6";
                                                            
                                                                    // DieselEmissionValues  SEQUENCE
                                                                        //  particulate     DieselEmissionValues_particulate     
                                                                        //  absorptionCoeff Int2                                 
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(DieselEmissionValues_particulate) name(particulate) extGroup(0)
                                                                        // DieselEmissionValues_particulate  SEQUENCE
                                                                            //  unitType   UnitType                                   
                                                                            //  value      DieselEmissionValues_particulate_value     
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000219\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_234 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_234 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(DieselEmissionValues_particulate_value) name(value) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000220\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.value.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_235 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_235 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.value.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.value.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    // Field:  type(Int2) name(absorption_coeff) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000221\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_236 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_236 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].absorption_coeff.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level.size() != 0)  // CHOICE 7  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_12 = 7;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000222\033[0m| Choice selection: 7";
                                                            
                                                                    // SoundLevel  SEQUENCE
                                                                        //  soundstationary Int1           
                                                                        //  sounddriveby    Int1           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int1) name(soundstationary) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000223\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].soundstationary.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].soundstationary.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_237 = (uint8_t*) buffer++;
                                                                    *_tmp_237 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].soundstationary.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].soundstationary.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(sounddriveby) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000224\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].sounddriveby.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].sounddriveby.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_238 = (uint8_t*) buffer++;
                                                                    *_tmp_238 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].sounddriveby.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].sounddriveby.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_12) << ") selected in CHOICE VehicleCharacteristicsRanges_limits in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits'; message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                    }
                                                }
                                        }
                                        
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer.size() != 0) {
                                            // Field:  type(CompleteVehicleCharacteristics_trailer) name(trailer) extGroup(0)
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(3) span(3) ext(false)
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements.size();
                                            if(__aux64__ > 3) __aux64__ = 3;
                                            uint16_t* _tmp_239 = (uint16_t*)buffer;
                                            buffer += 2;
                                            *_tmp_239 = __aux64__ - 1;
                                            
                                            int __ifx = __aux64__;
                                            for(int x = 0; x < __ifx; x++) { 
                                                
                                                    // TrailerCharacteristics  SEQUENCE
                                                        //  equalTo    TrailerCharacteristics_equalTo      OPTIONAL  
                                                        //  notEqualTo TrailerCharacteristics_notEqualTo   OPTIONAL  
                                                        //  ranges     TrailerCharacteristics_ranges       OPTIONAL  
                                                    // Optional fields bytemap
                                                    char* _tmp_240 = (char*) buffer++;
                                                    *_tmp_240 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to.size() != 0 ? 1 : 0);
                                                    if(debug)
                                                        logger->print() << "|\033[38;5;94m000226\033[0m| Optional field equal_to = " << *_tmp_240;
                                                    char* _tmp_241 = (char*) buffer++;
                                                    *_tmp_241 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to.size() != 0 ? 1 : 0);
                                                    if(debug)
                                                        logger->print() << "|\033[38;5;94m000227\033[0m| Optional field not_equal_to = " << *_tmp_241;
                                                    char* _tmp_242 = (char*) buffer++;
                                                    *_tmp_242 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges.size() != 0 ? 1 : 0);
                                                    if(debug)
                                                        logger->print() << "|\033[38;5;94m000228\033[0m| Optional field ranges = " << *_tmp_242;
                                                    
                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to.size() != 0) {
                                                        // Field:  type(TrailerCharacteristics_equalTo) name(equal_to) extGroup(0)
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                        uint8_t* _ext_flag_154 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].
                                                        *_ext_flag_154 = 0; 
                                                        
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements.size();
                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                        uint16_t* _tmp_243 = (uint16_t*)buffer;
                                                        buffer += 2;
                                                        *_tmp_243 = __aux64__ - 1;
                                                        
                                                        int __ify = __aux64__;
                                                        for(int y = 0; y < __ify; y++) { 
                                                            
                                                            // Choice
                                                               // #0  simpleVehicleType   StationType
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                               // #2  iso3833VehicleType   Iso3833VehicleType
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                               // #4  engineCharacteristics   EngineCharacteristics
                                                               // #5  loadType   LoadType
                                                               // #6  usage   VehicleRole
                                                            uint8_t* _ext_flag_155 = (uint8_t*) buffer; 
                                                            buffer++;
                                                            *_ext_flag_155 = 0; 
                                                            
                                                            uint8_t* _choice_13 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                                *_choice_13 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000230\033[0m| Choice selection: 0";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000231\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_244 = (uint8_t*) buffer++;
                                                                *_tmp_244 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].simple_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].simple_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_13 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000232\033[0m| Choice selection: 1";
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                                uint8_t* _choice_14 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                    *_choice_14 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000233\033[0m| Choice selection: 0";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000234\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_245 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_245 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_14 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000235\033[0m| Choice selection: 1";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000236\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_246 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_246 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_14 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000237\033[0m| Choice selection: 2";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000238\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_247 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_247 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_14 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000239\033[0m| Choice selection: 3";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000240\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_248 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_248 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_14) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_13 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000241\033[0m| Choice selection: 2";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000242\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_249 = (uint8_t*) buffer++;
                                                                *_tmp_249 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].iso3833_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].iso3833_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_13 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000243\033[0m| Choice selection: 3";
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000244\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_250 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_250 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].euro_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].euro_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000245\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_251 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_251 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].cop_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].cop_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_13 = 4;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000246\033[0m| Choice selection: 4";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000247\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].engine_characteristics[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_252 = (uint8_t*) buffer++;
                                                                *_tmp_252 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].engine_characteristics[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].engine_characteristics[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_13 = 5;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000248\033[0m| Choice selection: 5";
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000249\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_166 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.
                                                                    *_ext_flag_166 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_166) {
                                                                        uint8_t* _tmp_254 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value <= INT32_MAX) {
                                                                            *_tmp_254 = 0;
                                                                        
                                                                            uint32_t* _tmp_253 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_253 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_254 = 1;
                                                                        
                                                                            uint64_t* _tmp_253 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_253 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_253 = (uint8_t*) buffer++;
                                                                        *_tmp_253 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value;
                                                                    }
                                                                    
                                                                    // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000250\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_255 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_255 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].dangerous_goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].dangerous_goods_type.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000251\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].special_transport_type.values.size());
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].special_transport_type.values.size() < 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].special_transport_type.values.size() > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_256 = (uint8_t*)buffer;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].special_transport_type.values.size();
                                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                                    *_tmp_256 = __aux64__ - 4;
                                                                    buffer += 1;
                                                                    
                                                                    int __ifz = __aux64__;
                                                                    for(int z = 0; z < __ifz; z++) {
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].special_transport_type.values[z]? 1: 0);
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_13 = 6;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000252\033[0m| Choice selection: 6";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000253\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].usage[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_257 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_257 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].usage[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].usage[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_13) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y]'; message dropped.";
                                                                return -1;
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to.size() != 0) {
                                                        // Field:  type(TrailerCharacteristics_notEqualTo) name(not_equal_to) extGroup(0)
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                        uint8_t* _ext_flag_169 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].
                                                        *_ext_flag_169 = 0; 
                                                        
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements.size();
                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                        uint16_t* _tmp_258 = (uint16_t*)buffer;
                                                        buffer += 2;
                                                        *_tmp_258 = __aux64__ - 1;
                                                        
                                                        int __ifa = __aux64__;
                                                        for(int a = 0; a < __ifa; a++) { 
                                                            
                                                            // Choice
                                                               // #0  simpleVehicleType   StationType
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                               // #2  iso3833VehicleType   Iso3833VehicleType
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                               // #4  engineCharacteristics   EngineCharacteristics
                                                               // #5  loadType   LoadType
                                                               // #6  usage   VehicleRole
                                                            uint8_t* _ext_flag_170 = (uint8_t*) buffer; 
                                                            buffer++;
                                                            *_ext_flag_170 = 0; 
                                                            
                                                            uint8_t* _choice_15 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                                *_choice_15 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000255\033[0m| Choice selection: 0";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000256\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_259 = (uint8_t*) buffer++;
                                                                *_tmp_259 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].simple_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].simple_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_15 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000257\033[0m| Choice selection: 1";
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                                uint8_t* _choice_16 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                    *_choice_16 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000258\033[0m| Choice selection: 0";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000259\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_260 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_260 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_16 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000260\033[0m| Choice selection: 1";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000261\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_261 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_261 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_16 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000262\033[0m| Choice selection: 2";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000263\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_262 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_262 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_16 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000264\033[0m| Choice selection: 3";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000265\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_263 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_263 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_16) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_15 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000266\033[0m| Choice selection: 2";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000267\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_264 = (uint8_t*) buffer++;
                                                                *_tmp_264 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].iso3833_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].iso3833_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_15 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000268\033[0m| Choice selection: 3";
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000269\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_265 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_265 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].euro_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].euro_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000270\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_266 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_266 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].cop_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].cop_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_15 = 4;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000271\033[0m| Choice selection: 4";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000272\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].engine_characteristics[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_267 = (uint8_t*) buffer++;
                                                                *_tmp_267 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].engine_characteristics[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].engine_characteristics[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_15 = 5;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000273\033[0m| Choice selection: 5";
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000274\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_181 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.
                                                                    *_ext_flag_181 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_181) {
                                                                        uint8_t* _tmp_269 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value <= INT32_MAX) {
                                                                            *_tmp_269 = 0;
                                                                        
                                                                            uint32_t* _tmp_268 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_268 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_269 = 1;
                                                                        
                                                                            uint64_t* _tmp_268 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_268 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_268 = (uint8_t*) buffer++;
                                                                        *_tmp_268 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value;
                                                                    }
                                                                    
                                                                    // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000275\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_270 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_270 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].dangerous_goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].dangerous_goods_type.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000276\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].special_transport_type.values.size());
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].special_transport_type.values.size() < 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].special_transport_type.values.size() > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_271 = (uint8_t*)buffer;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].special_transport_type.values.size();
                                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                                    *_tmp_271 = __aux64__ - 4;
                                                                    buffer += 1;
                                                                    
                                                                    int __ifb = __aux64__;
                                                                    for(int b = 0; b < __ifb; b++) {
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].special_transport_type.values[b]? 1: 0);
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_15 = 6;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000277\033[0m| Choice selection: 6";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000278\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].usage[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_272 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_272 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].usage[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].usage[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_15) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a]'; message dropped.";
                                                                return -1;
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges.size() != 0) {
                                                        // Field:  type(TrailerCharacteristics_ranges) name(ranges) extGroup(0)
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                        uint8_t* _ext_flag_184 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].
                                                        *_ext_flag_184 = 0; 
                                                        
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements.size();
                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                        uint16_t* _tmp_273 = (uint16_t*)buffer;
                                                        buffer += 2;
                                                        *_tmp_273 = __aux64__ - 1;
                                                        
                                                        int __ifc = __aux64__;
                                                        for(int c = 0; c < __ifc; c++) { 
                                                            
                                                                // VehicleCharacteristicsRanges  SEQUENCE
                                                                    //  comparisonOperator ComparisonOperator                      
                                                                    //  limits             VehicleCharacteristicsRanges_limits     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(ComparisonOperator) name(comparison_operator) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000280\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].comparison_operator.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].comparison_operator.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_274 = (uint8_t*) buffer++;
                                                                *_tmp_274 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].comparison_operator.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].comparison_operator.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].comparison_operator.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].comparison_operator.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(VehicleCharacteristicsRanges_limits) name(limits) extGroup(0)
                                                                // Choice
                                                                   // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles
                                                                   // #1  vehicleDimensions   VehicleDimensions
                                                                   // #2  vehicleWeightLimits   VehicleWeightLimits
                                                                   // #3  axleWeightLimits   AxleWeightLimits
                                                                   // #4  passengerCapacity   PassengerCapacity
                                                                   // #5  exhaustEmissionValues   ExhaustEmissionValues
                                                                   // #6  dieselEmissionValues   DieselEmissionValues
                                                                   // #7  soundLevel   SoundLevel
                                                                uint8_t* _ext_flag_186 = (uint8_t*) buffer; 
                                                                buffer++;
                                                                *_ext_flag_186 = 0; 
                                                                
                                                                uint8_t* _choice_17 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.number_of_axles.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    *_choice_17 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000281\033[0m| Choice selection: 0";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000282\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.number_of_axles[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.number_of_axles[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_275 = (uint8_t*) buffer++;
                                                                    *_tmp_275 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.number_of_axles[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.number_of_axles[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.number_of_axles[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.number_of_axles[0].value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_17 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000283\033[0m| Choice selection: 1";
                                                                
                                                                        // VehicleDimensions  SEQUENCE
                                                                            //  vehicleLengthOverall Int1           
                                                                            //  vehicleHeigthOverall Int1           
                                                                            //  vehicleWidthOverall  Int1           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int1) name(vehicle_length_overall) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000284\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_276 = (uint8_t*) buffer++;
                                                                        *_tmp_276 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_length_overall.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_length_overall.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(vehicle_heigth_overall) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000285\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_277 = (uint8_t*) buffer++;
                                                                        *_tmp_277 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_heigth_overall.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_heigth_overall.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(vehicle_width_overall) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000286\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_278 = (uint8_t*) buffer++;
                                                                        *_tmp_278 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_width_overall.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_width_overall.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_17 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000287\033[0m| Choice selection: 2";
                                                                
                                                                        // VehicleWeightLimits  SEQUENCE
                                                                            //  vehicleMaxLadenWeight     Int2           
                                                                            //  vehicleTrainMaximumWeight Int2           
                                                                            //  vehicleWeightUnladen      Int2           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int2) name(vehicle_max_laden_weight) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000288\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_279 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_279 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(vehicle_train_maximum_weight) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000289\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_280 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_280 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(vehicle_weight_unladen) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000290\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_281 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_281 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_17 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000291\033[0m| Choice selection: 3";
                                                                
                                                                        // AxleWeightLimits  SEQUENCE
                                                                            //  maxLadenweightOnAxle1 Int2           
                                                                            //  maxLadenweightOnAxle2 Int2           
                                                                            //  maxLadenweightOnAxle3 Int2           
                                                                            //  maxLadenweightOnAxle4 Int2           
                                                                            //  maxLadenweightOnAxle5 Int2           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle1) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000292\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_282 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_282 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle2) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000293\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_283 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_283 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle3) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000294\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_284 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_284 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle4) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000295\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_285 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_285 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle5) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000296\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_286 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_286 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_17 = 4;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000297\033[0m| Choice selection: 4";
                                                                
                                                                        // PassengerCapacity  SEQUENCE
                                                                            //  numberOfSeats          Int1           
                                                                            //  numberOfStandingPlaces Int1           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int1) name(number_of_seats) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000298\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_seats.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_287 = (uint8_t*) buffer++;
                                                                        *_tmp_287 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_seats.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_seats.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(number_of_standing_places) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000299\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_288 = (uint8_t*) buffer++;
                                                                        *_tmp_288 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_standing_places.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_standing_places.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_17 = 5;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000300\033[0m| Choice selection: 5";
                                                                
                                                                        // ExhaustEmissionValues  SEQUENCE
                                                                            //  unitType      UnitType                             
                                                                            //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                            //  emissionHC    Int2                                 
                                                                            //  emissionNOX   Int2                                 
                                                                            //  emissionHCNOX Int2                                 
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000301\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].unit_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_289 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_289 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].unit_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].unit_type.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(ExhaustEmissionValues_emissionCO) name(emission_co) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000302\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_co.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_290 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_290 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_co.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_co.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(emission_hc) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000303\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hc.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_291 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_291 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hc.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hc.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(emission_nox) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000304\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_nox.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_292 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_292 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_nox.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_nox.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(emission_hcnox) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000305\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_293 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_293 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hcnox.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_17 = 6;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000306\033[0m| Choice selection: 6";
                                                                
                                                                        // DieselEmissionValues  SEQUENCE
                                                                            //  particulate     DieselEmissionValues_particulate     
                                                                            //  absorptionCoeff Int2                                 
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(DieselEmissionValues_particulate) name(particulate) extGroup(0)
                                                                            // DieselEmissionValues_particulate  SEQUENCE
                                                                                //  unitType   UnitType                                   
                                                                                //  value      DieselEmissionValues_particulate_value     
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                            // Enumerated
                                                                            // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000307\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_294 = (uint8_t*)buffer;
                                                                            buffer += 1;
                                                                            *_tmp_294 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(DieselEmissionValues_particulate_value) name(value) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000308\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.value.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_295 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_295 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.value.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.value.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                                return -1;
                                                                            }
                                                                        
                                                                        // Field:  type(Int2) name(absorption_coeff) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000309\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_296 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_296 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].absorption_coeff.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level.size() != 0)  // CHOICE 7  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_17 = 7;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000310\033[0m| Choice selection: 7";
                                                                
                                                                        // SoundLevel  SEQUENCE
                                                                            //  soundstationary Int1           
                                                                            //  sounddriveby    Int1           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int1) name(soundstationary) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000311\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].soundstationary.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].soundstationary.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_297 = (uint8_t*) buffer++;
                                                                        *_tmp_297 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].soundstationary.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].soundstationary.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(sounddriveby) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000312\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].sounddriveby.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].sounddriveby.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_298 = (uint8_t*) buffer++;
                                                                        *_tmp_298 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].sounddriveby.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].sounddriveby.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_17) << ") selected in CHOICE VehicleCharacteristicsRanges_limits in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits'; message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                        }
                                                    }
                                                    
                                            }
                                        }
                                        
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train.size() != 0) {
                                            // Field:  type(TrainCharacteristics) name(train) extGroup(0)
                                                // TrainCharacteristics  SEQUENCE
                                                    //  equalTo    TractorCharacteristics_equalTo        
                                                    //  notEqualTo TractorCharacteristics_notEqualTo     
                                                    //  ranges     TractorCharacteristics_ranges         
                                                // Optional fields bytemap
                                                
                                                // Field:  type(TractorCharacteristics_equalTo) name(equal_to) extGroup(0)
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                uint8_t* _ext_flag_211 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.
                                                *_ext_flag_211 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements.size();
                                                if(__aux64__ > 4) __aux64__ = 4;
                                                uint16_t* _tmp_299 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_299 = __aux64__ - 1;
                                                
                                                int __ifd = __aux64__;
                                                for(int d = 0; d < __ifd; d++) { 
                                                    
                                                    // Choice
                                                       // #0  simpleVehicleType   StationType
                                                       // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                       // #2  iso3833VehicleType   Iso3833VehicleType
                                                       // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                       // #4  engineCharacteristics   EngineCharacteristics
                                                       // #5  loadType   LoadType
                                                       // #6  usage   VehicleRole
                                                    uint8_t* _ext_flag_212 = (uint8_t*) buffer; 
                                                    buffer++;
                                                    *_ext_flag_212 = 0; 
                                                    
                                                    uint8_t* _choice_18 = (uint8_t*) buffer;
                                                    buffer++;
                                                    
                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                        *_choice_18 = 0;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000314\033[0m| Choice selection: 0";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000315\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].simple_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].simple_vehicle_type[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_300 = (uint8_t*) buffer++;
                                                        *_tmp_300 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].simple_vehicle_type[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].simple_vehicle_type[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_18 = 1;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000316\033[0m| Choice selection: 1";
                                                    
                                                        // Choice
                                                           // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                           // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                           // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                           // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                        uint8_t* _choice_19 = (uint8_t*) buffer;
                                                        buffer++;
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                            *_choice_19 = 0;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000317\033[0m| Choice selection: 0";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(6) span(7) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000318\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_301 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_301 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                        {
                                                            *_choice_19 = 1;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000319\033[0m| Choice selection: 1";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000320\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_302 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_302 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                        {
                                                            *_choice_19 = 2;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000321\033[0m| Choice selection: 2";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000322\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_303 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_303 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                        {
                                                            *_choice_19 = 3;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000323\033[0m| Choice selection: 3";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(3) span(4) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000324\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_304 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_304 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_19) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0]'; message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_18 = 2;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000325\033[0m| Choice selection: 2";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000326\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].iso3833_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].iso3833_vehicle_type[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_305 = (uint8_t*) buffer++;
                                                        *_tmp_305 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].iso3833_vehicle_type[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].iso3833_vehicle_type[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_18 = 3;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000327\033[0m| Choice selection: 3";
                                                    
                                                            // EnvironmentalCharacteristics  SEQUENCE
                                                                //  euroValue  EuroValue      
                                                                //  copValue   CopValue       
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000328\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].euro_value.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].euro_value.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_306 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_306 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].euro_value.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].euro_value.value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                            // Enumerated
                                                            // INT32  min(0) max(8) span(9) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000329\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].cop_value.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].cop_value.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_307 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_307 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].cop_value.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].cop_value.value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_18 = 4;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000330\033[0m| Choice selection: 4";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000331\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].engine_characteristics[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].engine_characteristics[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_308 = (uint8_t*) buffer++;
                                                        *_tmp_308 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].engine_characteristics[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].engine_characteristics[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_18 = 5;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000332\033[0m| Choice selection: 5";
                                                    
                                                            // LoadType  SEQUENCE
                                                                //  goodsType            GoodsType                
                                                                //  dangerousGoodsType   DangerousGoodsBasic      
                                                                //  specialTransportType SpecialTransportType     
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000333\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value);
                                                            }
                                                            
                                                            uint8_t* _ext_flag_223 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.
                                                            *_ext_flag_223 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                            
                                                            if(*_ext_flag_223) {
                                                                uint8_t* _tmp_310 = (uint8_t*) buffer++; 
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value <= INT32_MAX) {
                                                                    *_tmp_310 = 0;
                                                                
                                                                    uint32_t* _tmp_309 = (uint32_t*)buffer; buffer += 4;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value;
                                                                    __aux64__ -= INT32_MIN;
                                                                    *_tmp_309 = __aux64__;
                                                                } 
                                                                else
                                                                {
                                                                    *_tmp_310 = 1;
                                                                
                                                                    uint64_t* _tmp_309 = (uint64_t*)buffer; buffer += 8;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value;
                                                                    __aux64__ -= INT64_MIN;
                                                                    *_tmp_309 = __aux64__;
                                                                }
                                                            } else {
                                                                uint8_t* _tmp_309 = (uint8_t*) buffer++;
                                                                *_tmp_309 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value;
                                                            }
                                                            
                                                            // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                            // Enumerated
                                                            // INT32  min(0) max(19) span(20) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000334\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].dangerous_goods_type.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].dangerous_goods_type.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_311 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_311 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].dangerous_goods_type.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].dangerous_goods_type.value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000335\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].special_transport_type.values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].special_transport_type.values.size() < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].special_transport_type.values.size() > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_312 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].special_transport_type.values.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            *_tmp_312 = __aux64__ - 4;
                                                            buffer += 1;
                                                            
                                                            int __ife = __aux64__;
                                                            for(int e = 0; e < __ife; e++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].special_transport_type.values[e]? 1: 0);
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_18 = 6;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000336\033[0m| Choice selection: 6";
                                                    
                                                        // Enumerated
                                                        // INT32  min(0) max(15) span(16) dataType(Int32)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000337\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].usage[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].usage[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_313 = (uint8_t*)buffer;
                                                        buffer += 1;
                                                        *_tmp_313 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].usage[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].usage[0].value; 
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else
                                                    {
                                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_18) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d]'; message dropped.";
                                                        return -1;
                                                    }
                                                }
                                                
                                                // Field:  type(TractorCharacteristics_notEqualTo) name(not_equal_to) extGroup(0)
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                uint8_t* _ext_flag_226 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.
                                                *_ext_flag_226 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements.size();
                                                if(__aux64__ > 4) __aux64__ = 4;
                                                uint16_t* _tmp_314 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_314 = __aux64__ - 1;
                                                
                                                int __iff = __aux64__;
                                                for(int f = 0; f < __iff; f++) { 
                                                    
                                                    // Choice
                                                       // #0  simpleVehicleType   StationType
                                                       // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                       // #2  iso3833VehicleType   Iso3833VehicleType
                                                       // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                       // #4  engineCharacteristics   EngineCharacteristics
                                                       // #5  loadType   LoadType
                                                       // #6  usage   VehicleRole
                                                    uint8_t* _ext_flag_227 = (uint8_t*) buffer; 
                                                    buffer++;
                                                    *_ext_flag_227 = 0; 
                                                    
                                                    uint8_t* _choice_20 = (uint8_t*) buffer;
                                                    buffer++;
                                                    
                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                        *_choice_20 = 0;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000339\033[0m| Choice selection: 0";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000340\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].simple_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].simple_vehicle_type[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_315 = (uint8_t*) buffer++;
                                                        *_tmp_315 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].simple_vehicle_type[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].simple_vehicle_type[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_20 = 1;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000341\033[0m| Choice selection: 1";
                                                    
                                                        // Choice
                                                           // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                           // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                           // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                           // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                        uint8_t* _choice_21 = (uint8_t*) buffer;
                                                        buffer++;
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                            *_choice_21 = 0;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000342\033[0m| Choice selection: 0";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(6) span(7) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000343\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_316 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_316 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                        {
                                                            *_choice_21 = 1;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000344\033[0m| Choice selection: 1";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000345\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_317 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_317 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                        {
                                                            *_choice_21 = 2;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000346\033[0m| Choice selection: 2";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000347\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_318 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_318 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                        {
                                                            *_choice_21 = 3;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000348\033[0m| Choice selection: 3";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(3) span(4) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000349\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_319 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_319 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_21) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0]'; message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_20 = 2;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000350\033[0m| Choice selection: 2";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000351\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].iso3833_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].iso3833_vehicle_type[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_320 = (uint8_t*) buffer++;
                                                        *_tmp_320 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].iso3833_vehicle_type[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].iso3833_vehicle_type[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_20 = 3;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000352\033[0m| Choice selection: 3";
                                                    
                                                            // EnvironmentalCharacteristics  SEQUENCE
                                                                //  euroValue  EuroValue      
                                                                //  copValue   CopValue       
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000353\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].euro_value.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].euro_value.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_321 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_321 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].euro_value.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].euro_value.value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                            // Enumerated
                                                            // INT32  min(0) max(8) span(9) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000354\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].cop_value.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].cop_value.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_322 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_322 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].cop_value.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].cop_value.value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_20 = 4;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000355\033[0m| Choice selection: 4";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000356\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].engine_characteristics[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].engine_characteristics[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_323 = (uint8_t*) buffer++;
                                                        *_tmp_323 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].engine_characteristics[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].engine_characteristics[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_20 = 5;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000357\033[0m| Choice selection: 5";
                                                    
                                                            // LoadType  SEQUENCE
                                                                //  goodsType            GoodsType                
                                                                //  dangerousGoodsType   DangerousGoodsBasic      
                                                                //  specialTransportType SpecialTransportType     
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000358\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value);
                                                            }
                                                            
                                                            uint8_t* _ext_flag_238 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.
                                                            *_ext_flag_238 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                            
                                                            if(*_ext_flag_238) {
                                                                uint8_t* _tmp_325 = (uint8_t*) buffer++; 
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value <= INT32_MAX) {
                                                                    *_tmp_325 = 0;
                                                                
                                                                    uint32_t* _tmp_324 = (uint32_t*)buffer; buffer += 4;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value;
                                                                    __aux64__ -= INT32_MIN;
                                                                    *_tmp_324 = __aux64__;
                                                                } 
                                                                else
                                                                {
                                                                    *_tmp_325 = 1;
                                                                
                                                                    uint64_t* _tmp_324 = (uint64_t*)buffer; buffer += 8;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value;
                                                                    __aux64__ -= INT64_MIN;
                                                                    *_tmp_324 = __aux64__;
                                                                }
                                                            } else {
                                                                uint8_t* _tmp_324 = (uint8_t*) buffer++;
                                                                *_tmp_324 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value;
                                                            }
                                                            
                                                            // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                            // Enumerated
                                                            // INT32  min(0) max(19) span(20) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000359\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].dangerous_goods_type.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].dangerous_goods_type.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_326 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_326 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].dangerous_goods_type.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].dangerous_goods_type.value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000360\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].special_transport_type.values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].special_transport_type.values.size() < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].special_transport_type.values.size() > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_327 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].special_transport_type.values.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            *_tmp_327 = __aux64__ - 4;
                                                            buffer += 1;
                                                            
                                                            int __ifg = __aux64__;
                                                            for(int g = 0; g < __ifg; g++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].special_transport_type.values[g]? 1: 0);
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                    {
                                                        *_choice_20 = 6;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000361\033[0m| Choice selection: 6";
                                                    
                                                        // Enumerated
                                                        // INT32  min(0) max(15) span(16) dataType(Int32)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000362\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].usage[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].usage[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_328 = (uint8_t*)buffer;
                                                        buffer += 1;
                                                        *_tmp_328 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].usage[0].value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].usage[0].value; 
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else
                                                    {
                                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_20) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f]'; message dropped.";
                                                        return -1;
                                                    }
                                                }
                                                
                                                // Field:  type(TractorCharacteristics_ranges) name(ranges) extGroup(0)
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                uint8_t* _ext_flag_241 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.
                                                *_ext_flag_241 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements.size();
                                                if(__aux64__ > 4) __aux64__ = 4;
                                                uint16_t* _tmp_329 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_329 = __aux64__ - 1;
                                                
                                                int __ifh = __aux64__;
                                                for(int h = 0; h < __ifh; h++) { 
                                                    
                                                        // VehicleCharacteristicsRanges  SEQUENCE
                                                            //  comparisonOperator ComparisonOperator                      
                                                            //  limits             VehicleCharacteristicsRanges_limits     
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(ComparisonOperator) name(comparison_operator) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000364\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].comparison_operator.value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].comparison_operator.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_330 = (uint8_t*) buffer++;
                                                        *_tmp_330 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].comparison_operator.value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].comparison_operator.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].comparison_operator.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].comparison_operator.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(VehicleCharacteristicsRanges_limits) name(limits) extGroup(0)
                                                        // Choice
                                                           // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles
                                                           // #1  vehicleDimensions   VehicleDimensions
                                                           // #2  vehicleWeightLimits   VehicleWeightLimits
                                                           // #3  axleWeightLimits   AxleWeightLimits
                                                           // #4  passengerCapacity   PassengerCapacity
                                                           // #5  exhaustEmissionValues   ExhaustEmissionValues
                                                           // #6  dieselEmissionValues   DieselEmissionValues
                                                           // #7  soundLevel   SoundLevel
                                                        uint8_t* _ext_flag_243 = (uint8_t*) buffer; 
                                                        buffer++;
                                                        *_ext_flag_243 = 0; 
                                                        
                                                        uint8_t* _choice_22 = (uint8_t*) buffer;
                                                        buffer++;
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.number_of_axles.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            *_choice_22 = 0;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000365\033[0m| Choice selection: 0";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000366\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.number_of_axles[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.number_of_axles[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_331 = (uint8_t*) buffer++;
                                                            *_tmp_331 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.number_of_axles[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.number_of_axles[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.number_of_axles[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.number_of_axles[0].value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsRanges_limits) 
                                                        {
                                                            *_choice_22 = 1;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000367\033[0m| Choice selection: 1";
                                                        
                                                                // VehicleDimensions  SEQUENCE
                                                                    //  vehicleLengthOverall Int1           
                                                                    //  vehicleHeigthOverall Int1           
                                                                    //  vehicleWidthOverall  Int1           
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(Int1) name(vehicle_length_overall) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000368\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_332 = (uint8_t*) buffer++;
                                                                *_tmp_332 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_length_overall.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_length_overall.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int1) name(vehicle_heigth_overall) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000369\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_333 = (uint8_t*) buffer++;
                                                                *_tmp_333 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_heigth_overall.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_heigth_overall.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int1) name(vehicle_width_overall) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000370\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_334 = (uint8_t*) buffer++;
                                                                *_tmp_334 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_width_overall.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_width_overall.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsRanges_limits) 
                                                        {
                                                            *_choice_22 = 2;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000371\033[0m| Choice selection: 2";
                                                        
                                                                // VehicleWeightLimits  SEQUENCE
                                                                    //  vehicleMaxLadenWeight     Int2           
                                                                    //  vehicleTrainMaximumWeight Int2           
                                                                    //  vehicleWeightUnladen      Int2           
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(Int2) name(vehicle_max_laden_weight) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000372\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_335 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_335 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(vehicle_train_maximum_weight) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000373\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_336 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_336 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(vehicle_weight_unladen) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000374\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_337 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_337 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsRanges_limits) 
                                                        {
                                                            *_choice_22 = 3;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000375\033[0m| Choice selection: 3";
                                                        
                                                                // AxleWeightLimits  SEQUENCE
                                                                    //  maxLadenweightOnAxle1 Int2           
                                                                    //  maxLadenweightOnAxle2 Int2           
                                                                    //  maxLadenweightOnAxle3 Int2           
                                                                    //  maxLadenweightOnAxle4 Int2           
                                                                    //  maxLadenweightOnAxle5 Int2           
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(Int2) name(max_ladenweight_on_axle1) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000376\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_338 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_338 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(max_ladenweight_on_axle2) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000377\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_339 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_339 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(max_ladenweight_on_axle3) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000378\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_340 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_340 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(max_ladenweight_on_axle4) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000379\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_341 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_341 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(max_ladenweight_on_axle5) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000380\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_342 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_342 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsRanges_limits) 
                                                        {
                                                            *_choice_22 = 4;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000381\033[0m| Choice selection: 4";
                                                        
                                                                // PassengerCapacity  SEQUENCE
                                                                    //  numberOfSeats          Int1           
                                                                    //  numberOfStandingPlaces Int1           
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(Int1) name(number_of_seats) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000382\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_seats.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_343 = (uint8_t*) buffer++;
                                                                *_tmp_343 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_seats.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_seats.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int1) name(number_of_standing_places) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000383\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_344 = (uint8_t*) buffer++;
                                                                *_tmp_344 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_standing_places.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_standing_places.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsRanges_limits) 
                                                        {
                                                            *_choice_22 = 5;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000384\033[0m| Choice selection: 5";
                                                        
                                                                // ExhaustEmissionValues  SEQUENCE
                                                                    //  unitType      UnitType                             
                                                                    //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                    //  emissionHC    Int2                                 
                                                                    //  emissionNOX   Int2                                 
                                                                    //  emissionHCNOX Int2                                 
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000385\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].unit_type.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_345 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_345 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].unit_type.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].unit_type.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(ExhaustEmissionValues_emissionCO) name(emission_co) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000386\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_co.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_346 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_346 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_co.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_co.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(emission_hc) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000387\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hc.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_347 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_347 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hc.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hc.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(emission_nox) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000388\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_nox.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_348 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_348 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_nox.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_nox.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int2) name(emission_hcnox) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000389\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_349 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_349 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hcnox.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsRanges_limits) 
                                                        {
                                                            *_choice_22 = 6;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000390\033[0m| Choice selection: 6";
                                                        
                                                                // DieselEmissionValues  SEQUENCE
                                                                    //  particulate     DieselEmissionValues_particulate     
                                                                    //  absorptionCoeff Int2                                 
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(DieselEmissionValues_particulate) name(particulate) extGroup(0)
                                                                    // DieselEmissionValues_particulate  SEQUENCE
                                                                        //  unitType   UnitType                                   
                                                                        //  value      DieselEmissionValues_particulate_value     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000391\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_350 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_350 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(DieselEmissionValues_particulate_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000392\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_351 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_351 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                // Field:  type(Int2) name(absorption_coeff) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000393\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                }
                                                                
                                                                uint16_t* _tmp_352 = (uint16_t*) buffer; buffer += 2;
                                                                *_tmp_352 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].absorption_coeff.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level.size() != 0)  // CHOICE 7  fieldType(VehicleCharacteristicsRanges_limits) 
                                                        {
                                                            *_choice_22 = 7;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000394\033[0m| Choice selection: 7";
                                                        
                                                                // SoundLevel  SEQUENCE
                                                                    //  soundstationary Int1           
                                                                    //  sounddriveby    Int1           
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(Int1) name(soundstationary) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000395\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].soundstationary.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].soundstationary.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_353 = (uint8_t*) buffer++;
                                                                *_tmp_353 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].soundstationary.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].soundstationary.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(Int1) name(sounddriveby) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000396\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].sounddriveby.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].sounddriveby.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_354 = (uint8_t*) buffer++;
                                                                *_tmp_354 = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].sounddriveby.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].sounddriveby.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_22) << ") selected in CHOICE VehicleCharacteristicsRanges_limits in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits'; message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                }
                                        }
                                        
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics.size() != 0) {
                                // Field:  type(DriverCharacteristics) name(driver_characteristics) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000397\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics[0].value) << 
                                                 " ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics[0].value);
                                }
                                
                                uint8_t* _tmp_355 = (uint8_t*) buffer++;
                                *_tmp_355 = ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics[0].value; 
                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics[0].value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                    return -1;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id.size() != 0) {
                                // Field:  type(GicPart_layoutId) name(layout_id) extGroup(0)
                                // Integer
                                
                                // UINT8  min(1) max(4) span(4) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000398\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value) << 
                                                 " ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value);
                                }
                                
                                uint8_t* _ext_flag_269 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].
                                *_ext_flag_269 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value >= 1 && ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value <= 4) ? 0 : 1;
                                
                                if(*_ext_flag_269) {
                                    uint8_t* _tmp_357 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value <= INT32_MAX) {
                                        *_tmp_357 = 0;
                                    
                                        uint32_t* _tmp_356 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_356 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_357 = 1;
                                    
                                        uint64_t* _tmp_356 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_356 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_356 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value - 1;
                                    *_tmp_356 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id.size() != 0) {
                                // Field:  type(GicPart_preStoredlayoutId) name(pre_storedlayout_id) extGroup(0)
                                // Integer
                                
                                // UINT8  min(1) max(64) span(64) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000399\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value) << 
                                                 " ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value);
                                }
                                
                                uint8_t* _ext_flag_270 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].
                                *_ext_flag_270 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value >= 1 && ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value <= 64) ? 0 : 1;
                                
                                if(*_ext_flag_270) {
                                    uint8_t* _tmp_359 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value <= INT32_MAX) {
                                        *_tmp_359 = 0;
                                    
                                        uint32_t* _tmp_358 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_358 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_359 = 1;
                                    
                                        uint64_t* _tmp_358 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_358 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_358 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value - 1;
                                    *_tmp_358 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value;
                                }
                            }
                            
                            // Field:  type(GicPart_roadSignCodes) name(road_sign_codes) extGroup(0)
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                            uint8_t* _ext_flag_271 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.
                            *_ext_flag_271 = 0; 
                            
                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements.size();
                            if(__aux64__ > 4) __aux64__ = 4;
                            uint16_t* _tmp_360 = (uint16_t*)buffer;
                            buffer += 2;
                            *_tmp_360 = __aux64__ - 1;
                            
                            int __ifi = __aux64__;
                            for(int i = 0; i < __ifi; i++) { 
                                
                                    // RSCode  SEQUENCE
                                        //  layoutComponentId RSCode_layoutComponentId   OPTIONAL  
                                        //  code              RSCode_code                  
                                    // Optional fields bytemap
                                    char* _tmp_361 = (char*) buffer++;
                                    *_tmp_361 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id.size() != 0 ? 1 : 0);
                                    if(debug)
                                        logger->print() << "|\033[38;5;94m000401\033[0m| Optional field layout_component_id = " << *_tmp_361;
                                    
                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id.size() != 0) {
                                        // Field:  type(RSCode_layoutComponentId) name(layout_component_id) extGroup(0)
                                        // Integer
                                        
                                        // UINT8  min(1) max(4) span(4) dataType(UInt8)
                                        if(debug) {
                                            logger->print() << "|\033[38;5;94m000402\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value) << 
                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value);
                                        }
                                        
                                        uint8_t* _ext_flag_272 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].
                                        *_ext_flag_272 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value >= 1 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value <= 4) ? 0 : 1;
                                        
                                        if(*_ext_flag_272) {
                                            uint8_t* _tmp_363 = (uint8_t*) buffer++; 
                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value <= INT32_MAX) {
                                                *_tmp_363 = 0;
                                            
                                                uint32_t* _tmp_362 = (uint32_t*)buffer; buffer += 4;
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value;
                                                __aux64__ -= INT32_MIN;
                                                *_tmp_362 = __aux64__;
                                            } 
                                            else
                                            {
                                                *_tmp_363 = 1;
                                            
                                                uint64_t* _tmp_362 = (uint64_t*)buffer; buffer += 8;
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value;
                                                __aux64__ -= INT64_MIN;
                                                *_tmp_362 = __aux64__;
                                            }
                                        } else {
                                            uint8_t* _tmp_362 = (uint8_t*) buffer++;
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value - 1;
                                            *_tmp_362 = __aux64__;
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value;
                                        }
                                    }
                                    
                                    // Field:  type(RSCode_code) name(code) extGroup(0)
                                    // Choice
                                       // #0  viennaConvention   VcCode
                                       // #1  iso14823   ISO14823Code
                                       // #2  itisCodes   RSCode_code_itisCodes
                                       // #3  anyCatalogue   AnyCatalogue
                                    uint8_t* _ext_flag_273 = (uint8_t*) buffer; 
                                    buffer++;
                                    *_ext_flag_273 = 0; 
                                    
                                    uint8_t* _choice_23 = (uint8_t*) buffer;
                                    buffer++;
                                    
                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention.size() != 0) {  // CHOICE 0  fieldType(RSCode_code) 
                                        *_choice_23 = 0;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000403\033[0m| Choice selection: 0";
                                    
                                            // VcCode  SEQUENCE
                                                //  roadSignClass VcClass                 
                                                //  roadSignCode  VcCode_roadSignCode     
                                                //  vcOption      VcOption                
                                                //  validity      VcCode_validity       OPTIONAL  
                                                //  value         VcCode_value          OPTIONAL  
                                                //  unit          RSCUnit               OPTIONAL  
                                            // Optional fields bytemap
                                            char* _tmp_364 = (char*) buffer++;
                                            *_tmp_364 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000404\033[0m| Optional field validity = " << *_tmp_364;
                                            char* _tmp_365 = (char*) buffer++;
                                            *_tmp_365 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000405\033[0m| Optional field value = " << *_tmp_365;
                                            char* _tmp_366 = (char*) buffer++;
                                            *_tmp_366 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000406\033[0m| Optional field unit = " << *_tmp_366;
                                            
                                            // Field:  type(VcClass) name(road_sign_class) extGroup(0)
                                            // Integer
                                            
                                            // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                            if(debug) {
                                                logger->print() << "|\033[38;5;94m000407\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_class.value) << 
                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_class.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_class.value);
                                            }
                                            
                                            uint8_t* _tmp_367 = (uint8_t*) buffer++;
                                            *_tmp_367 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_class.value; 
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_class.value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_class.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_class.value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                return -1;
                                            }
                                            
                                            // Field:  type(VcCode_roadSignCode) name(road_sign_code) extGroup(0)
                                            // Integer
                                            
                                            // UINT8  min(1) max(64) span(64) dataType(UInt8)
                                            if(debug) {
                                                logger->print() << "|\033[38;5;94m000408\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_code.value) << 
                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_code.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_code.value);
                                            }
                                            
                                            uint8_t* _tmp_368 = (uint8_t*) buffer++;
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_code.value - 1;
                                            *_tmp_368 = __aux64__;
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_code.value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_code.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 64) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_code.value' (" << __aux64__ << ") exceeds max allowable (64); message dropped.";
                                                return -1;
                                            }
                                            
                                            // Field:  type(VcOption) name(vc_option) extGroup(0)
                                            // Integer
                                            
                                            // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                            if(debug) {
                                                logger->print() << "|\033[38;5;94m000409\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].vc_option.value) << 
                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].vc_option.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].vc_option.value);
                                            }
                                            
                                            uint8_t* _tmp_369 = (uint8_t*) buffer++;
                                            *_tmp_369 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].vc_option.value; 
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].vc_option.value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].vc_option.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].vc_option.value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                return -1;
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity.size() != 0) {
                                                // Field:  type(VcCode_validity) name(validity) extGroup(0)
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                                uint8_t* _ext_flag_277 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].
                                                *_ext_flag_277 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements.size();
                                                if(__aux64__ > 8) __aux64__ = 8;
                                                uint16_t* _tmp_370 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_370 = __aux64__ - 1;
                                                
                                                int __ifj = __aux64__;
                                                for(int j = 0; j < __ifj; j++) { 
                                                    
                                                        // DTM  SEQUENCE
                                                            //  year        DTM_year          OPTIONAL  
                                                            //  month_day   DTM_month_day     OPTIONAL  
                                                            //  pmd         PMD               OPTIONAL  
                                                            //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                            //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                            //  period      HoursMinutes      OPTIONAL  
                                                        // Optional fields bytemap
                                                        char* _tmp_371 = (char*) buffer++;
                                                        *_tmp_371 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->print() << "|\033[38;5;94m000411\033[0m| Optional field year = " << *_tmp_371;
                                                        char* _tmp_372 = (char*) buffer++;
                                                        *_tmp_372 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->print() << "|\033[38;5;94m000412\033[0m| Optional field month_day = " << *_tmp_372;
                                                        char* _tmp_373 = (char*) buffer++;
                                                        *_tmp_373 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->print() << "|\033[38;5;94m000413\033[0m| Optional field pmd = " << *_tmp_373;
                                                        char* _tmp_374 = (char*) buffer++;
                                                        *_tmp_374 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->print() << "|\033[38;5;94m000414\033[0m| Optional field hour_minutes = " << *_tmp_374;
                                                        char* _tmp_375 = (char*) buffer++;
                                                        *_tmp_375 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->print() << "|\033[38;5;94m000415\033[0m| Optional field day_of_week = " << *_tmp_375;
                                                        char* _tmp_376 = (char*) buffer++;
                                                        *_tmp_376 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->print() << "|\033[38;5;94m000416\033[0m| Optional field period = " << *_tmp_376;
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year.size() != 0) {
                                                            // Field:  type(DTM_year) name(year) extGroup(0)
                                                                // DTM_year  SEQUENCE
                                                                    //  syr        DTM_year_syr     
                                                                    //  eyr        DTM_year_eyr     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(DTM_year_syr) name(syr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000417\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_278 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.
                                                                *_ext_flag_278 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value >= 2000 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value <= 2127) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_278) {
                                                                    uint8_t* _tmp_378 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value <= INT32_MAX) {
                                                                        *_tmp_378 = 0;
                                                                    
                                                                        uint32_t* _tmp_377 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_377 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_378 = 1;
                                                                    
                                                                        uint64_t* _tmp_377 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_377 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_377 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value - 2000;
                                                                    *_tmp_377 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value;
                                                                }
                                                                
                                                                // Field:  type(DTM_year_eyr) name(eyr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000418\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_279 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.
                                                                *_ext_flag_279 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value >= 2000 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value <= 2127) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_279) {
                                                                    uint8_t* _tmp_380 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value <= INT32_MAX) {
                                                                        *_tmp_380 = 0;
                                                                    
                                                                        uint32_t* _tmp_379 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_379 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_380 = 1;
                                                                    
                                                                        uint64_t* _tmp_379 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_379 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_379 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value - 2000;
                                                                    *_tmp_379 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value;
                                                                }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day.size() != 0) {
                                                            // Field:  type(DTM_month_day) name(month_day) extGroup(0)
                                                                // DTM_month_day  SEQUENCE
                                                                    //  smd        MonthDay       
                                                                    //  emd        MonthDay       
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(MonthDay) name(smd) extGroup(0)
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000419\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.month.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.month.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_381 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.month.value - 1;
                                                                    *_tmp_381 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.month.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000420\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.day.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.day.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_382 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.day.value - 1;
                                                                    *_tmp_382 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.day.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                // Field:  type(MonthDay) name(emd) extGroup(0)
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000421\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.month.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.month.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_383 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.month.value - 1;
                                                                    *_tmp_383 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.month.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000422\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.day.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.day.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_384 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.day.value - 1;
                                                                    *_tmp_384 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.day.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                        return -1;
                                                                    }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd.size() != 0) {
                                                            // Field:  type(PMD) name(pmd) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000423\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd[0].values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd[0].values.size() < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd[0].values.size()) << " is less than allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd[0].values.size() > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd[0].values.size()) << " exceeds max allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_385 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd[0].values.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            *_tmp_385 = __aux64__ - 4;
                                                            buffer += 1;
                                                            
                                                            int __ifk = __aux64__;
                                                            for(int k = 0; k < __ifk; k++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd[0].values[k]? 1: 0);
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes.size() != 0) {
                                                            // Field:  type(DTM_hourMinutes) name(hour_minutes) extGroup(0)
                                                                // DTM_hourMinutes  SEQUENCE
                                                                    //  shm        HoursMinutes     
                                                                    //  ehm        HoursMinutes     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(HoursMinutes) name(shm) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000424\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_386 = (uint8_t*) buffer++;
                                                                    *_tmp_386 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000425\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_387 = (uint8_t*) buffer++;
                                                                    *_tmp_387 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                // Field:  type(HoursMinutes) name(ehm) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000426\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_388 = (uint8_t*) buffer++;
                                                                    *_tmp_388 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000427\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_389 = (uint8_t*) buffer++;
                                                                    *_tmp_389 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week.size() != 0) {
                                                            // Field:  type(DayOfWeek) name(day_of_week) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(8) max(8) span(1)
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000428\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week[0].values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week[0].values.size() < 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week[0].values.size()) << " is less than allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week[0].values.size() > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week[0].values.size()) << " exceeds max allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_390 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week[0].values.size();
                                                            if(__aux64__ > 8) __aux64__ = 8;
                                                            *_tmp_390 = __aux64__ - 8;
                                                            buffer += 1;
                                                            
                                                            int __ifl = __aux64__;
                                                            for(int l = 0; l < __ifl; l++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week[0].values[l]? 1: 0);
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period.size() != 0) {
                                                            // Field:  type(HoursMinutes) name(period) extGroup(0)
                                                                // HoursMinutes  SEQUENCE
                                                                    //  hours      HoursMinutes_hours     
                                                                    //  mins       HoursMinutes_mins      
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000429\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].hours.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].hours.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_391 = (uint8_t*) buffer++;
                                                                *_tmp_391 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].hours.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].hours.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000430\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].mins.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].mins.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_392 = (uint8_t*) buffer++;
                                                                *_tmp_392 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].mins.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].mins.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                    return -1;
                                                                }
                                                        }
                                                        
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value.size() != 0) {
                                                // Field:  type(VcCode_value) name(value) extGroup(0)
                                                // Integer
                                                
                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                if(debug) {
                                                    logger->print() << "|\033[38;5;94m000431\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value[0].value) << 
                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value[0].value;
                                                }
                                                
                                                uint16_t* _tmp_393 = (uint16_t*) buffer; buffer += 2;
                                                *_tmp_393 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value[0].value; 
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value[0].value;
                                                
                                                // MIN validator
                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                    return -1;
                                                }
                                                // MAX validator
                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value[0].value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                    return -1;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit.size() != 0) {
                                                // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                // Integer
                                                
                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                if(debug) {
                                                    logger->print() << "|\033[38;5;94m000432\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit[0].value) << 
                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit[0].value);
                                                }
                                                
                                                uint8_t* _tmp_394 = (uint8_t*) buffer++;
                                                *_tmp_394 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit[0].value; 
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit[0].value;
                                                
                                                // MIN validator
                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                    return -1;
                                                }
                                                // MAX validator
                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                    return -1;
                                                }
                                            }
                                    
                                    }
                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823.size() != 0)  // CHOICE 1  fieldType(RSCode_code) 
                                    {
                                        *_choice_23 = 1;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000433\033[0m| Choice selection: 1";
                                    
                                            // ISO14823Code  SEQUENCE
                                                //  pictogramCode ISO14823Code_pictogramCode     
                                                //  attributes    ISO14823Attributes           OPTIONAL  
                                            // Optional fields bytemap
                                            char* _tmp_395 = (char*) buffer++;
                                            *_tmp_395 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000434\033[0m| Optional field attributes = " << *_tmp_395;
                                            
                                            // Field:  type(ISO14823Code_pictogramCode) name(pictogram_code) extGroup(0)
                                                // ISO14823Code_pictogramCode  SEQUENCE
                                                    //  countryCode           ISO14823Code_pictogramCode_countryCode             OPTIONAL  
                                                    //  serviceCategoryCode   ISO14823Code_pictogramCode_serviceCategoryCode       
                                                    //  pictogramCategoryCode ISO14823Code_pictogramCode_pictogramCategoryCode     
                                                // Optional fields bytemap
                                                char* _tmp_396 = (char*) buffer++;
                                                *_tmp_396 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code.size() != 0 ? 1 : 0);
                                                if(debug)
                                                    logger->print() << "|\033[38;5;94m000435\033[0m| Optional field country_code = " << *_tmp_396;
                                                
                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code.size() != 0) {
                                                    // Field:  type(ISO14823Code_pictogramCode_countryCode) name(country_code) extGroup(0)
                                                    // OctetString
                                                    // OCTET_STRING  min(2) max(2) span(1)
                                                    
                                                    if(debug)
                                                        logger->print() << "|\033[38;5;94m000436\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code[0].values.size(): ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code[0]" << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code[0].values.size());
                                                    
                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code[0].values.size() < 2) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code[0].value' (" << 
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code[0].values.size() << ") is less than allowable (2); message dropped.";
                                                        return -1;
                                                    }
                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code[0].values.size() > 2) {
                                                        logger->warning() << "Error: Value in 'ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code[0].value' (" << 
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code[0].values.size() << ") exceeds max allowable (2); message dropped.";
                                                        return -1;
                                                    }
                                                    uint8_t* _tmp_397 = (uint8_t*)buffer;
                                                    buffer += 1;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code[0].values.size();
                                                    if(__aux64__ > 2) __aux64__ = 2;
                                                    *_tmp_397 = __aux64__ - 2;
                                                    
                                                    int __ifm = __aux64__;
                                                    for(int m = 0; m < __ifm; m++) {
                                                        int8_t* __m__ = (int8_t*)buffer++;
                                                        *__m__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code[0].values[m];
                                                    }
                                                }
                                                
                                                // Field:  type(ISO14823Code_pictogramCode_serviceCategoryCode) name(service_category_code) extGroup(0)
                                                // Choice
                                                   // #0  trafficSignPictogram   ISO14823Code_pictogramCode_serviceCategoryCode_trafficSignPictogram
                                                   // #1  publicFacilitiesPictogram   ISO14823Code_pictogramCode_serviceCategoryCode_publicFacilitiesPictogram
                                                   // #2  ambientOrRoadConditionPictogram   ISO14823Code_pictogramCode_serviceCategoryCode_ambientOrRoadConditionPictogram
                                                uint8_t* _ext_flag_292 = (uint8_t*) buffer; 
                                                buffer++;
                                                *_ext_flag_292 = 0; 
                                                
                                                uint8_t* _choice_24 = (uint8_t*) buffer;
                                                buffer++;
                                                
                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram.size() != 0) {  // CHOICE 0  fieldType(ISO14823Code_pictogramCode_serviceCategoryCode) 
                                                    *_choice_24 = 0;  // Setting choice selection
                                                
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m000437\033[0m| Choice selection: 0";
                                                
                                                    // Enumerated
                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                    uint8_t* _ext_flag_293 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000438\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value) << 
                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value);
                                                    }
                                                    
                                                    uint8_t* _tmp_398 = (uint8_t*)buffer;
                                                    buffer += 1;
                                                    *_tmp_398 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value; 
                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value; 
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                        return -1;
                                                    }
                                                
                                                }
                                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram.size() != 0)  // CHOICE 1  fieldType(ISO14823Code_pictogramCode_serviceCategoryCode) 
                                                {
                                                    *_choice_24 = 1;  // Setting choice selection
                                                
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m000439\033[0m| Choice selection: 1";
                                                
                                                    // Enumerated
                                                    // INT32  min(0) max(0) span(1) dataType(Int32)
                                                    uint8_t* _ext_flag_294 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000440\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value) << 
                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value);
                                                    }
                                                    
                                                    uint8_t* _tmp_399 = (uint8_t*)buffer;
                                                    buffer += 1;
                                                    *_tmp_399 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value; 
                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value; 
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value' (" << __aux64__ << ") exceeds max allowable (0); message dropped.";
                                                        return -1;
                                                    }
                                                
                                                }
                                                else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram.size() != 0)  // CHOICE 2  fieldType(ISO14823Code_pictogramCode_serviceCategoryCode) 
                                                {
                                                    *_choice_24 = 2;  // Setting choice selection
                                                
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m000441\033[0m| Choice selection: 2";
                                                
                                                    // Enumerated
                                                    // INT32  min(0) max(1) span(2) dataType(Int32)
                                                    uint8_t* _ext_flag_295 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000442\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value) << 
                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value);
                                                    }
                                                    
                                                    uint8_t* _tmp_400 = (uint8_t*)buffer;
                                                    buffer += 1;
                                                    *_tmp_400 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value; 
                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value; 
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                        return -1;
                                                    }
                                                
                                                }
                                                else
                                                {
                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_24) << ") selected in CHOICE ISO14823Code_pictogramCode_serviceCategoryCode in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code'; message dropped.";
                                                    return -1;
                                                }
                                                
                                                // Field:  type(ISO14823Code_pictogramCode_pictogramCategoryCode) name(pictogram_category_code) extGroup(0)
                                                    // ISO14823Code_pictogramCode_pictogramCategoryCode  SEQUENCE
                                                        //  nature       ISO14823Code_pictogramCode_pictogramCategoryCode_nature           
                                                        //  serialNumber ISO14823Code_pictogramCode_pictogramCategoryCode_serialNumber     
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(ISO14823Code_pictogramCode_pictogramCategoryCode_nature) name(nature) extGroup(0)
                                                    // Integer
                                                    
                                                    // UINT8  min(1) max(9) span(9) dataType(UInt8)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000443\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value) << 
                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value);
                                                    }
                                                    
                                                    uint8_t* _tmp_401 = (uint8_t*) buffer++;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value - 1;
                                                    *_tmp_401 = __aux64__;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value;
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 9) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value' (" << __aux64__ << ") exceeds max allowable (9); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(ISO14823Code_pictogramCode_pictogramCategoryCode_serialNumber) name(serial_number) extGroup(0)
                                                    // Integer
                                                    
                                                    // UINT8  min(0) max(99) span(100) dataType(UInt8)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000444\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value) << 
                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value);
                                                    }
                                                    
                                                    uint8_t* _tmp_402 = (uint8_t*) buffer++;
                                                    *_tmp_402 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value; 
                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value;
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 99) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value' (" << __aux64__ << ") exceeds max allowable (99); message dropped.";
                                                        return -1;
                                                    }
                                            
                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes.size() != 0) {
                                                // Field:  type(ISO14823Attributes) name(attributes) extGroup(0)
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                                uint8_t* _ext_flag_298 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].
                                                *_ext_flag_298 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements.size();
                                                if(__aux64__ > 8) __aux64__ = 8;
                                                uint16_t* _tmp_403 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_403 = __aux64__ - 1;
                                                
                                                int __ifn = __aux64__;
                                                for(int n = 0; n < __ifn; n++) { 
                                                    
                                                    // Choice
                                                       // #0  dtm   DTM
                                                       // #1  edt   EDT
                                                       // #2  dfl   DFL
                                                       // #3  ved   VED
                                                       // #4  spe   SPE
                                                       // #5  roi   ROI
                                                       // #6  dbv   DBV
                                                       // #7  ddd   DDD
                                                    uint8_t* _choice_25 = (uint8_t*) buffer;
                                                    buffer++;
                                                    
                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm.size() != 0) {  // CHOICE 0  fieldType(ISO14823Attributes_element) 
                                                        *_choice_25 = 0;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000446\033[0m| Choice selection: 0";
                                                    
                                                            // DTM  SEQUENCE
                                                                //  year        DTM_year          OPTIONAL  
                                                                //  month_day   DTM_month_day     OPTIONAL  
                                                                //  pmd         PMD               OPTIONAL  
                                                                //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                                //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                                //  period      HoursMinutes      OPTIONAL  
                                                            // Optional fields bytemap
                                                            char* _tmp_404 = (char*) buffer++;
                                                            *_tmp_404 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000447\033[0m| Optional field year = " << *_tmp_404;
                                                            char* _tmp_405 = (char*) buffer++;
                                                            *_tmp_405 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000448\033[0m| Optional field month_day = " << *_tmp_405;
                                                            char* _tmp_406 = (char*) buffer++;
                                                            *_tmp_406 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000449\033[0m| Optional field pmd = " << *_tmp_406;
                                                            char* _tmp_407 = (char*) buffer++;
                                                            *_tmp_407 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000450\033[0m| Optional field hour_minutes = " << *_tmp_407;
                                                            char* _tmp_408 = (char*) buffer++;
                                                            *_tmp_408 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000451\033[0m| Optional field day_of_week = " << *_tmp_408;
                                                            char* _tmp_409 = (char*) buffer++;
                                                            *_tmp_409 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000452\033[0m| Optional field period = " << *_tmp_409;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year.size() != 0) {
                                                                // Field:  type(DTM_year) name(year) extGroup(0)
                                                                    // DTM_year  SEQUENCE
                                                                        //  syr        DTM_year_syr     
                                                                        //  eyr        DTM_year_eyr     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(DTM_year_syr) name(syr) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000453\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_300 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.
                                                                    *_ext_flag_300 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value >= 2000 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value <= 2127) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_300) {
                                                                        uint8_t* _tmp_411 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value <= INT32_MAX) {
                                                                            *_tmp_411 = 0;
                                                                        
                                                                            uint32_t* _tmp_410 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_410 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_411 = 1;
                                                                        
                                                                            uint64_t* _tmp_410 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_410 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_410 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value - 2000;
                                                                        *_tmp_410 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value;
                                                                    }
                                                                    
                                                                    // Field:  type(DTM_year_eyr) name(eyr) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000454\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_301 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.
                                                                    *_ext_flag_301 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value >= 2000 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value <= 2127) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_301) {
                                                                        uint8_t* _tmp_413 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value <= INT32_MAX) {
                                                                            *_tmp_413 = 0;
                                                                        
                                                                            uint32_t* _tmp_412 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_412 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_413 = 1;
                                                                        
                                                                            uint64_t* _tmp_412 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_412 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_412 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value - 2000;
                                                                        *_tmp_412 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day.size() != 0) {
                                                                // Field:  type(DTM_month_day) name(month_day) extGroup(0)
                                                                    // DTM_month_day  SEQUENCE
                                                                        //  smd        MonthDay       
                                                                        //  emd        MonthDay       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay) name(smd) extGroup(0)
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000455\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.month.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.month.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_414 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.month.value - 1;
                                                                        *_tmp_414 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.month.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000456\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.day.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.day.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_415 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.day.value - 1;
                                                                        *_tmp_415 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.day.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    // Field:  type(MonthDay) name(emd) extGroup(0)
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000457\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.month.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.month.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_416 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.month.value - 1;
                                                                        *_tmp_416 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.month.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000458\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.day.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.day.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_417 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.day.value - 1;
                                                                        *_tmp_417 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.day.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                            return -1;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd.size() != 0) {
                                                                // Field:  type(PMD) name(pmd) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                if(debug)
                                                                    logger->print() << "|\033[38;5;94m000459\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd[0].values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd[0].values.size() < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd[0].values.size()) << " is less than allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd[0].values.size() > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd[0].values.size()) << " exceeds max allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_418 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd[0].values.size();
                                                                if(__aux64__ > 4) __aux64__ = 4;
                                                                *_tmp_418 = __aux64__ - 4;
                                                                buffer += 1;
                                                                
                                                                int __ifo = __aux64__;
                                                                for(int o = 0; o < __ifo; o++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd[0].values[o]? 1: 0);
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes.size() != 0) {
                                                                // Field:  type(DTM_hourMinutes) name(hour_minutes) extGroup(0)
                                                                    // DTM_hourMinutes  SEQUENCE
                                                                        //  shm        HoursMinutes     
                                                                        //  ehm        HoursMinutes     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes) name(shm) extGroup(0)
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000460\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.hours.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.hours.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_419 = (uint8_t*) buffer++;
                                                                        *_tmp_419 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.hours.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.hours.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000461\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.mins.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.mins.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_420 = (uint8_t*) buffer++;
                                                                        *_tmp_420 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.mins.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.mins.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    // Field:  type(HoursMinutes) name(ehm) extGroup(0)
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000462\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.hours.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.hours.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_421 = (uint8_t*) buffer++;
                                                                        *_tmp_421 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.hours.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.hours.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000463\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.mins.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.mins.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_422 = (uint8_t*) buffer++;
                                                                        *_tmp_422 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.mins.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.mins.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                            return -1;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week.size() != 0) {
                                                                // Field:  type(DayOfWeek) name(day_of_week) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(8) max(8) span(1)
                                                                if(debug)
                                                                    logger->print() << "|\033[38;5;94m000464\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week[0].values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week[0].values.size() < 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week[0].values.size()) << " is less than allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week[0].values.size() > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week[0].values.size()) << " exceeds max allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_423 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week[0].values.size();
                                                                if(__aux64__ > 8) __aux64__ = 8;
                                                                *_tmp_423 = __aux64__ - 8;
                                                                buffer += 1;
                                                                
                                                                int __ifp = __aux64__;
                                                                for(int p = 0; p < __ifp; p++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week[0].values[p]? 1: 0);
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period.size() != 0) {
                                                                // Field:  type(HoursMinutes) name(period) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000465\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_424 = (uint8_t*) buffer++;
                                                                    *_tmp_424 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000466\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_425 = (uint8_t*) buffer++;
                                                                    *_tmp_425 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt.size() != 0)  // CHOICE 1  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_25 = 1;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000467\033[0m| Choice selection: 1";
                                                    
                                                            // EDT  SEQUENCE
                                                                //  year        DTM_year            
                                                                //  month_day   DTM_month_day       
                                                                //  pmd         PMD                 
                                                                //  hourMinutes DTM_hourMinutes     
                                                                //  dayOfWeek   DayOfWeek           
                                                                //  period      HoursMinutes        
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(DTM_year) name(year) extGroup(0)
                                                                // DTM_year  SEQUENCE
                                                                    //  syr        DTM_year_syr     
                                                                    //  eyr        DTM_year_eyr     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(DTM_year_syr) name(syr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000468\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_312 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.
                                                                *_ext_flag_312 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value >= 2000 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value <= 2127) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_312) {
                                                                    uint8_t* _tmp_427 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value <= INT32_MAX) {
                                                                        *_tmp_427 = 0;
                                                                    
                                                                        uint32_t* _tmp_426 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_426 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_427 = 1;
                                                                    
                                                                        uint64_t* _tmp_426 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_426 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_426 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value - 2000;
                                                                    *_tmp_426 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value;
                                                                }
                                                                
                                                                // Field:  type(DTM_year_eyr) name(eyr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000469\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_313 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.
                                                                *_ext_flag_313 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value >= 2000 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value <= 2127) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_313) {
                                                                    uint8_t* _tmp_429 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value <= INT32_MAX) {
                                                                        *_tmp_429 = 0;
                                                                    
                                                                        uint32_t* _tmp_428 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_428 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_429 = 1;
                                                                    
                                                                        uint64_t* _tmp_428 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_428 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_428 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value - 2000;
                                                                    *_tmp_428 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value;
                                                                }
                                                            
                                                            // Field:  type(DTM_month_day) name(month_day) extGroup(0)
                                                                // DTM_month_day  SEQUENCE
                                                                    //  smd        MonthDay       
                                                                    //  emd        MonthDay       
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(MonthDay) name(smd) extGroup(0)
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000470\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.month.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.month.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_430 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.month.value - 1;
                                                                    *_tmp_430 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.month.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000471\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.day.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.day.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_431 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.day.value - 1;
                                                                    *_tmp_431 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.day.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                // Field:  type(MonthDay) name(emd) extGroup(0)
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000472\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.month.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.month.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_432 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.month.value - 1;
                                                                    *_tmp_432 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.month.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000473\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.day.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.day.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_433 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.day.value - 1;
                                                                    *_tmp_433 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.day.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            // Field:  type(PMD) name(pmd) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000474\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].pmd.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].pmd.values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].pmd.values.size() < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].pmd.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].pmd.values.size()) << " is less than allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].pmd.values.size() > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].pmd.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].pmd.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_434 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].pmd.values.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            *_tmp_434 = __aux64__ - 4;
                                                            buffer += 1;
                                                            
                                                            int __ifq = __aux64__;
                                                            for(int q = 0; q < __ifq; q++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].pmd.values[q]? 1: 0);
                                                            }
                                                            
                                                            // Field:  type(DTM_hourMinutes) name(hour_minutes) extGroup(0)
                                                                // DTM_hourMinutes  SEQUENCE
                                                                    //  shm        HoursMinutes     
                                                                    //  ehm        HoursMinutes     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(HoursMinutes) name(shm) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000475\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_435 = (uint8_t*) buffer++;
                                                                    *_tmp_435 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000476\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_436 = (uint8_t*) buffer++;
                                                                    *_tmp_436 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                // Field:  type(HoursMinutes) name(ehm) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000477\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_437 = (uint8_t*) buffer++;
                                                                    *_tmp_437 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000478\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_438 = (uint8_t*) buffer++;
                                                                    *_tmp_438 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            // Field:  type(DayOfWeek) name(day_of_week) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(8) max(8) span(1)
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000479\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].day_of_week.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].day_of_week.values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].day_of_week.values.size() < 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].day_of_week.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].day_of_week.values.size()) << " is less than allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].day_of_week.values.size() > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].day_of_week.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].day_of_week.values.size()) << " exceeds max allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_439 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].day_of_week.values.size();
                                                            if(__aux64__ > 8) __aux64__ = 8;
                                                            *_tmp_439 = __aux64__ - 8;
                                                            buffer += 1;
                                                            
                                                            int __ifr = __aux64__;
                                                            for(int r = 0; r < __ifr; r++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].day_of_week.values[r]? 1: 0);
                                                            }
                                                            
                                                            // Field:  type(HoursMinutes) name(period) extGroup(0)
                                                                // HoursMinutes  SEQUENCE
                                                                    //  hours      HoursMinutes_hours     
                                                                    //  mins       HoursMinutes_mins      
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000480\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.hours.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.hours.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_440 = (uint8_t*) buffer++;
                                                                *_tmp_440 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.hours.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.hours.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000481\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.mins.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.mins.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_441 = (uint8_t*) buffer++;
                                                                *_tmp_441 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.mins.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.mins.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                    return -1;
                                                                }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dfl.size() != 0)  // CHOICE 2  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_25 = 2;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000482\033[0m| Choice selection: 2";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(8) span(8) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000483\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dfl[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dfl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dfl[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_442 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dfl[0].value - 1;
                                                        *_tmp_442 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dfl[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dfl[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dfl[0].value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved.size() != 0)  // CHOICE 3  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_25 = 3;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000484\033[0m| Choice selection: 3";
                                                    
                                                            // VED  SEQUENCE
                                                                //  hei        Distance     OPTIONAL  
                                                                //  wid        Distance     OPTIONAL  
                                                                //  vln        Distance     OPTIONAL  
                                                                //  wei        Weight       OPTIONAL  
                                                            // Optional fields bytemap
                                                            char* _tmp_443 = (char*) buffer++;
                                                            *_tmp_443 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000485\033[0m| Optional field hei = " << *_tmp_443;
                                                            char* _tmp_444 = (char*) buffer++;
                                                            *_tmp_444 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000486\033[0m| Optional field wid = " << *_tmp_444;
                                                            char* _tmp_445 = (char*) buffer++;
                                                            *_tmp_445 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000487\033[0m| Optional field vln = " << *_tmp_445;
                                                            char* _tmp_446 = (char*) buffer++;
                                                            *_tmp_446 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000488\033[0m| Optional field wei = " << *_tmp_446;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei.size() != 0) {
                                                                // Field:  type(Distance) name(hei) extGroup(0)
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Distance_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000489\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_447 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].value.value - 1;
                                                                    *_tmp_447 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000490\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_448 = (uint8_t*) buffer++;
                                                                    *_tmp_448 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid.size() != 0) {
                                                                // Field:  type(Distance) name(wid) extGroup(0)
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Distance_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000491\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_449 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].value.value - 1;
                                                                    *_tmp_449 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000492\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_450 = (uint8_t*) buffer++;
                                                                    *_tmp_450 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln.size() != 0) {
                                                                // Field:  type(Distance) name(vln) extGroup(0)
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Distance_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000493\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_451 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].value.value - 1;
                                                                    *_tmp_451 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000494\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_452 = (uint8_t*) buffer++;
                                                                    *_tmp_452 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei.size() != 0) {
                                                                // Field:  type(Weight) name(wei) extGroup(0)
                                                                    // Weight  SEQUENCE
                                                                        //  value      Weight_value     
                                                                        //  unit       RSCUnit          
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Weight_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000495\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_453 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].value.value - 1;
                                                                    *_tmp_453 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000496\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_454 = (uint8_t*) buffer++;
                                                                    *_tmp_454 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe.size() != 0)  // CHOICE 4  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_25 = 4;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000497\033[0m| Choice selection: 4";
                                                    
                                                            // SPE  SEQUENCE
                                                                //  spm        SPE_spm            OPTIONAL  
                                                                //  mns        SPE_mns            OPTIONAL  
                                                                //  unit       SPE_RSCUnit_unit     
                                                            // Optional fields bytemap
                                                            char* _tmp_455 = (char*) buffer++;
                                                            *_tmp_455 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000498\033[0m| Optional field spm = " << *_tmp_455;
                                                            char* _tmp_456 = (char*) buffer++;
                                                            *_tmp_456 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000499\033[0m| Optional field mns = " << *_tmp_456;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm.size() != 0) {
                                                                // Field:  type(SPE_spm) name(spm) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(250) span(251) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000500\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_457 = (uint8_t*) buffer++;
                                                                *_tmp_457 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm[0].value' (" << __aux64__ << ") exceeds max allowable (250); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns.size() != 0) {
                                                                // Field:  type(SPE_mns) name(mns) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(250) span(251) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000501\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_458 = (uint8_t*) buffer++;
                                                                *_tmp_458 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns[0].value' (" << __aux64__ << ") exceeds max allowable (250); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            // Field:  type(SPE_RSCUnit_unit) name(unit) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(1) span(2) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000502\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].unit.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].unit.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_459 = (uint8_t*) buffer++;
                                                            *_tmp_459 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].unit.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].unit.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].unit.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                return -1;
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].roi.size() != 0)  // CHOICE 5  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_25 = 5;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000503\033[0m| Choice selection: 5";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000504\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].roi[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].roi[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].roi[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_460 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].roi[0].value - 1;
                                                        *_tmp_460 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].roi[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].roi[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 32) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].roi[0].value' (" << __aux64__ << ") exceeds max allowable (32); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv.size() != 0)  // CHOICE 6  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_25 = 6;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000505\033[0m| Choice selection: 6";
                                                    
                                                            // DBV  SEQUENCE
                                                                //  value      Distance_value     
                                                                //  unit       RSCUnit            
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(Distance_value) name(value) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000506\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].value.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].value.value;
                                                            }
                                                            
                                                            uint16_t* _tmp_461 = (uint16_t*) buffer; buffer += 2;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].value.value - 1;
                                                            *_tmp_461 = __aux64__;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].value.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000507\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].unit.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].unit.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_462 = (uint8_t*) buffer++;
                                                            *_tmp_462 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].unit.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].unit.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd.size() != 0)  // CHOICE 7  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_25 = 7;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000508\033[0m| Choice selection: 7";
                                                    
                                                            // DDD  SEQUENCE
                                                                //  dcj        DDD_dcj      OPTIONAL  
                                                                //  dcr        DDD_dcr      OPTIONAL  
                                                                //  tpl        DDD_tpl      OPTIONAL  
                                                                //  ioList     DDD_ioList     
                                                            // Optional fields bytemap
                                                            char* _tmp_463 = (char*) buffer++;
                                                            *_tmp_463 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000509\033[0m| Optional field dcj = " << *_tmp_463;
                                                            char* _tmp_464 = (char*) buffer++;
                                                            *_tmp_464 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000510\033[0m| Optional field dcr = " << *_tmp_464;
                                                            char* _tmp_465 = (char*) buffer++;
                                                            *_tmp_465 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000511\033[0m| Optional field tpl = " << *_tmp_465;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj.size() != 0) {
                                                                // Field:  type(DDD_dcj) name(dcj) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(1) max(128) span(128) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000512\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_466 = (uint8_t*) buffer++;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj[0].value - 1;
                                                                *_tmp_466 = __aux64__;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj[0].value' (" << __aux64__ << ") exceeds max allowable (128); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr.size() != 0) {
                                                                // Field:  type(DDD_dcr) name(dcr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(1) max(128) span(128) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000513\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_467 = (uint8_t*) buffer++;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr[0].value - 1;
                                                                *_tmp_467 = __aux64__;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr[0].value' (" << __aux64__ << ") exceeds max allowable (128); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl.size() != 0) {
                                                                // Field:  type(DDD_tpl) name(tpl) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(1) max(128) span(128) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000514\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_468 = (uint8_t*) buffer++;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl[0].value - 1;
                                                                *_tmp_468 = __aux64__;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl[0].value' (" << __aux64__ << ") exceeds max allowable (128); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            // Field:  type(DDD_ioList) name(io_list) extGroup(0)
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                                            uint8_t* _ext_flag_342 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.
                                                            *_ext_flag_342 = 0; 
                                                            
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements.size();
                                                            if(__aux64__ > 8) __aux64__ = 8;
                                                            uint16_t* _tmp_469 = (uint16_t*)buffer;
                                                            buffer += 2;
                                                            *_tmp_469 = __aux64__ - 1;
                                                            
                                                            int __ifs = __aux64__;
                                                            for(int s = 0; s < __ifs; s++) { 
                                                                
                                                                    // DDD_IO  SEQUENCE
                                                                        //  drn        DDD_IO_drn             
                                                                        //  dp         DDD_IO_dp            OPTIONAL  
                                                                        //  dr         DDD_IO_dr            OPTIONAL  
                                                                        //  rne        DDD_IO_rne           OPTIONAL  
                                                                        //  stnId      DDD_IO_stnId         OPTIONAL  
                                                                        //  stnText    DDD_IO_stnText       OPTIONAL  
                                                                        //  dcp        DistanceOrDuration   OPTIONAL  
                                                                        //  ddp        DistanceOrDuration   OPTIONAL  
                                                                    // Optional fields bytemap
                                                                    char* _tmp_470 = (char*) buffer++;
                                                                    *_tmp_470 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000516\033[0m| Optional field dp = " << *_tmp_470;
                                                                    char* _tmp_471 = (char*) buffer++;
                                                                    *_tmp_471 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000517\033[0m| Optional field dr = " << *_tmp_471;
                                                                    char* _tmp_472 = (char*) buffer++;
                                                                    *_tmp_472 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000518\033[0m| Optional field rne = " << *_tmp_472;
                                                                    char* _tmp_473 = (char*) buffer++;
                                                                    *_tmp_473 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000519\033[0m| Optional field stn_id = " << *_tmp_473;
                                                                    char* _tmp_474 = (char*) buffer++;
                                                                    *_tmp_474 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000520\033[0m| Optional field stn_text = " << *_tmp_474;
                                                                    char* _tmp_475 = (char*) buffer++;
                                                                    *_tmp_475 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000521\033[0m| Optional field dcp = " << *_tmp_475;
                                                                    char* _tmp_476 = (char*) buffer++;
                                                                    *_tmp_476 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000522\033[0m| Optional field ddp = " << *_tmp_476;
                                                                    
                                                                    // Field:  type(DDD_IO_drn) name(drn) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000523\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].drn.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].drn.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].drn.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_477 = (uint8_t*) buffer++;
                                                                    *_tmp_477 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].drn.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].drn.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].drn.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].drn.value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp.size() != 0) {
                                                                        // Field:  type(DDD_IO_dp) name(dp) extGroup(0)
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                                        uint8_t* _ext_flag_344 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].
                                                                        *_ext_flag_344 = 0; 
                                                                        
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements.size();
                                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                                        uint16_t* _tmp_478 = (uint16_t*)buffer;
                                                                        buffer += 2;
                                                                        *_tmp_478 = __aux64__ - 1;
                                                                        
                                                                        int __ift = __aux64__;
                                                                        for(int t = 0; t < __ift; t++) { 
                                                                            
                                                                                // DestinationPlace  SEQUENCE
                                                                                    //  depType    DDD_DEP                      
                                                                                    //  depBlob    DestinationPlace_depBlob   OPTIONAL  
                                                                                    //  plnId      DestinationPlace_plnId     OPTIONAL  
                                                                                    //  plnText    DestinationPlace_plnText   OPTIONAL  
                                                                                // Optional fields bytemap
                                                                                char* _tmp_479 = (char*) buffer++;
                                                                                *_tmp_479 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->print() << "|\033[38;5;94m000525\033[0m| Optional field dep_blob = " << *_tmp_479;
                                                                                char* _tmp_480 = (char*) buffer++;
                                                                                *_tmp_480 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->print() << "|\033[38;5;94m000526\033[0m| Optional field pln_id = " << *_tmp_480;
                                                                                char* _tmp_481 = (char*) buffer++;
                                                                                *_tmp_481 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->print() << "|\033[38;5;94m000527\033[0m| Optional field pln_text = " << *_tmp_481;
                                                                                
                                                                                // Field:  type(DDD_DEP) name(dep_type) extGroup(0)
                                                                                // Integer
                                                                                
                                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                                if(debug) {
                                                                                    logger->print() << "|\033[38;5;94m000528\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value) << 
                                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value);
                                                                                }
                                                                                
                                                                                uint8_t* _ext_flag_345 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.
                                                                                *_ext_flag_345 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value <= 15) ? 0 : 1;
                                                                                
                                                                                if(*_ext_flag_345) {
                                                                                    uint8_t* _tmp_483 = (uint8_t*) buffer++; 
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value <= INT32_MAX) {
                                                                                        *_tmp_483 = 0;
                                                                                    
                                                                                        uint32_t* _tmp_482 = (uint32_t*)buffer; buffer += 4;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value;
                                                                                        __aux64__ -= INT32_MIN;
                                                                                        *_tmp_482 = __aux64__;
                                                                                    } 
                                                                                    else
                                                                                    {
                                                                                        *_tmp_483 = 1;
                                                                                    
                                                                                        uint64_t* _tmp_482 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value;
                                                                                        __aux64__ -= INT64_MIN;
                                                                                        *_tmp_482 = __aux64__;
                                                                                    }
                                                                                } else {
                                                                                    uint8_t* _tmp_482 = (uint8_t*) buffer++;
                                                                                    *_tmp_482 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value; 
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value;
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob.size() != 0) {
                                                                                    // Field:  type(DestinationPlace_depBlob) name(dep_blob) extGroup(0)
                                                                                    // OctetString
                                                                                    // Indefinite length
                                                                                    // OCTET_STRING  min(0) max(16383) span(16384)
                                                                                    
                                                                                    if(debug)
                                                                                        logger->print() << "|\033[38;5;94m000529\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob[0].values.size(): ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob[0]" << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob[0].values.size());
                                                                                    
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob[0].values.size() < 0) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob[0].value' (" << 
                                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob[0].values.size() << ") is less than allowable (0); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob[0].values.size() > 16383) {
                                                                                        logger->warning() << "Error: Value in 'ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob[0].value' (" << 
                                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob[0].values.size() << ") exceeds max allowable (16383); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    uint16_t* _tmp_484 = (uint16_t*)buffer;
                                                                                    buffer += 2;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob[0].values.size();
                                                                                    if(__aux64__ > 16383) __aux64__ = 16383;
                                                                                    *_tmp_484 = __aux64__;
                                                                                    
                                                                                    int __ifu = __aux64__;
                                                                                    for(int u = 0; u < __ifu; u++) {
                                                                                        int8_t* __m__ = (int8_t*)buffer++;
                                                                                        *__m__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob[0].values[u];
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id.size() != 0) {
                                                                                    // Field:  type(DestinationPlace_plnId) name(pln_id) extGroup(0)
                                                                                    // Integer
                                                                                    
                                                                                    // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                                    if(debug) {
                                                                                        logger->print() << "|\033[38;5;94m000530\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id[0].value;
                                                                                    }
                                                                                    
                                                                                    uint16_t* _tmp_485 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id[0].value - 1;
                                                                                    *_tmp_485 = __aux64__;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id[0].value;
                                                                                    
                                                                                    // MIN validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    // MAX validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text.size() != 0) {
                                                                                    // Field:  type(DestinationPlace_plnText) name(pln_text) extGroup(0)
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_486 = (uint16_t*)buffer;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text[0].value.size();
                                                                                    
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text[0].value.size() < 0) {
                                                                                        logger->warning() << "Error: Length of 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text[0].value) << " is less than allowable (0); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text[0].value.size() > 16383) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text[0].value) << " exceeds max allowable (16383); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(debug)
                                                                                        logger->print() << "|\033[38;5;94m000531\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text[0].value.size(): " << 
                                                                                                    static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text[0].value.size());
                                                                                    
                                                                                    if(__aux64__ > 16383) __aux64__ = 16383;
                                                                                    *_tmp_486 = __aux64__;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int __ifv = __aux64__;
                                                                                    for(int v = 0; v < __ifv; v++) {  // 16383
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        *__tmp__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text[0].value.c_str()[v];
                                                                                    }
                                                                                }
                                                                                
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr.size() != 0) {
                                                                        // Field:  type(DDD_IO_dr) name(dr) extGroup(0)
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                                        uint8_t* _ext_flag_347 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].
                                                                        *_ext_flag_347 = 0; 
                                                                        
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements.size();
                                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                                        uint16_t* _tmp_487 = (uint16_t*)buffer;
                                                                        buffer += 2;
                                                                        *_tmp_487 = __aux64__ - 1;
                                                                        
                                                                        int __ifw = __aux64__;
                                                                        for(int w = 0; w < __ifw; w++) { 
                                                                            
                                                                                // DestinationRoad  SEQUENCE
                                                                                    //  derType    DDD_DER                     
                                                                                    //  ronId      DestinationRoad_ronId     OPTIONAL  
                                                                                    //  ronText    DestinationRoad_ronText   OPTIONAL  
                                                                                // Optional fields bytemap
                                                                                char* _tmp_488 = (char*) buffer++;
                                                                                *_tmp_488 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->print() << "|\033[38;5;94m000533\033[0m| Optional field ron_id = " << *_tmp_488;
                                                                                char* _tmp_489 = (char*) buffer++;
                                                                                *_tmp_489 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->print() << "|\033[38;5;94m000534\033[0m| Optional field ron_text = " << *_tmp_489;
                                                                                
                                                                                // Field:  type(DDD_DER) name(der_type) extGroup(0)
                                                                                // Integer
                                                                                
                                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                                if(debug) {
                                                                                    logger->print() << "|\033[38;5;94m000535\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value) << 
                                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value);
                                                                                }
                                                                                
                                                                                uint8_t* _ext_flag_348 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.
                                                                                *_ext_flag_348 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value <= 15) ? 0 : 1;
                                                                                
                                                                                if(*_ext_flag_348) {
                                                                                    uint8_t* _tmp_491 = (uint8_t*) buffer++; 
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value <= INT32_MAX) {
                                                                                        *_tmp_491 = 0;
                                                                                    
                                                                                        uint32_t* _tmp_490 = (uint32_t*)buffer; buffer += 4;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value;
                                                                                        __aux64__ -= INT32_MIN;
                                                                                        *_tmp_490 = __aux64__;
                                                                                    } 
                                                                                    else
                                                                                    {
                                                                                        *_tmp_491 = 1;
                                                                                    
                                                                                        uint64_t* _tmp_490 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value;
                                                                                        __aux64__ -= INT64_MIN;
                                                                                        *_tmp_490 = __aux64__;
                                                                                    }
                                                                                } else {
                                                                                    uint8_t* _tmp_490 = (uint8_t*) buffer++;
                                                                                    *_tmp_490 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value; 
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value;
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id.size() != 0) {
                                                                                    // Field:  type(DestinationRoad_ronId) name(ron_id) extGroup(0)
                                                                                    // Integer
                                                                                    
                                                                                    // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                                    if(debug) {
                                                                                        logger->print() << "|\033[38;5;94m000536\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id[0].value;
                                                                                    }
                                                                                    
                                                                                    uint16_t* _tmp_492 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id[0].value - 1;
                                                                                    *_tmp_492 = __aux64__;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id[0].value;
                                                                                    
                                                                                    // MIN validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    // MAX validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text.size() != 0) {
                                                                                    // Field:  type(DestinationRoad_ronText) name(ron_text) extGroup(0)
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_493 = (uint16_t*)buffer;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text[0].value.size();
                                                                                    
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text[0].value.size() < 0) {
                                                                                        logger->warning() << "Error: Length of 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text[0].value) << " is less than allowable (0); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text[0].value.size() > 16383) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text[0].value) << " exceeds max allowable (16383); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(debug)
                                                                                        logger->print() << "|\033[38;5;94m000537\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text[0].value.size(): " << 
                                                                                                    static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text[0].value.size());
                                                                                    
                                                                                    if(__aux64__ > 16383) __aux64__ = 16383;
                                                                                    *_tmp_493 = __aux64__;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int __ifx = __aux64__;
                                                                                    for(int x = 0; x < __ifx; x++) {  // 16383
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        *__tmp__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text[0].value.c_str()[x];
                                                                                    }
                                                                                }
                                                                                
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne.size() != 0) {
                                                                        // Field:  type(DDD_IO_rne) name(rne) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000538\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne[0].value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne[0].value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_494 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne[0].value - 1;
                                                                        *_tmp_494 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne[0].value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id.size() != 0) {
                                                                        // Field:  type(DDD_IO_stnId) name(stn_id) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000539\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id[0].value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id[0].value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_495 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id[0].value - 1;
                                                                        *_tmp_495 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id[0].value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text.size() != 0) {
                                                                        // Field:  type(DDD_IO_stnText) name(stn_text) extGroup(0)
                                                                        // Text
                                                                        
                                                                        // Indefinite length
                                                                        // TEXT  min(0) max(16383) span(16384)
                                                                        uint16_t* _tmp_496 = (uint16_t*)buffer;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text[0].value.size();
                                                                        
                                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text[0].value.size() < 0) {
                                                                            logger->warning() << "Error: Length of 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text[0].value) << " is less than allowable (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text[0].value.size() > 16383) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text[0].value) << " exceeds max allowable (16383); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        if(debug)
                                                                            logger->print() << "|\033[38;5;94m000540\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text[0].value.size(): " << 
                                                                                        static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text[0].value.size());
                                                                        
                                                                        if(__aux64__ > 16383) __aux64__ = 16383;
                                                                        *_tmp_496 = __aux64__;
                                                                        buffer += 2;
                                                                        
                                                                        int __ify = __aux64__;
                                                                        for(int y = 0; y < __ify; y++) {  // 16383
                                                                            char* __tmp__ = (char*)buffer++;
                                                                            *__tmp__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text[0].value.c_str()[y];
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp.size() != 0) {
                                                                        // Field:  type(DistanceOrDuration) name(dcp) extGroup(0)
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(DistanceOrDuration_value) name(value) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000541\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].value.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_497 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].value.value - 1;
                                                                            *_tmp_497 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].value.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(DistanceOrDuration_RSCUnit_unit) name(unit) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(2) max(9) span(8) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000542\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].unit.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_498 = (uint8_t*) buffer++;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].unit.value - 2;
                                                                            *_tmp_498 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].unit.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].unit.value' (" << __aux64__ << ") less than (2); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].unit.value' (" << __aux64__ << ") exceeds max allowable (9); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp.size() != 0) {
                                                                        // Field:  type(DistanceOrDuration) name(ddp) extGroup(0)
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(DistanceOrDuration_value) name(value) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000543\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].value.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_499 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].value.value - 1;
                                                                            *_tmp_499 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].value.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(DistanceOrDuration_RSCUnit_unit) name(unit) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(2) max(9) span(8) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000544\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].unit.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_500 = (uint8_t*) buffer++;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].unit.value - 2;
                                                                            *_tmp_500 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].unit.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].unit.value' (" << __aux64__ << ") less than (2); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].unit.value' (" << __aux64__ << ") exceeds max allowable (9); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    }
                                                                    
                                                            }
                                                    
                                                    }
                                                    else
                                                    {
                                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_25) << ") selected in CHOICE ISO14823Attributes_element in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n]'; message dropped.";
                                                        return -1;
                                                    }
                                                }
                                            }
                                    
                                    }
                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.itis_codes.size() != 0)  // CHOICE 2  fieldType(RSCode_code) 
                                    {
                                        *_choice_23 = 2;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000545\033[0m| Choice selection: 2";
                                    
                                        // Integer
                                        
                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                        if(debug) {
                                            logger->print() << "|\033[38;5;94m000546\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.itis_codes[0].value) << 
                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.itis_codes[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.itis_codes[0].value;
                                        }
                                        
                                        uint16_t* _tmp_501 = (uint16_t*) buffer; buffer += 2;
                                        *_tmp_501 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.itis_codes[0].value; 
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.itis_codes[0].value;
                                        
                                        // MIN validator
                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.itis_codes[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                            return -1;
                                        }
                                        // MAX validator
                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.itis_codes[0].value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                            return -1;
                                        }
                                    
                                    }
                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue.size() != 0)  // CHOICE 3  fieldType(RSCode_code) 
                                    {
                                        *_choice_23 = 3;  // Setting choice selection
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000547\033[0m| Choice selection: 3";
                                    
                                            // AnyCatalogue  SEQUENCE
                                                //  owner         Provider                       
                                                //  version       AnyCatalogue_version           
                                                //  pictogramCode AnyCatalogue_pictogramCode     
                                                //  value         AnyCatalogue_value           OPTIONAL  
                                                //  unit          RSCUnit                      OPTIONAL  
                                                //  attributes    ISO14823Attributes           OPTIONAL  
                                            // Optional fields bytemap
                                            char* _tmp_502 = (char*) buffer++;
                                            *_tmp_502 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000548\033[0m| Optional field value = " << *_tmp_502;
                                            char* _tmp_503 = (char*) buffer++;
                                            *_tmp_503 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000549\033[0m| Optional field unit = " << *_tmp_503;
                                            char* _tmp_504 = (char*) buffer++;
                                            *_tmp_504 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000550\033[0m| Optional field attributes = " << *_tmp_504;
                                            
                                            // Field:  type(Provider) name(owner) extGroup(0)
                                                // Provider  SEQUENCE
                                                    //  countryCode        CountryCode          
                                                    //  providerIdentifier IssuerIdentifier     
                                                // Optional fields bytemap
                                                
                                                // Field:  type(CountryCode) name(country_code) extGroup(0)
                                                // BitString
                                                // BIT_STRING  min(10) max(10) span(1)
                                                if(debug)
                                                    logger->print() << "|\033[38;5;94m000551\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.country_code.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.country_code.values.size());
                                                
                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.country_code.values.size() < 10) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.country_code.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.country_code.values.size()) << " is less than allowable (10); message dropped.";
                                                    return -1;
                                                }
                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.country_code.values.size() > 10) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.country_code.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.country_code.values.size()) << " exceeds max allowable (10); message dropped.";
                                                    return -1;
                                                }
                                                
                                                uint8_t* _tmp_505 = (uint8_t*)buffer;
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.country_code.values.size();
                                                if(__aux64__ > 10) __aux64__ = 10;
                                                *_tmp_505 = __aux64__ - 10;
                                                buffer += 1;
                                                
                                                int __ifz = __aux64__;
                                                for(int z = 0; z < __ifz; z++) {
                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                    *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.country_code.values[z]? 1: 0);
                                                }
                                                
                                                // Field:  type(IssuerIdentifier) name(provider_identifier) extGroup(0)
                                                // Integer
                                                
                                                // UINT16  min(0) max(16383) span(16384) dataType(UInt16)
                                                if(debug) {
                                                    logger->print() << "|\033[38;5;94m000552\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.provider_identifier.value) << 
                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.provider_identifier.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.provider_identifier.value;
                                                }
                                                
                                                uint16_t* _tmp_506 = (uint16_t*) buffer; buffer += 2;
                                                *_tmp_506 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.provider_identifier.value; 
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.provider_identifier.value;
                                                
                                                // MIN validator
                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.provider_identifier.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                    return -1;
                                                }
                                                // MAX validator
                                                if (VALIDATORS_ENABLED && __aux64__ > 16383) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.provider_identifier.value' (" << __aux64__ << ") exceeds max allowable (16383); message dropped.";
                                                    return -1;
                                                }
                                            
                                            // Field:  type(AnyCatalogue_version) name(version) extGroup(0)
                                            // Integer
                                            
                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                            if(debug) {
                                                logger->print() << "|\033[38;5;94m000553\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].version.value) << 
                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].version.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].version.value);
                                            }
                                            
                                            uint8_t* _tmp_507 = (uint8_t*) buffer++;
                                            *_tmp_507 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].version.value; 
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].version.value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].version.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].version.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                return -1;
                                            }
                                            
                                            // Field:  type(AnyCatalogue_pictogramCode) name(pictogram_code) extGroup(0)
                                            // Integer
                                            
                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                            if(debug) {
                                                logger->print() << "|\033[38;5;94m000554\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].pictogram_code.value) << 
                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].pictogram_code.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].pictogram_code.value;
                                            }
                                            
                                            uint16_t* _tmp_508 = (uint16_t*) buffer; buffer += 2;
                                            *_tmp_508 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].pictogram_code.value; 
                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].pictogram_code.value;
                                            
                                            // MIN validator
                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].pictogram_code.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                return -1;
                                            }
                                            // MAX validator
                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].pictogram_code.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                return -1;
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value.size() != 0) {
                                                // Field:  type(AnyCatalogue_value) name(value) extGroup(0)
                                                // Integer
                                                
                                                // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                if(debug) {
                                                    logger->print() << "|\033[38;5;94m000555\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value[0].value) << 
                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value[0].value;
                                                }
                                                
                                                uint16_t* _tmp_509 = (uint16_t*) buffer; buffer += 2;
                                                *_tmp_509 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value[0].value; 
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value[0].value;
                                                
                                                // MIN validator
                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                    return -1;
                                                }
                                                // MAX validator
                                                if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value[0].value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                    return -1;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit.size() != 0) {
                                                // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                // Integer
                                                
                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                if(debug) {
                                                    logger->print() << "|\033[38;5;94m000556\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit[0].value) << 
                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit[0].value);
                                                }
                                                
                                                uint8_t* _tmp_510 = (uint8_t*) buffer++;
                                                *_tmp_510 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit[0].value; 
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit[0].value;
                                                
                                                // MIN validator
                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                    return -1;
                                                }
                                                // MAX validator
                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                    return -1;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes.size() != 0) {
                                                // Field:  type(ISO14823Attributes) name(attributes) extGroup(0)
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                                uint8_t* _ext_flag_362 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].
                                                *_ext_flag_362 = 0; 
                                                
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements.size();
                                                if(__aux64__ > 8) __aux64__ = 8;
                                                uint16_t* _tmp_511 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_511 = __aux64__ - 1;
                                                
                                                int __ifa = __aux64__;
                                                for(int a = 0; a < __ifa; a++) { 
                                                    
                                                    // Choice
                                                       // #0  dtm   DTM
                                                       // #1  edt   EDT
                                                       // #2  dfl   DFL
                                                       // #3  ved   VED
                                                       // #4  spe   SPE
                                                       // #5  roi   ROI
                                                       // #6  dbv   DBV
                                                       // #7  ddd   DDD
                                                    uint8_t* _choice_26 = (uint8_t*) buffer;
                                                    buffer++;
                                                    
                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm.size() != 0) {  // CHOICE 0  fieldType(ISO14823Attributes_element) 
                                                        *_choice_26 = 0;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000558\033[0m| Choice selection: 0";
                                                    
                                                            // DTM  SEQUENCE
                                                                //  year        DTM_year          OPTIONAL  
                                                                //  month_day   DTM_month_day     OPTIONAL  
                                                                //  pmd         PMD               OPTIONAL  
                                                                //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                                //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                                //  period      HoursMinutes      OPTIONAL  
                                                            // Optional fields bytemap
                                                            char* _tmp_512 = (char*) buffer++;
                                                            *_tmp_512 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000559\033[0m| Optional field year = " << *_tmp_512;
                                                            char* _tmp_513 = (char*) buffer++;
                                                            *_tmp_513 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000560\033[0m| Optional field month_day = " << *_tmp_513;
                                                            char* _tmp_514 = (char*) buffer++;
                                                            *_tmp_514 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000561\033[0m| Optional field pmd = " << *_tmp_514;
                                                            char* _tmp_515 = (char*) buffer++;
                                                            *_tmp_515 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000562\033[0m| Optional field hour_minutes = " << *_tmp_515;
                                                            char* _tmp_516 = (char*) buffer++;
                                                            *_tmp_516 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000563\033[0m| Optional field day_of_week = " << *_tmp_516;
                                                            char* _tmp_517 = (char*) buffer++;
                                                            *_tmp_517 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000564\033[0m| Optional field period = " << *_tmp_517;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year.size() != 0) {
                                                                // Field:  type(DTM_year) name(year) extGroup(0)
                                                                    // DTM_year  SEQUENCE
                                                                        //  syr        DTM_year_syr     
                                                                        //  eyr        DTM_year_eyr     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(DTM_year_syr) name(syr) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000565\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_364 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.
                                                                    *_ext_flag_364 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value >= 2000 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value <= 2127) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_364) {
                                                                        uint8_t* _tmp_519 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value <= INT32_MAX) {
                                                                            *_tmp_519 = 0;
                                                                        
                                                                            uint32_t* _tmp_518 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_518 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_519 = 1;
                                                                        
                                                                            uint64_t* _tmp_518 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_518 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_518 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value - 2000;
                                                                        *_tmp_518 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value;
                                                                    }
                                                                    
                                                                    // Field:  type(DTM_year_eyr) name(eyr) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000566\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_365 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.
                                                                    *_ext_flag_365 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value >= 2000 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value <= 2127) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_365) {
                                                                        uint8_t* _tmp_521 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value <= INT32_MAX) {
                                                                            *_tmp_521 = 0;
                                                                        
                                                                            uint32_t* _tmp_520 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_520 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_521 = 1;
                                                                        
                                                                            uint64_t* _tmp_520 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_520 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_520 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value - 2000;
                                                                        *_tmp_520 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day.size() != 0) {
                                                                // Field:  type(DTM_month_day) name(month_day) extGroup(0)
                                                                    // DTM_month_day  SEQUENCE
                                                                        //  smd        MonthDay       
                                                                        //  emd        MonthDay       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay) name(smd) extGroup(0)
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000567\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.month.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.month.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_522 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.month.value - 1;
                                                                        *_tmp_522 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.month.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000568\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.day.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.day.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_523 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.day.value - 1;
                                                                        *_tmp_523 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.day.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    // Field:  type(MonthDay) name(emd) extGroup(0)
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000569\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.month.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.month.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_524 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.month.value - 1;
                                                                        *_tmp_524 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.month.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000570\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.day.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.day.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_525 = (uint8_t*) buffer++;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.day.value - 1;
                                                                        *_tmp_525 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.day.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                            return -1;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd.size() != 0) {
                                                                // Field:  type(PMD) name(pmd) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                if(debug)
                                                                    logger->print() << "|\033[38;5;94m000571\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd[0].values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd[0].values.size() < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd[0].values.size()) << " is less than allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd[0].values.size() > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd[0].values.size()) << " exceeds max allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_526 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd[0].values.size();
                                                                if(__aux64__ > 4) __aux64__ = 4;
                                                                *_tmp_526 = __aux64__ - 4;
                                                                buffer += 1;
                                                                
                                                                int __ifb = __aux64__;
                                                                for(int b = 0; b < __ifb; b++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd[0].values[b]? 1: 0);
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes.size() != 0) {
                                                                // Field:  type(DTM_hourMinutes) name(hour_minutes) extGroup(0)
                                                                    // DTM_hourMinutes  SEQUENCE
                                                                        //  shm        HoursMinutes     
                                                                        //  ehm        HoursMinutes     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes) name(shm) extGroup(0)
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000572\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.hours.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.hours.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_527 = (uint8_t*) buffer++;
                                                                        *_tmp_527 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.hours.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.hours.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000573\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.mins.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.mins.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_528 = (uint8_t*) buffer++;
                                                                        *_tmp_528 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.mins.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.mins.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    // Field:  type(HoursMinutes) name(ehm) extGroup(0)
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000574\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.hours.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.hours.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_529 = (uint8_t*) buffer++;
                                                                        *_tmp_529 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.hours.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.hours.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000575\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.mins.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.mins.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_530 = (uint8_t*) buffer++;
                                                                        *_tmp_530 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.mins.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.mins.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                            return -1;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week.size() != 0) {
                                                                // Field:  type(DayOfWeek) name(day_of_week) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(8) max(8) span(1)
                                                                if(debug)
                                                                    logger->print() << "|\033[38;5;94m000576\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week[0].values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week[0].values.size() < 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week[0].values.size()) << " is less than allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week[0].values.size() > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week[0].values.size()) << " exceeds max allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_531 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week[0].values.size();
                                                                if(__aux64__ > 8) __aux64__ = 8;
                                                                *_tmp_531 = __aux64__ - 8;
                                                                buffer += 1;
                                                                
                                                                int __ifc = __aux64__;
                                                                for(int c = 0; c < __ifc; c++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week[0].values[c]? 1: 0);
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period.size() != 0) {
                                                                // Field:  type(HoursMinutes) name(period) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000577\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_532 = (uint8_t*) buffer++;
                                                                    *_tmp_532 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000578\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_533 = (uint8_t*) buffer++;
                                                                    *_tmp_533 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt.size() != 0)  // CHOICE 1  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_26 = 1;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000579\033[0m| Choice selection: 1";
                                                    
                                                            // EDT  SEQUENCE
                                                                //  year        DTM_year            
                                                                //  month_day   DTM_month_day       
                                                                //  pmd         PMD                 
                                                                //  hourMinutes DTM_hourMinutes     
                                                                //  dayOfWeek   DayOfWeek           
                                                                //  period      HoursMinutes        
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(DTM_year) name(year) extGroup(0)
                                                                // DTM_year  SEQUENCE
                                                                    //  syr        DTM_year_syr     
                                                                    //  eyr        DTM_year_eyr     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(DTM_year_syr) name(syr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000580\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_376 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.
                                                                *_ext_flag_376 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value >= 2000 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value <= 2127) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_376) {
                                                                    uint8_t* _tmp_535 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value <= INT32_MAX) {
                                                                        *_tmp_535 = 0;
                                                                    
                                                                        uint32_t* _tmp_534 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_534 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_535 = 1;
                                                                    
                                                                        uint64_t* _tmp_534 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_534 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_534 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value - 2000;
                                                                    *_tmp_534 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value;
                                                                }
                                                                
                                                                // Field:  type(DTM_year_eyr) name(eyr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000581\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_377 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.
                                                                *_ext_flag_377 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value >= 2000 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value <= 2127) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_377) {
                                                                    uint8_t* _tmp_537 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value <= INT32_MAX) {
                                                                        *_tmp_537 = 0;
                                                                    
                                                                        uint32_t* _tmp_536 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_536 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_537 = 1;
                                                                    
                                                                        uint64_t* _tmp_536 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_536 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_536 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value - 2000;
                                                                    *_tmp_536 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value;
                                                                }
                                                            
                                                            // Field:  type(DTM_month_day) name(month_day) extGroup(0)
                                                                // DTM_month_day  SEQUENCE
                                                                    //  smd        MonthDay       
                                                                    //  emd        MonthDay       
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(MonthDay) name(smd) extGroup(0)
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000582\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.month.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.month.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_538 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.month.value - 1;
                                                                    *_tmp_538 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.month.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000583\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.day.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.day.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_539 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.day.value - 1;
                                                                    *_tmp_539 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.day.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                // Field:  type(MonthDay) name(emd) extGroup(0)
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000584\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.month.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.month.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_540 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.month.value - 1;
                                                                    *_tmp_540 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.month.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000585\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.day.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.day.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_541 = (uint8_t*) buffer++;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.day.value - 1;
                                                                    *_tmp_541 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.day.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            // Field:  type(PMD) name(pmd) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000586\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].pmd.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].pmd.values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].pmd.values.size() < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].pmd.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].pmd.values.size()) << " is less than allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].pmd.values.size() > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].pmd.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].pmd.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_542 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].pmd.values.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            *_tmp_542 = __aux64__ - 4;
                                                            buffer += 1;
                                                            
                                                            int __ifd = __aux64__;
                                                            for(int d = 0; d < __ifd; d++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].pmd.values[d]? 1: 0);
                                                            }
                                                            
                                                            // Field:  type(DTM_hourMinutes) name(hour_minutes) extGroup(0)
                                                                // DTM_hourMinutes  SEQUENCE
                                                                    //  shm        HoursMinutes     
                                                                    //  ehm        HoursMinutes     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(HoursMinutes) name(shm) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000587\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_543 = (uint8_t*) buffer++;
                                                                    *_tmp_543 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000588\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_544 = (uint8_t*) buffer++;
                                                                    *_tmp_544 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                // Field:  type(HoursMinutes) name(ehm) extGroup(0)
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000589\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.hours.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_545 = (uint8_t*) buffer++;
                                                                    *_tmp_545 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.hours.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.hours.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000590\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.mins.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_546 = (uint8_t*) buffer++;
                                                                    *_tmp_546 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.mins.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.mins.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            // Field:  type(DayOfWeek) name(day_of_week) extGroup(0)
                                                            // BitString
                                                            // BIT_STRING  min(8) max(8) span(1)
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000591\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].day_of_week.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].day_of_week.values.size());
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].day_of_week.values.size() < 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].day_of_week.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].day_of_week.values.size()) << " is less than allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].day_of_week.values.size() > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].day_of_week.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].day_of_week.values.size()) << " exceeds max allowable (8); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            uint8_t* _tmp_547 = (uint8_t*)buffer;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].day_of_week.values.size();
                                                            if(__aux64__ > 8) __aux64__ = 8;
                                                            *_tmp_547 = __aux64__ - 8;
                                                            buffer += 1;
                                                            
                                                            int __ife = __aux64__;
                                                            for(int e = 0; e < __ife; e++) {
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].day_of_week.values[e]? 1: 0);
                                                            }
                                                            
                                                            // Field:  type(HoursMinutes) name(period) extGroup(0)
                                                                // HoursMinutes  SEQUENCE
                                                                    //  hours      HoursMinutes_hours     
                                                                    //  mins       HoursMinutes_mins      
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000592\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.hours.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.hours.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_548 = (uint8_t*) buffer++;
                                                                *_tmp_548 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.hours.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.hours.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000593\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.mins.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.mins.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_549 = (uint8_t*) buffer++;
                                                                *_tmp_549 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.mins.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.mins.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                                    return -1;
                                                                }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dfl.size() != 0)  // CHOICE 2  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_26 = 2;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000594\033[0m| Choice selection: 2";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(8) span(8) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000595\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dfl[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dfl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dfl[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_550 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dfl[0].value - 1;
                                                        *_tmp_550 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dfl[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dfl[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dfl[0].value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved.size() != 0)  // CHOICE 3  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_26 = 3;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000596\033[0m| Choice selection: 3";
                                                    
                                                            // VED  SEQUENCE
                                                                //  hei        Distance     OPTIONAL  
                                                                //  wid        Distance     OPTIONAL  
                                                                //  vln        Distance     OPTIONAL  
                                                                //  wei        Weight       OPTIONAL  
                                                            // Optional fields bytemap
                                                            char* _tmp_551 = (char*) buffer++;
                                                            *_tmp_551 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000597\033[0m| Optional field hei = " << *_tmp_551;
                                                            char* _tmp_552 = (char*) buffer++;
                                                            *_tmp_552 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000598\033[0m| Optional field wid = " << *_tmp_552;
                                                            char* _tmp_553 = (char*) buffer++;
                                                            *_tmp_553 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000599\033[0m| Optional field vln = " << *_tmp_553;
                                                            char* _tmp_554 = (char*) buffer++;
                                                            *_tmp_554 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000600\033[0m| Optional field wei = " << *_tmp_554;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei.size() != 0) {
                                                                // Field:  type(Distance) name(hei) extGroup(0)
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Distance_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000601\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_555 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].value.value - 1;
                                                                    *_tmp_555 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000602\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_556 = (uint8_t*) buffer++;
                                                                    *_tmp_556 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid.size() != 0) {
                                                                // Field:  type(Distance) name(wid) extGroup(0)
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Distance_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000603\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_557 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].value.value - 1;
                                                                    *_tmp_557 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000604\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_558 = (uint8_t*) buffer++;
                                                                    *_tmp_558 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln.size() != 0) {
                                                                // Field:  type(Distance) name(vln) extGroup(0)
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Distance_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000605\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_559 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].value.value - 1;
                                                                    *_tmp_559 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000606\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_560 = (uint8_t*) buffer++;
                                                                    *_tmp_560 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei.size() != 0) {
                                                                // Field:  type(Weight) name(wei) extGroup(0)
                                                                    // Weight  SEQUENCE
                                                                        //  value      Weight_value     
                                                                        //  unit       RSCUnit          
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Weight_value) name(value) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000607\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].value.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_561 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].value.value - 1;
                                                                    *_tmp_561 = __aux64__;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].value.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000608\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].unit.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_562 = (uint8_t*) buffer++;
                                                                    *_tmp_562 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].unit.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].unit.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe.size() != 0)  // CHOICE 4  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_26 = 4;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000609\033[0m| Choice selection: 4";
                                                    
                                                            // SPE  SEQUENCE
                                                                //  spm        SPE_spm            OPTIONAL  
                                                                //  mns        SPE_mns            OPTIONAL  
                                                                //  unit       SPE_RSCUnit_unit     
                                                            // Optional fields bytemap
                                                            char* _tmp_563 = (char*) buffer++;
                                                            *_tmp_563 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000610\033[0m| Optional field spm = " << *_tmp_563;
                                                            char* _tmp_564 = (char*) buffer++;
                                                            *_tmp_564 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000611\033[0m| Optional field mns = " << *_tmp_564;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm.size() != 0) {
                                                                // Field:  type(SPE_spm) name(spm) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(250) span(251) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000612\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_565 = (uint8_t*) buffer++;
                                                                *_tmp_565 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm[0].value' (" << __aux64__ << ") exceeds max allowable (250); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns.size() != 0) {
                                                                // Field:  type(SPE_mns) name(mns) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(250) span(251) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000613\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_566 = (uint8_t*) buffer++;
                                                                *_tmp_566 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns[0].value' (" << __aux64__ << ") exceeds max allowable (250); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            // Field:  type(SPE_RSCUnit_unit) name(unit) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(1) span(2) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000614\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].unit.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].unit.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_567 = (uint8_t*) buffer++;
                                                            *_tmp_567 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].unit.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].unit.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].unit.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                return -1;
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].roi.size() != 0)  // CHOICE 5  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_26 = 5;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000615\033[0m| Choice selection: 5";
                                                    
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000616\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].roi[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].roi[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].roi[0].value);
                                                        }
                                                        
                                                        uint8_t* _tmp_568 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].roi[0].value - 1;
                                                        *_tmp_568 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].roi[0].value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].roi[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 32) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].roi[0].value' (" << __aux64__ << ") exceeds max allowable (32); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv.size() != 0)  // CHOICE 6  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_26 = 6;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000617\033[0m| Choice selection: 6";
                                                    
                                                            // DBV  SEQUENCE
                                                                //  value      Distance_value     
                                                                //  unit       RSCUnit            
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(Distance_value) name(value) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000618\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].value.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].value.value;
                                                            }
                                                            
                                                            uint16_t* _tmp_569 = (uint16_t*) buffer; buffer += 2;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].value.value - 1;
                                                            *_tmp_569 = __aux64__;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].value.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(RSCUnit) name(unit) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000619\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].unit.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].unit.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_570 = (uint8_t*) buffer++;
                                                            *_tmp_570 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].unit.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].unit.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].unit.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].unit.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                    
                                                    }
                                                    else if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd.size() != 0)  // CHOICE 7  fieldType(ISO14823Attributes_element) 
                                                    {
                                                        *_choice_26 = 7;  // Setting choice selection
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000620\033[0m| Choice selection: 7";
                                                    
                                                            // DDD  SEQUENCE
                                                                //  dcj        DDD_dcj      OPTIONAL  
                                                                //  dcr        DDD_dcr      OPTIONAL  
                                                                //  tpl        DDD_tpl      OPTIONAL  
                                                                //  ioList     DDD_ioList     
                                                            // Optional fields bytemap
                                                            char* _tmp_571 = (char*) buffer++;
                                                            *_tmp_571 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000621\033[0m| Optional field dcj = " << *_tmp_571;
                                                            char* _tmp_572 = (char*) buffer++;
                                                            *_tmp_572 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000622\033[0m| Optional field dcr = " << *_tmp_572;
                                                            char* _tmp_573 = (char*) buffer++;
                                                            *_tmp_573 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl.size() != 0 ? 1 : 0);
                                                            if(debug)
                                                                logger->print() << "|\033[38;5;94m000623\033[0m| Optional field tpl = " << *_tmp_573;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj.size() != 0) {
                                                                // Field:  type(DDD_dcj) name(dcj) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(1) max(128) span(128) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000624\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_574 = (uint8_t*) buffer++;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj[0].value - 1;
                                                                *_tmp_574 = __aux64__;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj[0].value' (" << __aux64__ << ") exceeds max allowable (128); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr.size() != 0) {
                                                                // Field:  type(DDD_dcr) name(dcr) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(1) max(128) span(128) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000625\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_575 = (uint8_t*) buffer++;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr[0].value - 1;
                                                                *_tmp_575 = __aux64__;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr[0].value' (" << __aux64__ << ") exceeds max allowable (128); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl.size() != 0) {
                                                                // Field:  type(DDD_tpl) name(tpl) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(1) max(128) span(128) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000626\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_576 = (uint8_t*) buffer++;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl[0].value - 1;
                                                                *_tmp_576 = __aux64__;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl[0].value' (" << __aux64__ << ") exceeds max allowable (128); message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                            
                                                            // Field:  type(DDD_ioList) name(io_list) extGroup(0)
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                                            uint8_t* _ext_flag_406 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.
                                                            *_ext_flag_406 = 0; 
                                                            
                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements.size();
                                                            if(__aux64__ > 8) __aux64__ = 8;
                                                            uint16_t* _tmp_577 = (uint16_t*)buffer;
                                                            buffer += 2;
                                                            *_tmp_577 = __aux64__ - 1;
                                                            
                                                            int __iff = __aux64__;
                                                            for(int f = 0; f < __iff; f++) { 
                                                                
                                                                    // DDD_IO  SEQUENCE
                                                                        //  drn        DDD_IO_drn             
                                                                        //  dp         DDD_IO_dp            OPTIONAL  
                                                                        //  dr         DDD_IO_dr            OPTIONAL  
                                                                        //  rne        DDD_IO_rne           OPTIONAL  
                                                                        //  stnId      DDD_IO_stnId         OPTIONAL  
                                                                        //  stnText    DDD_IO_stnText       OPTIONAL  
                                                                        //  dcp        DistanceOrDuration   OPTIONAL  
                                                                        //  ddp        DistanceOrDuration   OPTIONAL  
                                                                    // Optional fields bytemap
                                                                    char* _tmp_578 = (char*) buffer++;
                                                                    *_tmp_578 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000628\033[0m| Optional field dp = " << *_tmp_578;
                                                                    char* _tmp_579 = (char*) buffer++;
                                                                    *_tmp_579 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000629\033[0m| Optional field dr = " << *_tmp_579;
                                                                    char* _tmp_580 = (char*) buffer++;
                                                                    *_tmp_580 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000630\033[0m| Optional field rne = " << *_tmp_580;
                                                                    char* _tmp_581 = (char*) buffer++;
                                                                    *_tmp_581 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000631\033[0m| Optional field stn_id = " << *_tmp_581;
                                                                    char* _tmp_582 = (char*) buffer++;
                                                                    *_tmp_582 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000632\033[0m| Optional field stn_text = " << *_tmp_582;
                                                                    char* _tmp_583 = (char*) buffer++;
                                                                    *_tmp_583 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000633\033[0m| Optional field dcp = " << *_tmp_583;
                                                                    char* _tmp_584 = (char*) buffer++;
                                                                    *_tmp_584 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp.size() != 0 ? 1 : 0);
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000634\033[0m| Optional field ddp = " << *_tmp_584;
                                                                    
                                                                    // Field:  type(DDD_IO_drn) name(drn) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000635\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].drn.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].drn.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].drn.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_585 = (uint8_t*) buffer++;
                                                                    *_tmp_585 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].drn.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].drn.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].drn.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].drn.value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp.size() != 0) {
                                                                        // Field:  type(DDD_IO_dp) name(dp) extGroup(0)
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                                        uint8_t* _ext_flag_408 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].
                                                                        *_ext_flag_408 = 0; 
                                                                        
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements.size();
                                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                                        uint16_t* _tmp_586 = (uint16_t*)buffer;
                                                                        buffer += 2;
                                                                        *_tmp_586 = __aux64__ - 1;
                                                                        
                                                                        int __ifg = __aux64__;
                                                                        for(int g = 0; g < __ifg; g++) { 
                                                                            
                                                                                // DestinationPlace  SEQUENCE
                                                                                    //  depType    DDD_DEP                      
                                                                                    //  depBlob    DestinationPlace_depBlob   OPTIONAL  
                                                                                    //  plnId      DestinationPlace_plnId     OPTIONAL  
                                                                                    //  plnText    DestinationPlace_plnText   OPTIONAL  
                                                                                // Optional fields bytemap
                                                                                char* _tmp_587 = (char*) buffer++;
                                                                                *_tmp_587 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->print() << "|\033[38;5;94m000637\033[0m| Optional field dep_blob = " << *_tmp_587;
                                                                                char* _tmp_588 = (char*) buffer++;
                                                                                *_tmp_588 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->print() << "|\033[38;5;94m000638\033[0m| Optional field pln_id = " << *_tmp_588;
                                                                                char* _tmp_589 = (char*) buffer++;
                                                                                *_tmp_589 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->print() << "|\033[38;5;94m000639\033[0m| Optional field pln_text = " << *_tmp_589;
                                                                                
                                                                                // Field:  type(DDD_DEP) name(dep_type) extGroup(0)
                                                                                // Integer
                                                                                
                                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                                if(debug) {
                                                                                    logger->print() << "|\033[38;5;94m000640\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value) << 
                                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value);
                                                                                }
                                                                                
                                                                                uint8_t* _ext_flag_409 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.
                                                                                *_ext_flag_409 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value <= 15) ? 0 : 1;
                                                                                
                                                                                if(*_ext_flag_409) {
                                                                                    uint8_t* _tmp_591 = (uint8_t*) buffer++; 
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value <= INT32_MAX) {
                                                                                        *_tmp_591 = 0;
                                                                                    
                                                                                        uint32_t* _tmp_590 = (uint32_t*)buffer; buffer += 4;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value;
                                                                                        __aux64__ -= INT32_MIN;
                                                                                        *_tmp_590 = __aux64__;
                                                                                    } 
                                                                                    else
                                                                                    {
                                                                                        *_tmp_591 = 1;
                                                                                    
                                                                                        uint64_t* _tmp_590 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value;
                                                                                        __aux64__ -= INT64_MIN;
                                                                                        *_tmp_590 = __aux64__;
                                                                                    }
                                                                                } else {
                                                                                    uint8_t* _tmp_590 = (uint8_t*) buffer++;
                                                                                    *_tmp_590 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value; 
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value;
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob.size() != 0) {
                                                                                    // Field:  type(DestinationPlace_depBlob) name(dep_blob) extGroup(0)
                                                                                    // OctetString
                                                                                    // Indefinite length
                                                                                    // OCTET_STRING  min(0) max(16383) span(16384)
                                                                                    
                                                                                    if(debug)
                                                                                        logger->print() << "|\033[38;5;94m000641\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob[0].values.size(): ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob[0]" << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob[0].values.size());
                                                                                    
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob[0].values.size() < 0) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob[0].value' (" << 
                                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob[0].values.size() << ") is less than allowable (0); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob[0].values.size() > 16383) {
                                                                                        logger->warning() << "Error: Value in 'ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob[0].value' (" << 
                                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob[0].values.size() << ") exceeds max allowable (16383); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    uint16_t* _tmp_592 = (uint16_t*)buffer;
                                                                                    buffer += 2;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob[0].values.size();
                                                                                    if(__aux64__ > 16383) __aux64__ = 16383;
                                                                                    *_tmp_592 = __aux64__;
                                                                                    
                                                                                    int __ifh = __aux64__;
                                                                                    for(int h = 0; h < __ifh; h++) {
                                                                                        int8_t* __m__ = (int8_t*)buffer++;
                                                                                        *__m__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob[0].values[h];
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id.size() != 0) {
                                                                                    // Field:  type(DestinationPlace_plnId) name(pln_id) extGroup(0)
                                                                                    // Integer
                                                                                    
                                                                                    // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                                    if(debug) {
                                                                                        logger->print() << "|\033[38;5;94m000642\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id[0].value;
                                                                                    }
                                                                                    
                                                                                    uint16_t* _tmp_593 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id[0].value - 1;
                                                                                    *_tmp_593 = __aux64__;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id[0].value;
                                                                                    
                                                                                    // MIN validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    // MAX validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text.size() != 0) {
                                                                                    // Field:  type(DestinationPlace_plnText) name(pln_text) extGroup(0)
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_594 = (uint16_t*)buffer;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text[0].value.size();
                                                                                    
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text[0].value.size() < 0) {
                                                                                        logger->warning() << "Error: Length of 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text[0].value) << " is less than allowable (0); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text[0].value.size() > 16383) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text[0].value) << " exceeds max allowable (16383); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(debug)
                                                                                        logger->print() << "|\033[38;5;94m000643\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text[0].value.size(): " << 
                                                                                                    static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text[0].value.size());
                                                                                    
                                                                                    if(__aux64__ > 16383) __aux64__ = 16383;
                                                                                    *_tmp_594 = __aux64__;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int __ifi = __aux64__;
                                                                                    for(int i = 0; i < __ifi; i++) {  // 16383
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        *__tmp__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text[0].value.c_str()[i];
                                                                                    }
                                                                                }
                                                                                
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr.size() != 0) {
                                                                        // Field:  type(DDD_IO_dr) name(dr) extGroup(0)
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                                        uint8_t* _ext_flag_411 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].
                                                                        *_ext_flag_411 = 0; 
                                                                        
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements.size();
                                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                                        uint16_t* _tmp_595 = (uint16_t*)buffer;
                                                                        buffer += 2;
                                                                        *_tmp_595 = __aux64__ - 1;
                                                                        
                                                                        int __ifj = __aux64__;
                                                                        for(int j = 0; j < __ifj; j++) { 
                                                                            
                                                                                // DestinationRoad  SEQUENCE
                                                                                    //  derType    DDD_DER                     
                                                                                    //  ronId      DestinationRoad_ronId     OPTIONAL  
                                                                                    //  ronText    DestinationRoad_ronText   OPTIONAL  
                                                                                // Optional fields bytemap
                                                                                char* _tmp_596 = (char*) buffer++;
                                                                                *_tmp_596 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->print() << "|\033[38;5;94m000645\033[0m| Optional field ron_id = " << *_tmp_596;
                                                                                char* _tmp_597 = (char*) buffer++;
                                                                                *_tmp_597 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text.size() != 0 ? 1 : 0);
                                                                                if(debug)
                                                                                    logger->print() << "|\033[38;5;94m000646\033[0m| Optional field ron_text = " << *_tmp_597;
                                                                                
                                                                                // Field:  type(DDD_DER) name(der_type) extGroup(0)
                                                                                // Integer
                                                                                
                                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                                if(debug) {
                                                                                    logger->print() << "|\033[38;5;94m000647\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value) << 
                                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value);
                                                                                }
                                                                                
                                                                                uint8_t* _ext_flag_412 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.
                                                                                *_ext_flag_412 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value <= 15) ? 0 : 1;
                                                                                
                                                                                if(*_ext_flag_412) {
                                                                                    uint8_t* _tmp_599 = (uint8_t*) buffer++; 
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value <= INT32_MAX) {
                                                                                        *_tmp_599 = 0;
                                                                                    
                                                                                        uint32_t* _tmp_598 = (uint32_t*)buffer; buffer += 4;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value;
                                                                                        __aux64__ -= INT32_MIN;
                                                                                        *_tmp_598 = __aux64__;
                                                                                    } 
                                                                                    else
                                                                                    {
                                                                                        *_tmp_599 = 1;
                                                                                    
                                                                                        uint64_t* _tmp_598 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value;
                                                                                        __aux64__ -= INT64_MIN;
                                                                                        *_tmp_598 = __aux64__;
                                                                                    }
                                                                                } else {
                                                                                    uint8_t* _tmp_598 = (uint8_t*) buffer++;
                                                                                    *_tmp_598 = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value; 
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value;
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id.size() != 0) {
                                                                                    // Field:  type(DestinationRoad_ronId) name(ron_id) extGroup(0)
                                                                                    // Integer
                                                                                    
                                                                                    // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                                    if(debug) {
                                                                                        logger->print() << "|\033[38;5;94m000648\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id[0].value;
                                                                                    }
                                                                                    
                                                                                    uint16_t* _tmp_600 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id[0].value - 1;
                                                                                    *_tmp_600 = __aux64__;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id[0].value;
                                                                                    
                                                                                    // MIN validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    // MAX validator
                                                                                    if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text.size() != 0) {
                                                                                    // Field:  type(DestinationRoad_ronText) name(ron_text) extGroup(0)
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_601 = (uint16_t*)buffer;
                                                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text[0].value.size();
                                                                                    
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text[0].value.size() < 0) {
                                                                                        logger->warning() << "Error: Length of 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text[0].value) << " is less than allowable (0); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text[0].value.size() > 16383) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text[0].value) << " exceeds max allowable (16383); message dropped.";
                                                                                        return -1;
                                                                                    }
                                                                                    if(debug)
                                                                                        logger->print() << "|\033[38;5;94m000649\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text[0].value.size(): " << 
                                                                                                    static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text[0].value.size());
                                                                                    
                                                                                    if(__aux64__ > 16383) __aux64__ = 16383;
                                                                                    *_tmp_601 = __aux64__;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int __ifk = __aux64__;
                                                                                    for(int k = 0; k < __ifk; k++) {  // 16383
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        *__tmp__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text[0].value.c_str()[k];
                                                                                    }
                                                                                }
                                                                                
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne.size() != 0) {
                                                                        // Field:  type(DDD_IO_rne) name(rne) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000650\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne[0].value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne[0].value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_602 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne[0].value - 1;
                                                                        *_tmp_602 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne[0].value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id.size() != 0) {
                                                                        // Field:  type(DDD_IO_stnId) name(stn_id) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(1) max(999) span(999) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000651\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id[0].value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id[0].value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_603 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id[0].value - 1;
                                                                        *_tmp_603 = __aux64__;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id[0].value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id[0].value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id[0].value' (" << __aux64__ << ") exceeds max allowable (999); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text.size() != 0) {
                                                                        // Field:  type(DDD_IO_stnText) name(stn_text) extGroup(0)
                                                                        // Text
                                                                        
                                                                        // Indefinite length
                                                                        // TEXT  min(0) max(16383) span(16384)
                                                                        uint16_t* _tmp_604 = (uint16_t*)buffer;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text[0].value.size();
                                                                        
                                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text[0].value.size() < 0) {
                                                                            logger->warning() << "Error: Length of 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text[0].value) << " is less than allowable (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text[0].value.size() > 16383) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text[0].value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text[0].value) << " exceeds max allowable (16383); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        if(debug)
                                                                            logger->print() << "|\033[38;5;94m000652\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text[0].value.size(): " << 
                                                                                        static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text[0].value.size());
                                                                        
                                                                        if(__aux64__ > 16383) __aux64__ = 16383;
                                                                        *_tmp_604 = __aux64__;
                                                                        buffer += 2;
                                                                        
                                                                        int __ifl = __aux64__;
                                                                        for(int l = 0; l < __ifl; l++) {  // 16383
                                                                            char* __tmp__ = (char*)buffer++;
                                                                            *__tmp__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text[0].value.c_str()[l];
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp.size() != 0) {
                                                                        // Field:  type(DistanceOrDuration) name(dcp) extGroup(0)
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(DistanceOrDuration_value) name(value) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000653\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].value.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_605 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].value.value - 1;
                                                                            *_tmp_605 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].value.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(DistanceOrDuration_RSCUnit_unit) name(unit) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(2) max(9) span(8) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000654\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].unit.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_606 = (uint8_t*) buffer++;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].unit.value - 2;
                                                                            *_tmp_606 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].unit.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].unit.value' (" << __aux64__ << ") less than (2); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].unit.value' (" << __aux64__ << ") exceeds max allowable (9); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp.size() != 0) {
                                                                        // Field:  type(DistanceOrDuration) name(ddp) extGroup(0)
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(DistanceOrDuration_value) name(value) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(1) max(16384) span(16384) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000655\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].value.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_607 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].value.value - 1;
                                                                            *_tmp_607 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].value.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].value.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].value.value' (" << __aux64__ << ") exceeds max allowable (16384); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(DistanceOrDuration_RSCUnit_unit) name(unit) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(2) max(9) span(8) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000656\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].unit.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_608 = (uint8_t*) buffer++;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].unit.value - 2;
                                                                            *_tmp_608 = __aux64__;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].unit.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].unit.value' (" << __aux64__ << ") less than (2); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].unit.value' (" << __aux64__ << ") exceeds max allowable (9); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    }
                                                                    
                                                            }
                                                    
                                                    }
                                                    else
                                                    {
                                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_26) << ") selected in CHOICE ISO14823Attributes_element in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a]'; message dropped.";
                                                        return -1;
                                                    }
                                                }
                                            }
                                    
                                    }
                                    else
                                    {
                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_23) << ") selected in CHOICE RSCode_code in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code'; message dropped.";
                                        return -1;
                                    }
                                    
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text.size() != 0) {
                                // Field:  type(GicPart_extraText) name(extra_text) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                uint8_t* _ext_flag_420 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].
                                *_ext_flag_420 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements.size();
                                if(__aux64__ > 4) __aux64__ = 4;
                                uint16_t* _tmp_609 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_609 = __aux64__ - 1;
                                
                                int __ifm = __aux64__;
                                for(int m = 0; m < __ifm; m++) { 
                                    
                                        // Text  SEQUENCE
                                            //  layoutComponentId Text_layoutComponentId   OPTIONAL  
                                            //  language          Text_language              
                                            //  textContent       Text_textContent           
                                        // Optional fields bytemap
                                        char* _tmp_610 = (char*) buffer++;
                                        *_tmp_610 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id.size() != 0 ? 1 : 0);
                                        if(debug)
                                            logger->print() << "|\033[38;5;94m000658\033[0m| Optional field layout_component_id = " << *_tmp_610;
                                        
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id.size() != 0) {
                                            // Field:  type(Text_layoutComponentId) name(layout_component_id) extGroup(0)
                                            // Integer
                                            
                                            // UINT8  min(1) max(4) span(4) dataType(UInt8)
                                            if(debug) {
                                                logger->print() << "|\033[38;5;94m000659\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value) << 
                                                             " ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value);
                                            }
                                            
                                            uint8_t* _ext_flag_421 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].
                                            *_ext_flag_421 = (ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value >= 1 && ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value <= 4) ? 0 : 1;
                                            
                                            if(*_ext_flag_421) {
                                                uint8_t* _tmp_612 = (uint8_t*) buffer++; 
                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value >= 0 && ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value <= INT32_MAX) {
                                                    *_tmp_612 = 0;
                                                
                                                    uint32_t* _tmp_611 = (uint32_t*)buffer; buffer += 4;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value;
                                                    __aux64__ -= INT32_MIN;
                                                    *_tmp_611 = __aux64__;
                                                } 
                                                else
                                                {
                                                    *_tmp_612 = 1;
                                                
                                                    uint64_t* _tmp_611 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value;
                                                    __aux64__ -= INT64_MIN;
                                                    *_tmp_611 = __aux64__;
                                                }
                                            } else {
                                                uint8_t* _tmp_611 = (uint8_t*) buffer++;
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value - 1;
                                                *_tmp_611 = __aux64__;
                                                __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value;
                                            }
                                        }
                                        
                                        // Field:  type(Text_language) name(language) extGroup(0)
                                        // BitString
                                        // BIT_STRING  min(10) max(10) span(1)
                                        if(debug)
                                            logger->print() << "|\033[38;5;94m000660\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].language.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].language.values.size());
                                        
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].language.values.size() < 10) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].language.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].language.values.size()) << " is less than allowable (10); message dropped.";
                                            return -1;
                                        }
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].language.values.size() > 10) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].language.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].language.values.size()) << " exceeds max allowable (10); message dropped.";
                                            return -1;
                                        }
                                        
                                        uint8_t* _tmp_613 = (uint8_t*)buffer;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].language.values.size();
                                        if(__aux64__ > 10) __aux64__ = 10;
                                        *_tmp_613 = __aux64__ - 10;
                                        buffer += 1;
                                        
                                        int __ifn = __aux64__;
                                        for(int n = 0; n < __ifn; n++) {
                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                            *__b__ = (ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].language.values[n]? 1: 0);
                                        }
                                        
                                        // Field:  type(Text_textContent) name(text_content) extGroup(0)
                                        // Text
                                        
                                        // Indefinite length
                                        // TEXT  min(0) max(16383) span(16384)
                                        uint16_t* _tmp_614 = (uint16_t*)buffer;
                                        __aux64__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].text_content.value.size();
                                        
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].text_content.value.size() < 0) {
                                            logger->warning() << "Error: Length of 'ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].text_content.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].text_content.value) << " is less than allowable (0); message dropped.";
                                            return -1;
                                        }
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].text_content.value.size() > 16383) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].text_content.value' " << (ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].text_content.value) << " exceeds max allowable (16383); message dropped.";
                                            return -1;
                                        }
                                        if(debug)
                                            logger->print() << "|\033[38;5;94m000661\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].text_content.value.size(): " << 
                                                        static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].text_content.value.size());
                                        
                                        if(__aux64__ > 16383) __aux64__ = 16383;
                                        *_tmp_614 = __aux64__;
                                        buffer += 2;
                                        
                                        int __ifo = __aux64__;
                                        for(int o = 0; o < __ifo; o++) {  // 16383
                                            char* __tmp__ = (char*)buffer++;
                                            *__tmp__ = ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].text_content.value.c_str()[o];
                                        }
                                        
                                }
                            }
                            
                            if(*_ext_flag_75) {
                            }
                    }
                
                }
                else if(ros->ivi.optional[0].elements[c].rcc.size() != 0)  // CHOICE 2  fieldType(IviContainer) 
                {
                    *_choice_1 = 2;  // Setting choice selection
                
                    if(debug)
                        logger->debug() << "|\033[38;5;94m000662\033[0m| Choice selection: 2";
                
                    // SequenceOf
                    // Data Type UInt8
                    // SEQUENCE_OF  min(1) max(16) span(16) ext(true)
                    uint8_t* _ext_flag_422 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].rcc[0].
                    *_ext_flag_422 = 0; 
                    
                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements.size();
                    if(__aux64__ > 16) __aux64__ = 16;
                    uint16_t* _tmp_616 = (uint16_t*)buffer;
                    buffer += 2;
                    *_tmp_616 = __aux64__ - 1;
                    
                    int __ifp = __aux64__;
                    for(int p = 0; p < __ifp; p++) { 
                        
                            // RccPart  SEQUENCE
                                //  zoneIds           RccPart_zoneIds               
                                //  roadType          RoadType                      
                                //  laneConfiguration RccPart_laneConfiguration     
                                //  ...
                            uint8_t* _ext_flag_423 = (uint8_t*) buffer++;  // Write extension flag for RccPart
                            *_ext_flag_423 = 0;  
                            
                            // Optional fields bytemap
                            
                            // Field:  type(RccPart_zoneIds) name(zone_ids) extGroup(0)
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                            uint8_t* _ext_flag_424 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.
                            *_ext_flag_424 = 0; 
                            
                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements.size();
                            if(__aux64__ > 8) __aux64__ = 8;
                            uint16_t* _tmp_617 = (uint16_t*)buffer;
                            buffer += 2;
                            *_tmp_617 = __aux64__ - 1;
                            
                            int __ifq = __aux64__;
                            for(int q = 0; q < __ifq; q++) { 
                                
                                // Integer
                                
                                // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000665\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value) << 
                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value);
                                }
                                
                                uint8_t* _ext_flag_425 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].
                                *_ext_flag_425 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value >= 1 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value <= 32) ? 0 : 1;
                                
                                if(*_ext_flag_425) {
                                    uint8_t* _tmp_619 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value <= INT32_MAX) {
                                        *_tmp_619 = 0;
                                    
                                        uint32_t* _tmp_618 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_618 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_619 = 1;
                                    
                                        uint64_t* _tmp_618 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_618 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_618 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value - 1;
                                    *_tmp_618 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value;
                                }
                            }
                            
                            // Field:  type(RoadType) name(road_type) extGroup(0)
                            // Enumerated
                            // INT32  min(0) max(3) span(4) dataType(Int32)
                            if(debug) {
                                logger->print() << "|\033[38;5;94m000666\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].road_type.value) << 
                                             " ivi.optional[0].elements[c].rcc[0].elements[p].road_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].road_type.value);
                            }
                            
                            uint8_t* _tmp_620 = (uint8_t*)buffer;
                            buffer += 1;
                            *_tmp_620 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].road_type.value; 
                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].road_type.value; 
                            // MIN validator
                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].road_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                return -1;
                            }
                            // MAX validator
                            if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].road_type.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                return -1;
                            }
                            
                            // Field:  type(RccPart_laneConfiguration) name(lane_configuration) extGroup(0)
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(16) span(16) ext(true)
                            uint8_t* _ext_flag_427 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.
                            *_ext_flag_427 = 0; 
                            
                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements.size();
                            if(__aux64__ > 16) __aux64__ = 16;
                            uint16_t* _tmp_621 = (uint16_t*)buffer;
                            buffer += 2;
                            *_tmp_621 = __aux64__ - 1;
                            
                            int __ifr = __aux64__;
                            for(int r = 0; r < __ifr; r++) { 
                                
                                    // LaneInformation  SEQUENCE
                                        //  laneNumber        LanePosition                       
                                        //  direction         Direction                          
                                        //  validity          DTM                              OPTIONAL  
                                        //  laneType          LaneType                           
                                        //  laneTypeQualifier CompleteVehicleCharacteristics   OPTIONAL  
                                        //  laneStatus        LaneStatus                         
                                        //  laneWidth         IVILaneWidth                     OPTIONAL  
                                        //  ...
                                    uint8_t* _ext_flag_428 = (uint8_t*) buffer++;  // Write extension flag for LaneInformation
                                    *_ext_flag_428 = 0;  
                                    
                                    // Optional fields bytemap
                                    char* _tmp_622 = (char*) buffer++;
                                    *_tmp_622 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity.size() != 0 ? 1 : 0);
                                    if(debug)
                                        logger->print() << "|\033[38;5;94m000668\033[0m| Optional field validity = " << *_tmp_622;
                                    char* _tmp_623 = (char*) buffer++;
                                    *_tmp_623 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier.size() != 0 ? 1 : 0);
                                    if(debug)
                                        logger->print() << "|\033[38;5;94m000669\033[0m| Optional field lane_type_qualifier = " << *_tmp_623;
                                    char* _tmp_624 = (char*) buffer++;
                                    *_tmp_624 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width.size() != 0 ? 1 : 0);
                                    if(debug)
                                        logger->print() << "|\033[38;5;94m000670\033[0m| Optional field lane_width = " << *_tmp_624;
                                    
                                    // Field:  type(LanePosition) name(lane_number) extGroup(0)
                                    // Integer
                                    
                                    // INT8  min(-1) max(14) span(16) dataType(Int8)
                                    if(debug) {
                                        logger->print() << "|\033[38;5;94m000671\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_number.value) << 
                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_number.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_number.value);
                                    }
                                    
                                    uint8_t* _tmp_625 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_number.value - -1;
                                    *_tmp_625 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_number.value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_number.value' (" << __aux64__ << ") less than (-1); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_number.value' (" << __aux64__ << ") exceeds max allowable (14); message dropped.";
                                        return -1;
                                    }
                                    
                                    // Field:  type(Direction) name(direction) extGroup(0)
                                    // Integer
                                    
                                    // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                    if(debug) {
                                        logger->print() << "|\033[38;5;94m000672\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].direction.value) << 
                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].direction.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].direction.value);
                                    }
                                    
                                    uint8_t* _tmp_626 = (uint8_t*) buffer++;
                                    *_tmp_626 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].direction.value; 
                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].direction.value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].direction.value' (" << __aux64__ << ") less than (0); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].direction.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                        return -1;
                                    }
                                    
                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity.size() != 0) {
                                        // Field:  type(DTM) name(validity) extGroup(0)
                                            // DTM  SEQUENCE
                                                //  year        DTM_year          OPTIONAL  
                                                //  month_day   DTM_month_day     OPTIONAL  
                                                //  pmd         PMD               OPTIONAL  
                                                //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                //  period      HoursMinutes      OPTIONAL  
                                            // Optional fields bytemap
                                            char* _tmp_627 = (char*) buffer++;
                                            *_tmp_627 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000673\033[0m| Optional field year = " << *_tmp_627;
                                            char* _tmp_628 = (char*) buffer++;
                                            *_tmp_628 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000674\033[0m| Optional field month_day = " << *_tmp_628;
                                            char* _tmp_629 = (char*) buffer++;
                                            *_tmp_629 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000675\033[0m| Optional field pmd = " << *_tmp_629;
                                            char* _tmp_630 = (char*) buffer++;
                                            *_tmp_630 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000676\033[0m| Optional field hour_minutes = " << *_tmp_630;
                                            char* _tmp_631 = (char*) buffer++;
                                            *_tmp_631 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000677\033[0m| Optional field day_of_week = " << *_tmp_631;
                                            char* _tmp_632 = (char*) buffer++;
                                            *_tmp_632 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000678\033[0m| Optional field period = " << *_tmp_632;
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year.size() != 0) {
                                                // Field:  type(DTM_year) name(year) extGroup(0)
                                                    // DTM_year  SEQUENCE
                                                        //  syr        DTM_year_syr     
                                                        //  eyr        DTM_year_eyr     
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(DTM_year_syr) name(syr) extGroup(0)
                                                    // Integer
                                                    
                                                    // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000679\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value) << 
                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value);
                                                    }
                                                    
                                                    uint8_t* _ext_flag_431 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.
                                                    *_ext_flag_431 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value >= 2000 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value <= 2127) ? 0 : 1;
                                                    
                                                    if(*_ext_flag_431) {
                                                        uint8_t* _tmp_634 = (uint8_t*) buffer++; 
                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value <= INT32_MAX) {
                                                            *_tmp_634 = 0;
                                                        
                                                            uint32_t* _tmp_633 = (uint32_t*)buffer; buffer += 4;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value;
                                                            __aux64__ -= INT32_MIN;
                                                            *_tmp_633 = __aux64__;
                                                        } 
                                                        else
                                                        {
                                                            *_tmp_634 = 1;
                                                        
                                                            uint64_t* _tmp_633 = (uint64_t*)buffer; buffer += 8;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value;
                                                            __aux64__ -= INT64_MIN;
                                                            *_tmp_633 = __aux64__;
                                                        }
                                                    } else {
                                                        uint8_t* _tmp_633 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value - 2000;
                                                        *_tmp_633 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value;
                                                    }
                                                    
                                                    // Field:  type(DTM_year_eyr) name(eyr) extGroup(0)
                                                    // Integer
                                                    
                                                    // UINT16  min(2000) max(2127) span(128) dataType(UInt16)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000680\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value) << 
                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value);
                                                    }
                                                    
                                                    uint8_t* _ext_flag_432 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.
                                                    *_ext_flag_432 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value >= 2000 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value <= 2127) ? 0 : 1;
                                                    
                                                    if(*_ext_flag_432) {
                                                        uint8_t* _tmp_636 = (uint8_t*) buffer++; 
                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value <= INT32_MAX) {
                                                            *_tmp_636 = 0;
                                                        
                                                            uint32_t* _tmp_635 = (uint32_t*)buffer; buffer += 4;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value;
                                                            __aux64__ -= INT32_MIN;
                                                            *_tmp_635 = __aux64__;
                                                        } 
                                                        else
                                                        {
                                                            *_tmp_636 = 1;
                                                        
                                                            uint64_t* _tmp_635 = (uint64_t*)buffer; buffer += 8;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value;
                                                            __aux64__ -= INT64_MIN;
                                                            *_tmp_635 = __aux64__;
                                                        }
                                                    } else {
                                                        uint8_t* _tmp_635 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value - 2000;
                                                        *_tmp_635 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value;
                                                    }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day.size() != 0) {
                                                // Field:  type(DTM_month_day) name(month_day) extGroup(0)
                                                    // DTM_month_day  SEQUENCE
                                                        //  smd        MonthDay       
                                                        //  emd        MonthDay       
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(MonthDay) name(smd) extGroup(0)
                                                        // MonthDay  SEQUENCE
                                                            //  month      MonthDay_month     
                                                            //  day        MonthDay_day       
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000681\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.month.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.month.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_637 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.month.value - 1;
                                                        *_tmp_637 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.month.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000682\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.day.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.day.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_638 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.day.value - 1;
                                                        *_tmp_638 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.day.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    // Field:  type(MonthDay) name(emd) extGroup(0)
                                                        // MonthDay  SEQUENCE
                                                            //  month      MonthDay_month     
                                                            //  day        MonthDay_day       
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(MonthDay_month) name(month) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(12) span(12) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000683\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.month.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.month.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_639 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.month.value - 1;
                                                        *_tmp_639 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.month.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.month.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 12) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.month.value' (" << __aux64__ << ") exceeds max allowable (12); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(MonthDay_day) name(day) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(1) max(31) span(31) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000684\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.day.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.day.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_640 = (uint8_t*) buffer++;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.day.value - 1;
                                                        *_tmp_640 = __aux64__;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.day.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.day.value' (" << __aux64__ << ") less than (1); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.day.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                                            return -1;
                                                        }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd.size() != 0) {
                                                // Field:  type(PMD) name(pmd) extGroup(0)
                                                // BitString
                                                // BIT_STRING  min(4) max(4) span(1)
                                                if(debug)
                                                    logger->print() << "|\033[38;5;94m000685\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd[0].values.size());
                                                
                                                if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd[0].values.size() < 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd[0].value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd[0].values.size()) << " is less than allowable (4); message dropped.";
                                                    return -1;
                                                }
                                                if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd[0].values.size() > 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd[0].value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd[0].values.size()) << " exceeds max allowable (4); message dropped.";
                                                    return -1;
                                                }
                                                
                                                uint8_t* _tmp_641 = (uint8_t*)buffer;
                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd[0].values.size();
                                                if(__aux64__ > 4) __aux64__ = 4;
                                                *_tmp_641 = __aux64__ - 4;
                                                buffer += 1;
                                                
                                                int __ifs = __aux64__;
                                                for(int s = 0; s < __ifs; s++) {
                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                    *__b__ = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd[0].values[s]? 1: 0);
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes.size() != 0) {
                                                // Field:  type(DTM_hourMinutes) name(hour_minutes) extGroup(0)
                                                    // DTM_hourMinutes  SEQUENCE
                                                        //  shm        HoursMinutes     
                                                        //  ehm        HoursMinutes     
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(HoursMinutes) name(shm) extGroup(0)
                                                        // HoursMinutes  SEQUENCE
                                                            //  hours      HoursMinutes_hours     
                                                            //  mins       HoursMinutes_mins      
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000686\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.hours.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.hours.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_642 = (uint8_t*) buffer++;
                                                        *_tmp_642 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.hours.value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.hours.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000687\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.mins.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.mins.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_643 = (uint8_t*) buffer++;
                                                        *_tmp_643 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.mins.value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.mins.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                            return -1;
                                                        }
                                                    
                                                    // Field:  type(HoursMinutes) name(ehm) extGroup(0)
                                                        // HoursMinutes  SEQUENCE
                                                            //  hours      HoursMinutes_hours     
                                                            //  mins       HoursMinutes_mins      
                                                        // Optional fields bytemap
                                                        
                                                        // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000688\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.hours.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.hours.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_644 = (uint8_t*) buffer++;
                                                        *_tmp_644 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.hours.value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.hours.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                            return -1;
                                                        }
                                                        
                                                        // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                        // Integer
                                                        
                                                        // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                        if(debug) {
                                                            logger->print() << "|\033[38;5;94m000689\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.mins.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.mins.value);
                                                        }
                                                        
                                                        uint8_t* _tmp_645 = (uint8_t*) buffer++;
                                                        *_tmp_645 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.mins.value; 
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.mins.value;
                                                        
                                                        // MIN validator
                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                            return -1;
                                                        }
                                                        // MAX validator
                                                        if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                            return -1;
                                                        }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week.size() != 0) {
                                                // Field:  type(DayOfWeek) name(day_of_week) extGroup(0)
                                                // BitString
                                                // BIT_STRING  min(8) max(8) span(1)
                                                if(debug)
                                                    logger->print() << "|\033[38;5;94m000690\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week[0].values.size());
                                                
                                                if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week[0].values.size() < 8) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week[0].value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week[0].values.size()) << " is less than allowable (8); message dropped.";
                                                    return -1;
                                                }
                                                if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week[0].values.size() > 8) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week[0].value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week[0].values.size()) << " exceeds max allowable (8); message dropped.";
                                                    return -1;
                                                }
                                                
                                                uint8_t* _tmp_646 = (uint8_t*)buffer;
                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week[0].values.size();
                                                if(__aux64__ > 8) __aux64__ = 8;
                                                *_tmp_646 = __aux64__ - 8;
                                                buffer += 1;
                                                
                                                int __ift = __aux64__;
                                                for(int t = 0; t < __ift; t++) {
                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                    *__b__ = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week[0].values[t]? 1: 0);
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period.size() != 0) {
                                                // Field:  type(HoursMinutes) name(period) extGroup(0)
                                                    // HoursMinutes  SEQUENCE
                                                        //  hours      HoursMinutes_hours     
                                                        //  mins       HoursMinutes_mins      
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(HoursMinutes_hours) name(hours) extGroup(0)
                                                    // Integer
                                                    
                                                    // UINT8  min(0) max(23) span(24) dataType(UInt8)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000691\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].hours.value) << 
                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].hours.value);
                                                    }
                                                    
                                                    uint8_t* _tmp_647 = (uint8_t*) buffer++;
                                                    *_tmp_647 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].hours.value; 
                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].hours.value;
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].hours.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 23) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].hours.value' (" << __aux64__ << ") exceeds max allowable (23); message dropped.";
                                                        return -1;
                                                    }
                                                    
                                                    // Field:  type(HoursMinutes_mins) name(mins) extGroup(0)
                                                    // Integer
                                                    
                                                    // UINT8  min(0) max(59) span(60) dataType(UInt8)
                                                    if(debug) {
                                                        logger->print() << "|\033[38;5;94m000692\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].mins.value) << 
                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].mins.value);
                                                    }
                                                    
                                                    uint8_t* _tmp_648 = (uint8_t*) buffer++;
                                                    *_tmp_648 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].mins.value; 
                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].mins.value;
                                                    
                                                    // MIN validator
                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].mins.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                        return -1;
                                                    }
                                                    // MAX validator
                                                    if (VALIDATORS_ENABLED && __aux64__ > 59) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].mins.value' (" << __aux64__ << ") exceeds max allowable (59); message dropped.";
                                                        return -1;
                                                    }
                                            }
                                    }
                                    
                                    // Field:  type(LaneType) name(lane_type) extGroup(0)
                                    // Integer
                                    
                                    // UINT8  min(0) max(31) span(32) dataType(UInt8)
                                    if(debug) {
                                        logger->print() << "|\033[38;5;94m000693\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type.value) << 
                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type.value);
                                    }
                                    
                                    uint8_t* _tmp_649 = (uint8_t*) buffer++;
                                    *_tmp_649 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type.value; 
                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type.value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 31) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type.value' (" << __aux64__ << ") exceeds max allowable (31); message dropped.";
                                        return -1;
                                    }
                                    
                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier.size() != 0) {
                                        // Field:  type(CompleteVehicleCharacteristics) name(lane_type_qualifier) extGroup(0)
                                            // CompleteVehicleCharacteristics  SEQUENCE
                                                //  tractor    TractorCharacteristics                   OPTIONAL  
                                                //  trailer    CompleteVehicleCharacteristics_trailer   OPTIONAL  
                                                //  train      TrainCharacteristics                     OPTIONAL  
                                            // Optional fields bytemap
                                            char* _tmp_650 = (char*) buffer++;
                                            *_tmp_650 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000694\033[0m| Optional field tractor = " << *_tmp_650;
                                            char* _tmp_651 = (char*) buffer++;
                                            *_tmp_651 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000695\033[0m| Optional field trailer = " << *_tmp_651;
                                            char* _tmp_652 = (char*) buffer++;
                                            *_tmp_652 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train.size() != 0 ? 1 : 0);
                                            if(debug)
                                                logger->print() << "|\033[38;5;94m000696\033[0m| Optional field train = " << *_tmp_652;
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor.size() != 0) {
                                                // Field:  type(TractorCharacteristics) name(tractor) extGroup(0)
                                                    // TractorCharacteristics  SEQUENCE
                                                        //  equalTo    TractorCharacteristics_equalTo      OPTIONAL  
                                                        //  notEqualTo TractorCharacteristics_notEqualTo   OPTIONAL  
                                                        //  ranges     TractorCharacteristics_ranges       OPTIONAL  
                                                    // Optional fields bytemap
                                                    char* _tmp_653 = (char*) buffer++;
                                                    *_tmp_653 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to.size() != 0 ? 1 : 0);
                                                    if(debug)
                                                        logger->print() << "|\033[38;5;94m000697\033[0m| Optional field equal_to = " << *_tmp_653;
                                                    char* _tmp_654 = (char*) buffer++;
                                                    *_tmp_654 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to.size() != 0 ? 1 : 0);
                                                    if(debug)
                                                        logger->print() << "|\033[38;5;94m000698\033[0m| Optional field not_equal_to = " << *_tmp_654;
                                                    char* _tmp_655 = (char*) buffer++;
                                                    *_tmp_655 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges.size() != 0 ? 1 : 0);
                                                    if(debug)
                                                        logger->print() << "|\033[38;5;94m000699\033[0m| Optional field ranges = " << *_tmp_655;
                                                    
                                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to.size() != 0) {
                                                        // Field:  type(TractorCharacteristics_equalTo) name(equal_to) extGroup(0)
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                        uint8_t* _ext_flag_444 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].
                                                        *_ext_flag_444 = 0; 
                                                        
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements.size();
                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                        uint16_t* _tmp_656 = (uint16_t*)buffer;
                                                        buffer += 2;
                                                        *_tmp_656 = __aux64__ - 1;
                                                        
                                                        int __ifu = __aux64__;
                                                        for(int u = 0; u < __ifu; u++) { 
                                                            
                                                            // Choice
                                                               // #0  simpleVehicleType   StationType
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                               // #2  iso3833VehicleType   Iso3833VehicleType
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                               // #4  engineCharacteristics   EngineCharacteristics
                                                               // #5  loadType   LoadType
                                                               // #6  usage   VehicleRole
                                                            uint8_t* _ext_flag_445 = (uint8_t*) buffer; 
                                                            buffer++;
                                                            *_ext_flag_445 = 0; 
                                                            
                                                            uint8_t* _choice_27 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                                *_choice_27 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000701\033[0m| Choice selection: 0";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000702\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_657 = (uint8_t*) buffer++;
                                                                *_tmp_657 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_27 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000703\033[0m| Choice selection: 1";
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                                uint8_t* _choice_28 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                    *_choice_28 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000704\033[0m| Choice selection: 0";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000705\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_658 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_658 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_28 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000706\033[0m| Choice selection: 1";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000707\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_659 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_659 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_28 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000708\033[0m| Choice selection: 2";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000709\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_660 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_660 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_28 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000710\033[0m| Choice selection: 3";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000711\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_661 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_661 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_28) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_27 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000712\033[0m| Choice selection: 2";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000713\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_662 = (uint8_t*) buffer++;
                                                                *_tmp_662 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_27 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000714\033[0m| Choice selection: 3";
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000715\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_663 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_663 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000716\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_664 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_664 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_27 = 4;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000717\033[0m| Choice selection: 4";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000718\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_665 = (uint8_t*) buffer++;
                                                                *_tmp_665 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_27 = 5;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000719\033[0m| Choice selection: 5";
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000720\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_456 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.
                                                                    *_ext_flag_456 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_456) {
                                                                        uint8_t* _tmp_667 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value <= INT32_MAX) {
                                                                            *_tmp_667 = 0;
                                                                        
                                                                            uint32_t* _tmp_666 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_666 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_667 = 1;
                                                                        
                                                                            uint64_t* _tmp_666 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_666 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_666 = (uint8_t*) buffer++;
                                                                        *_tmp_666 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value;
                                                                    }
                                                                    
                                                                    // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000721\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_668 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_668 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000722\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values.size());
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values.size() < 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values.size() > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_669 = (uint8_t*)buffer;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values.size();
                                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                                    *_tmp_669 = __aux64__ - 4;
                                                                    buffer += 1;
                                                                    
                                                                    int __ifv = __aux64__;
                                                                    for(int v = 0; v < __ifv; v++) {
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        *__b__ = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values[v]? 1: 0);
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_27 = 6;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000723\033[0m| Choice selection: 6";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000724\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].usage[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_670 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_670 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].usage[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].usage[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_27) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u]'; message dropped.";
                                                                return -1;
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to.size() != 0) {
                                                        // Field:  type(TractorCharacteristics_notEqualTo) name(not_equal_to) extGroup(0)
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                        uint8_t* _ext_flag_459 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].
                                                        *_ext_flag_459 = 0; 
                                                        
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements.size();
                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                        uint16_t* _tmp_671 = (uint16_t*)buffer;
                                                        buffer += 2;
                                                        *_tmp_671 = __aux64__ - 1;
                                                        
                                                        int __ifw = __aux64__;
                                                        for(int w = 0; w < __ifw; w++) { 
                                                            
                                                            // Choice
                                                               // #0  simpleVehicleType   StationType
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                               // #2  iso3833VehicleType   Iso3833VehicleType
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                               // #4  engineCharacteristics   EngineCharacteristics
                                                               // #5  loadType   LoadType
                                                               // #6  usage   VehicleRole
                                                            uint8_t* _ext_flag_460 = (uint8_t*) buffer; 
                                                            buffer++;
                                                            *_ext_flag_460 = 0; 
                                                            
                                                            uint8_t* _choice_29 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                                *_choice_29 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000726\033[0m| Choice selection: 0";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000727\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_672 = (uint8_t*) buffer++;
                                                                *_tmp_672 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_29 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000728\033[0m| Choice selection: 1";
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                                uint8_t* _choice_30 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                    *_choice_30 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000729\033[0m| Choice selection: 0";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000730\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_673 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_673 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_30 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000731\033[0m| Choice selection: 1";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000732\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_674 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_674 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_30 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000733\033[0m| Choice selection: 2";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000734\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_675 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_675 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                                {
                                                                    *_choice_30 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000735\033[0m| Choice selection: 3";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000736\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_676 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_676 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_30) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_29 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000737\033[0m| Choice selection: 2";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000738\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_677 = (uint8_t*) buffer++;
                                                                *_tmp_677 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_29 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000739\033[0m| Choice selection: 3";
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000740\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_678 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_678 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000741\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_679 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_679 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_29 = 4;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000742\033[0m| Choice selection: 4";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000743\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_680 = (uint8_t*) buffer++;
                                                                *_tmp_680 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_29 = 5;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000744\033[0m| Choice selection: 5";
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000745\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _ext_flag_471 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.
                                                                    *_ext_flag_471 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                    
                                                                    if(*_ext_flag_471) {
                                                                        uint8_t* _tmp_682 = (uint8_t*) buffer++; 
                                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value <= INT32_MAX) {
                                                                            *_tmp_682 = 0;
                                                                        
                                                                            uint32_t* _tmp_681 = (uint32_t*)buffer; buffer += 4;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT32_MIN;
                                                                            *_tmp_681 = __aux64__;
                                                                        } 
                                                                        else
                                                                        {
                                                                            *_tmp_682 = 1;
                                                                        
                                                                            uint64_t* _tmp_681 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value;
                                                                            __aux64__ -= INT64_MIN;
                                                                            *_tmp_681 = __aux64__;
                                                                        }
                                                                    } else {
                                                                        uint8_t* _tmp_681 = (uint8_t*) buffer++;
                                                                        *_tmp_681 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value;
                                                                    }
                                                                    
                                                                    // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000746\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_683 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_683 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    if(debug)
                                                                        logger->print() << "|\033[38;5;94m000747\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values.size());
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values.size() < 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values.size() > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_684 = (uint8_t*)buffer;
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values.size();
                                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                                    *_tmp_684 = __aux64__ - 4;
                                                                    buffer += 1;
                                                                    
                                                                    int __ifx = __aux64__;
                                                                    for(int x = 0; x < __ifx; x++) {
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        *__b__ = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values[x]? 1: 0);
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                            {
                                                                *_choice_29 = 6;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000748\033[0m| Choice selection: 6";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000749\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].usage[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_685 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_685 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].usage[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].usage[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_29) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w]'; message dropped.";
                                                                return -1;
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges.size() != 0) {
                                                        // Field:  type(TractorCharacteristics_ranges) name(ranges) extGroup(0)
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                        uint8_t* _ext_flag_474 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].
                                                        *_ext_flag_474 = 0; 
                                                        
                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements.size();
                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                        uint16_t* _tmp_686 = (uint16_t*)buffer;
                                                        buffer += 2;
                                                        *_tmp_686 = __aux64__ - 1;
                                                        
                                                        int __ify = __aux64__;
                                                        for(int y = 0; y < __ify; y++) { 
                                                            
                                                                // VehicleCharacteristicsRanges  SEQUENCE
                                                                    //  comparisonOperator ComparisonOperator                      
                                                                    //  limits             VehicleCharacteristicsRanges_limits     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(ComparisonOperator) name(comparison_operator) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000751\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].comparison_operator.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].comparison_operator.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_687 = (uint8_t*) buffer++;
                                                                *_tmp_687 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].comparison_operator.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].comparison_operator.value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].comparison_operator.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].comparison_operator.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(VehicleCharacteristicsRanges_limits) name(limits) extGroup(0)
                                                                // Choice
                                                                   // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles
                                                                   // #1  vehicleDimensions   VehicleDimensions
                                                                   // #2  vehicleWeightLimits   VehicleWeightLimits
                                                                   // #3  axleWeightLimits   AxleWeightLimits
                                                                   // #4  passengerCapacity   PassengerCapacity
                                                                   // #5  exhaustEmissionValues   ExhaustEmissionValues
                                                                   // #6  dieselEmissionValues   DieselEmissionValues
                                                                   // #7  soundLevel   SoundLevel
                                                                uint8_t* _ext_flag_476 = (uint8_t*) buffer; 
                                                                buffer++;
                                                                *_ext_flag_476 = 0; 
                                                                
                                                                uint8_t* _choice_31 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.number_of_axles.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    *_choice_31 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000752\033[0m| Choice selection: 0";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000753\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_688 = (uint8_t*) buffer++;
                                                                    *_tmp_688 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_31 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000754\033[0m| Choice selection: 1";
                                                                
                                                                        // VehicleDimensions  SEQUENCE
                                                                            //  vehicleLengthOverall Int1           
                                                                            //  vehicleHeigthOverall Int1           
                                                                            //  vehicleWidthOverall  Int1           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int1) name(vehicle_length_overall) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000755\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_689 = (uint8_t*) buffer++;
                                                                        *_tmp_689 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(vehicle_heigth_overall) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000756\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_690 = (uint8_t*) buffer++;
                                                                        *_tmp_690 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(vehicle_width_overall) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000757\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_691 = (uint8_t*) buffer++;
                                                                        *_tmp_691 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_31 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000758\033[0m| Choice selection: 2";
                                                                
                                                                        // VehicleWeightLimits  SEQUENCE
                                                                            //  vehicleMaxLadenWeight     Int2           
                                                                            //  vehicleTrainMaximumWeight Int2           
                                                                            //  vehicleWeightUnladen      Int2           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int2) name(vehicle_max_laden_weight) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000759\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_692 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_692 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(vehicle_train_maximum_weight) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000760\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_693 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_693 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(vehicle_weight_unladen) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000761\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_694 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_694 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_31 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000762\033[0m| Choice selection: 3";
                                                                
                                                                        // AxleWeightLimits  SEQUENCE
                                                                            //  maxLadenweightOnAxle1 Int2           
                                                                            //  maxLadenweightOnAxle2 Int2           
                                                                            //  maxLadenweightOnAxle3 Int2           
                                                                            //  maxLadenweightOnAxle4 Int2           
                                                                            //  maxLadenweightOnAxle5 Int2           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle1) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000763\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_695 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_695 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle2) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000764\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_696 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_696 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle3) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000765\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_697 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_697 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle4) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000766\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_698 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_698 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(max_ladenweight_on_axle5) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000767\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_699 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_699 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_31 = 4;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000768\033[0m| Choice selection: 4";
                                                                
                                                                        // PassengerCapacity  SEQUENCE
                                                                            //  numberOfSeats          Int1           
                                                                            //  numberOfStandingPlaces Int1           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int1) name(number_of_seats) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000769\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_700 = (uint8_t*) buffer++;
                                                                        *_tmp_700 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(number_of_standing_places) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000770\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_701 = (uint8_t*) buffer++;
                                                                        *_tmp_701 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_31 = 5;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000771\033[0m| Choice selection: 5";
                                                                
                                                                        // ExhaustEmissionValues  SEQUENCE
                                                                            //  unitType      UnitType                             
                                                                            //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                            //  emissionHC    Int2                                 
                                                                            //  emissionNOX   Int2                                 
                                                                            //  emissionHCNOX Int2                                 
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000772\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_702 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_702 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(ExhaustEmissionValues_emissionCO) name(emission_co) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000773\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_703 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_703 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(emission_hc) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000774\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_704 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_704 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(emission_nox) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000775\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_705 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_705 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int2) name(emission_hcnox) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000776\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_706 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_706 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_31 = 6;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000777\033[0m| Choice selection: 6";
                                                                
                                                                        // DieselEmissionValues  SEQUENCE
                                                                            //  particulate     DieselEmissionValues_particulate     
                                                                            //  absorptionCoeff Int2                                 
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(DieselEmissionValues_particulate) name(particulate) extGroup(0)
                                                                            // DieselEmissionValues_particulate  SEQUENCE
                                                                                //  unitType   UnitType                                   
                                                                                //  value      DieselEmissionValues_particulate_value     
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                            // Enumerated
                                                                            // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000778\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_707 = (uint8_t*)buffer;
                                                                            buffer += 1;
                                                                            *_tmp_707 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(DieselEmissionValues_particulate_value) name(value) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000779\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_708 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_708 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                                return -1;
                                                                            }
                                                                        
                                                                        // Field:  type(Int2) name(absorption_coeff) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000780\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_709 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_709 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level.size() != 0)  // CHOICE 7  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                {
                                                                    *_choice_31 = 7;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000781\033[0m| Choice selection: 7";
                                                                
                                                                        // SoundLevel  SEQUENCE
                                                                            //  soundstationary Int1           
                                                                            //  sounddriveby    Int1           
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(Int1) name(soundstationary) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000782\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_710 = (uint8_t*) buffer++;
                                                                        *_tmp_710 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(Int1) name(sounddriveby) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000783\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_711 = (uint8_t*) buffer++;
                                                                        *_tmp_711 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_31) << ") selected in CHOICE VehicleCharacteristicsRanges_limits in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits'; message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                        }
                                                    }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer.size() != 0) {
                                                // Field:  type(CompleteVehicleCharacteristics_trailer) name(trailer) extGroup(0)
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(3) span(3) ext(false)
                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements.size();
                                                if(__aux64__ > 3) __aux64__ = 3;
                                                uint16_t* _tmp_712 = (uint16_t*)buffer;
                                                buffer += 2;
                                                *_tmp_712 = __aux64__ - 1;
                                                
                                                int __ifz = __aux64__;
                                                for(int z = 0; z < __ifz; z++) { 
                                                    
                                                        // TrailerCharacteristics  SEQUENCE
                                                            //  equalTo    TrailerCharacteristics_equalTo      OPTIONAL  
                                                            //  notEqualTo TrailerCharacteristics_notEqualTo   OPTIONAL  
                                                            //  ranges     TrailerCharacteristics_ranges       OPTIONAL  
                                                        // Optional fields bytemap
                                                        char* _tmp_713 = (char*) buffer++;
                                                        *_tmp_713 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->print() << "|\033[38;5;94m000785\033[0m| Optional field equal_to = " << *_tmp_713;
                                                        char* _tmp_714 = (char*) buffer++;
                                                        *_tmp_714 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->print() << "|\033[38;5;94m000786\033[0m| Optional field not_equal_to = " << *_tmp_714;
                                                        char* _tmp_715 = (char*) buffer++;
                                                        *_tmp_715 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges.size() != 0 ? 1 : 0);
                                                        if(debug)
                                                            logger->print() << "|\033[38;5;94m000787\033[0m| Optional field ranges = " << *_tmp_715;
                                                        
                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to.size() != 0) {
                                                            // Field:  type(TrailerCharacteristics_equalTo) name(equal_to) extGroup(0)
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                            uint8_t* _ext_flag_501 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].
                                                            *_ext_flag_501 = 0; 
                                                            
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            uint16_t* _tmp_716 = (uint16_t*)buffer;
                                                            buffer += 2;
                                                            *_tmp_716 = __aux64__ - 1;
                                                            
                                                            int __ifa = __aux64__;
                                                            for(int a = 0; a < __ifa; a++) { 
                                                                
                                                                // Choice
                                                                   // #0  simpleVehicleType   StationType
                                                                   // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                                   // #2  iso3833VehicleType   Iso3833VehicleType
                                                                   // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                                   // #4  engineCharacteristics   EngineCharacteristics
                                                                   // #5  loadType   LoadType
                                                                   // #6  usage   VehicleRole
                                                                uint8_t* _ext_flag_502 = (uint8_t*) buffer; 
                                                                buffer++;
                                                                *_ext_flag_502 = 0; 
                                                                
                                                                uint8_t* _choice_32 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                                    *_choice_32 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000789\033[0m| Choice selection: 0";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000790\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_717 = (uint8_t*) buffer++;
                                                                    *_tmp_717 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_32 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000791\033[0m| Choice selection: 1";
                                                                
                                                                    // Choice
                                                                       // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                                       // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                                       // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                                       // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                                    uint8_t* _choice_33 = (uint8_t*) buffer;
                                                                    buffer++;
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                        *_choice_33 = 0;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000792\033[0m| Choice selection: 0";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000793\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_718 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_718 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                                    {
                                                                        *_choice_33 = 1;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000794\033[0m| Choice selection: 1";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000795\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_719 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_719 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                                    {
                                                                        *_choice_33 = 2;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000796\033[0m| Choice selection: 2";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000797\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_720 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_720 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                                    {
                                                                        *_choice_33 = 3;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000798\033[0m| Choice selection: 3";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000799\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_721 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_721 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else
                                                                    {
                                                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_33) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0]'; message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_32 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000800\033[0m| Choice selection: 2";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000801\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_722 = (uint8_t*) buffer++;
                                                                    *_tmp_722 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_32 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000802\033[0m| Choice selection: 3";
                                                                
                                                                        // EnvironmentalCharacteristics  SEQUENCE
                                                                            //  euroValue  EuroValue      
                                                                            //  copValue   CopValue       
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000803\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_723 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_723 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000804\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_724 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_724 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_32 = 4;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000805\033[0m| Choice selection: 4";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000806\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_725 = (uint8_t*) buffer++;
                                                                    *_tmp_725 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_32 = 5;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000807\033[0m| Choice selection: 5";
                                                                
                                                                        // LoadType  SEQUENCE
                                                                            //  goodsType            GoodsType                
                                                                            //  dangerousGoodsType   DangerousGoodsBasic      
                                                                            //  specialTransportType SpecialTransportType     
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000808\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _ext_flag_513 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.
                                                                        *_ext_flag_513 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                        
                                                                        if(*_ext_flag_513) {
                                                                            uint8_t* _tmp_727 = (uint8_t*) buffer++; 
                                                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value <= INT32_MAX) {
                                                                                *_tmp_727 = 0;
                                                                            
                                                                                uint32_t* _tmp_726 = (uint32_t*)buffer; buffer += 4;
                                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value;
                                                                                __aux64__ -= INT32_MIN;
                                                                                *_tmp_726 = __aux64__;
                                                                            } 
                                                                            else
                                                                            {
                                                                                *_tmp_727 = 1;
                                                                            
                                                                                uint64_t* _tmp_726 = (uint64_t*)buffer; buffer += 8;
                                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value;
                                                                                __aux64__ -= INT64_MIN;
                                                                                *_tmp_726 = __aux64__;
                                                                            }
                                                                        } else {
                                                                            uint8_t* _tmp_726 = (uint8_t*) buffer++;
                                                                            *_tmp_726 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value;
                                                                        }
                                                                        
                                                                        // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000809\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_728 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_728 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                        // BitString
                                                                        // BIT_STRING  min(4) max(4) span(1)
                                                                        if(debug)
                                                                            logger->print() << "|\033[38;5;94m000810\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values.size());
                                                                        
                                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values.size() < 4) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values.size() > 4) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_729 = (uint8_t*)buffer;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values.size();
                                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                                        *_tmp_729 = __aux64__ - 4;
                                                                        buffer += 1;
                                                                        
                                                                        int __ifb = __aux64__;
                                                                        for(int b = 0; b < __ifb; b++) {
                                                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                                                            *__b__ = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values[b]? 1: 0);
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_32 = 6;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000811\033[0m| Choice selection: 6";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000812\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_730 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_730 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_32) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a]'; message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to.size() != 0) {
                                                            // Field:  type(TrailerCharacteristics_notEqualTo) name(not_equal_to) extGroup(0)
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                            uint8_t* _ext_flag_516 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].
                                                            *_ext_flag_516 = 0; 
                                                            
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            uint16_t* _tmp_731 = (uint16_t*)buffer;
                                                            buffer += 2;
                                                            *_tmp_731 = __aux64__ - 1;
                                                            
                                                            int __ifc = __aux64__;
                                                            for(int c = 0; c < __ifc; c++) { 
                                                                
                                                                // Choice
                                                                   // #0  simpleVehicleType   StationType
                                                                   // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                                   // #2  iso3833VehicleType   Iso3833VehicleType
                                                                   // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                                   // #4  engineCharacteristics   EngineCharacteristics
                                                                   // #5  loadType   LoadType
                                                                   // #6  usage   VehicleRole
                                                                uint8_t* _ext_flag_517 = (uint8_t*) buffer; 
                                                                buffer++;
                                                                *_ext_flag_517 = 0; 
                                                                
                                                                uint8_t* _choice_34 = (uint8_t*) buffer;
                                                                buffer++;
                                                                
                                                                if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                                    *_choice_34 = 0;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000814\033[0m| Choice selection: 0";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000815\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_732 = (uint8_t*) buffer++;
                                                                    *_tmp_732 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_34 = 1;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000816\033[0m| Choice selection: 1";
                                                                
                                                                    // Choice
                                                                       // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                                       // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                                       // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                                       // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                                    uint8_t* _choice_35 = (uint8_t*) buffer;
                                                                    buffer++;
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                        *_choice_35 = 0;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000817\033[0m| Choice selection: 0";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000818\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_733 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_733 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                                    {
                                                                        *_choice_35 = 1;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000819\033[0m| Choice selection: 1";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000820\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_734 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_734 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                                    {
                                                                        *_choice_35 = 2;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000821\033[0m| Choice selection: 2";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000822\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_735 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_735 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                                    {
                                                                        *_choice_35 = 3;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000823\033[0m| Choice selection: 3";
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000824\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_736 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_736 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else
                                                                    {
                                                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_35) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0]'; message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_34 = 2;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000825\033[0m| Choice selection: 2";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000826\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_737 = (uint8_t*) buffer++;
                                                                    *_tmp_737 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_34 = 3;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000827\033[0m| Choice selection: 3";
                                                                
                                                                        // EnvironmentalCharacteristics  SEQUENCE
                                                                            //  euroValue  EuroValue      
                                                                            //  copValue   CopValue       
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000828\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_738 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_738 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000829\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_739 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_739 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                            return -1;
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_34 = 4;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000830\033[0m| Choice selection: 4";
                                                                
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000831\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_740 = (uint8_t*) buffer++;
                                                                    *_tmp_740 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_34 = 5;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000832\033[0m| Choice selection: 5";
                                                                
                                                                        // LoadType  SEQUENCE
                                                                            //  goodsType            GoodsType                
                                                                            //  dangerousGoodsType   DangerousGoodsBasic      
                                                                            //  specialTransportType SpecialTransportType     
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000833\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _ext_flag_528 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.
                                                                        *_ext_flag_528 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                        
                                                                        if(*_ext_flag_528) {
                                                                            uint8_t* _tmp_742 = (uint8_t*) buffer++; 
                                                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value <= INT32_MAX) {
                                                                                *_tmp_742 = 0;
                                                                            
                                                                                uint32_t* _tmp_741 = (uint32_t*)buffer; buffer += 4;
                                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value;
                                                                                __aux64__ -= INT32_MIN;
                                                                                *_tmp_741 = __aux64__;
                                                                            } 
                                                                            else
                                                                            {
                                                                                *_tmp_742 = 1;
                                                                            
                                                                                uint64_t* _tmp_741 = (uint64_t*)buffer; buffer += 8;
                                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value;
                                                                                __aux64__ -= INT64_MIN;
                                                                                *_tmp_741 = __aux64__;
                                                                            }
                                                                        } else {
                                                                            uint8_t* _tmp_741 = (uint8_t*) buffer++;
                                                                            *_tmp_741 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value;
                                                                        }
                                                                        
                                                                        // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000834\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_743 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_743 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                        // BitString
                                                                        // BIT_STRING  min(4) max(4) span(1)
                                                                        if(debug)
                                                                            logger->print() << "|\033[38;5;94m000835\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values.size());
                                                                        
                                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values.size() < 4) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values.size() > 4) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_744 = (uint8_t*)buffer;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values.size();
                                                                        if(__aux64__ > 4) __aux64__ = 4;
                                                                        *_tmp_744 = __aux64__ - 4;
                                                                        buffer += 1;
                                                                        
                                                                        int __ifd = __aux64__;
                                                                        for(int d = 0; d < __ifd; d++) {
                                                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                                                            *__b__ = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values[d]? 1: 0);
                                                                        }
                                                                
                                                                }
                                                                else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                                {
                                                                    *_choice_34 = 6;  // Setting choice selection
                                                                
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000836\033[0m| Choice selection: 6";
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000837\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_745 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_745 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                        return -1;
                                                                    }
                                                                
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_34) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c]'; message dropped.";
                                                                    return -1;
                                                                }
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges.size() != 0) {
                                                            // Field:  type(TrailerCharacteristics_ranges) name(ranges) extGroup(0)
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                            uint8_t* _ext_flag_531 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].
                                                            *_ext_flag_531 = 0; 
                                                            
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements.size();
                                                            if(__aux64__ > 4) __aux64__ = 4;
                                                            uint16_t* _tmp_746 = (uint16_t*)buffer;
                                                            buffer += 2;
                                                            *_tmp_746 = __aux64__ - 1;
                                                            
                                                            int __ife = __aux64__;
                                                            for(int e = 0; e < __ife; e++) { 
                                                                
                                                                    // VehicleCharacteristicsRanges  SEQUENCE
                                                                        //  comparisonOperator ComparisonOperator                      
                                                                        //  limits             VehicleCharacteristicsRanges_limits     
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(ComparisonOperator) name(comparison_operator) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000839\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_747 = (uint8_t*) buffer++;
                                                                    *_tmp_747 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(VehicleCharacteristicsRanges_limits) name(limits) extGroup(0)
                                                                    // Choice
                                                                       // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles
                                                                       // #1  vehicleDimensions   VehicleDimensions
                                                                       // #2  vehicleWeightLimits   VehicleWeightLimits
                                                                       // #3  axleWeightLimits   AxleWeightLimits
                                                                       // #4  passengerCapacity   PassengerCapacity
                                                                       // #5  exhaustEmissionValues   ExhaustEmissionValues
                                                                       // #6  dieselEmissionValues   DieselEmissionValues
                                                                       // #7  soundLevel   SoundLevel
                                                                    uint8_t* _ext_flag_533 = (uint8_t*) buffer; 
                                                                    buffer++;
                                                                    *_ext_flag_533 = 0; 
                                                                    
                                                                    uint8_t* _choice_36 = (uint8_t*) buffer;
                                                                    buffer++;
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                        *_choice_36 = 0;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000840\033[0m| Choice selection: 0";
                                                                    
                                                                        // Integer
                                                                        
                                                                        // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000841\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_748 = (uint8_t*) buffer++;
                                                                        *_tmp_748 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    {
                                                                        *_choice_36 = 1;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000842\033[0m| Choice selection: 1";
                                                                    
                                                                            // VehicleDimensions  SEQUENCE
                                                                                //  vehicleLengthOverall Int1           
                                                                                //  vehicleHeigthOverall Int1           
                                                                                //  vehicleWidthOverall  Int1           
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(Int1) name(vehicle_length_overall) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000843\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_749 = (uint8_t*) buffer++;
                                                                            *_tmp_749 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int1) name(vehicle_heigth_overall) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000844\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_750 = (uint8_t*) buffer++;
                                                                            *_tmp_750 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int1) name(vehicle_width_overall) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000845\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_751 = (uint8_t*) buffer++;
                                                                            *_tmp_751 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    {
                                                                        *_choice_36 = 2;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000846\033[0m| Choice selection: 2";
                                                                    
                                                                            // VehicleWeightLimits  SEQUENCE
                                                                                //  vehicleMaxLadenWeight     Int2           
                                                                                //  vehicleTrainMaximumWeight Int2           
                                                                                //  vehicleWeightUnladen      Int2           
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(Int2) name(vehicle_max_laden_weight) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000847\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_752 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_752 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(vehicle_train_maximum_weight) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000848\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_753 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_753 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(vehicle_weight_unladen) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000849\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_754 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_754 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    {
                                                                        *_choice_36 = 3;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000850\033[0m| Choice selection: 3";
                                                                    
                                                                            // AxleWeightLimits  SEQUENCE
                                                                                //  maxLadenweightOnAxle1 Int2           
                                                                                //  maxLadenweightOnAxle2 Int2           
                                                                                //  maxLadenweightOnAxle3 Int2           
                                                                                //  maxLadenweightOnAxle4 Int2           
                                                                                //  maxLadenweightOnAxle5 Int2           
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(Int2) name(max_ladenweight_on_axle1) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000851\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_755 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_755 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(max_ladenweight_on_axle2) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000852\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_756 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_756 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(max_ladenweight_on_axle3) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000853\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_757 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_757 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(max_ladenweight_on_axle4) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000854\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_758 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_758 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(max_ladenweight_on_axle5) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000855\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_759 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_759 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    {
                                                                        *_choice_36 = 4;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000856\033[0m| Choice selection: 4";
                                                                    
                                                                            // PassengerCapacity  SEQUENCE
                                                                                //  numberOfSeats          Int1           
                                                                                //  numberOfStandingPlaces Int1           
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(Int1) name(number_of_seats) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000857\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_760 = (uint8_t*) buffer++;
                                                                            *_tmp_760 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int1) name(number_of_standing_places) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000858\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_761 = (uint8_t*) buffer++;
                                                                            *_tmp_761 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    {
                                                                        *_choice_36 = 5;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000859\033[0m| Choice selection: 5";
                                                                    
                                                                            // ExhaustEmissionValues  SEQUENCE
                                                                                //  unitType      UnitType                             
                                                                                //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                                //  emissionHC    Int2                                 
                                                                                //  emissionNOX   Int2                                 
                                                                                //  emissionHCNOX Int2                                 
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                            // Enumerated
                                                                            // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000860\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_762 = (uint8_t*)buffer;
                                                                            buffer += 1;
                                                                            *_tmp_762 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value; 
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(ExhaustEmissionValues_emissionCO) name(emission_co) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000861\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_763 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_763 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(emission_hc) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000862\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_764 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_764 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(emission_nox) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000863\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_765 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_765 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int2) name(emission_hcnox) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000864\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_766 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_766 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    {
                                                                        *_choice_36 = 6;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000865\033[0m| Choice selection: 6";
                                                                    
                                                                            // DieselEmissionValues  SEQUENCE
                                                                                //  particulate     DieselEmissionValues_particulate     
                                                                                //  absorptionCoeff Int2                                 
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(DieselEmissionValues_particulate) name(particulate) extGroup(0)
                                                                                // DieselEmissionValues_particulate  SEQUENCE
                                                                                    //  unitType   UnitType                                   
                                                                                    //  value      DieselEmissionValues_particulate_value     
                                                                                // Optional fields bytemap
                                                                                
                                                                                // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                                // Enumerated
                                                                                // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                                if(debug) {
                                                                                    logger->print() << "|\033[38;5;94m000866\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                                }
                                                                                
                                                                                uint8_t* _tmp_767 = (uint8_t*)buffer;
                                                                                buffer += 1;
                                                                                *_tmp_767 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                                // MIN validator
                                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                    return -1;
                                                                                }
                                                                                // MAX validator
                                                                                if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                                    return -1;
                                                                                }
                                                                                
                                                                                // Field:  type(DieselEmissionValues_particulate_value) name(value) extGroup(0)
                                                                                // Integer
                                                                                
                                                                                // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                                if(debug) {
                                                                                    logger->print() << "|\033[38;5;94m000867\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value;
                                                                                }
                                                                                
                                                                                uint16_t* _tmp_768 = (uint16_t*) buffer; buffer += 2;
                                                                                *_tmp_768 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value; 
                                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value;
                                                                                
                                                                                // MIN validator
                                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                    return -1;
                                                                                }
                                                                                // MAX validator
                                                                                if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                                    return -1;
                                                                                }
                                                                            
                                                                            // Field:  type(Int2) name(absorption_coeff) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000868\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                            }
                                                                            
                                                                            uint16_t* _tmp_769 = (uint16_t*) buffer; buffer += 2;
                                                                            *_tmp_769 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    
                                                                    }
                                                                    else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level.size() != 0)  // CHOICE 7  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                    {
                                                                        *_choice_36 = 7;  // Setting choice selection
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000869\033[0m| Choice selection: 7";
                                                                    
                                                                            // SoundLevel  SEQUENCE
                                                                                //  soundstationary Int1           
                                                                                //  sounddriveby    Int1           
                                                                            // Optional fields bytemap
                                                                            
                                                                            // Field:  type(Int1) name(soundstationary) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000870\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_770 = (uint8_t*) buffer++;
                                                                            *_tmp_770 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            
                                                                            // Field:  type(Int1) name(sounddriveby) extGroup(0)
                                                                            // Integer
                                                                            
                                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                            if(debug) {
                                                                                logger->print() << "|\033[38;5;94m000871\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value);
                                                                            }
                                                                            
                                                                            uint8_t* _tmp_771 = (uint8_t*) buffer++;
                                                                            *_tmp_771 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value; 
                                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value;
                                                                            
                                                                            // MIN validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                                return -1;
                                                                            }
                                                                            // MAX validator
                                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                                return -1;
                                                                            }
                                                                    
                                                                    }
                                                                    else
                                                                    {
                                                                        logger->warning() << "Wrong option (" << static_cast<int>(*_choice_36) << ") selected in CHOICE VehicleCharacteristicsRanges_limits in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits'; message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                            }
                                                        }
                                                        
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train.size() != 0) {
                                                // Field:  type(TrainCharacteristics) name(train) extGroup(0)
                                                    // TrainCharacteristics  SEQUENCE
                                                        //  equalTo    TractorCharacteristics_equalTo        
                                                        //  notEqualTo TractorCharacteristics_notEqualTo     
                                                        //  ranges     TractorCharacteristics_ranges         
                                                    // Optional fields bytemap
                                                    
                                                    // Field:  type(TractorCharacteristics_equalTo) name(equal_to) extGroup(0)
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                    uint8_t* _ext_flag_558 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.
                                                    *_ext_flag_558 = 0; 
                                                    
                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements.size();
                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                    uint16_t* _tmp_772 = (uint16_t*)buffer;
                                                    buffer += 2;
                                                    *_tmp_772 = __aux64__ - 1;
                                                    
                                                    int __iff = __aux64__;
                                                    for(int f = 0; f < __iff; f++) { 
                                                        
                                                        // Choice
                                                           // #0  simpleVehicleType   StationType
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                           // #2  iso3833VehicleType   Iso3833VehicleType
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                           // #4  engineCharacteristics   EngineCharacteristics
                                                           // #5  loadType   LoadType
                                                           // #6  usage   VehicleRole
                                                        uint8_t* _ext_flag_559 = (uint8_t*) buffer; 
                                                        buffer++;
                                                        *_ext_flag_559 = 0; 
                                                        
                                                        uint8_t* _choice_37 = (uint8_t*) buffer;
                                                        buffer++;
                                                        
                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                            *_choice_37 = 0;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000873\033[0m| Choice selection: 0";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000874\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_773 = (uint8_t*) buffer++;
                                                            *_tmp_773 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].simple_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].simple_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_37 = 1;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000875\033[0m| Choice selection: 1";
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                            uint8_t* _choice_38 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                *_choice_38 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000876\033[0m| Choice selection: 0";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000877\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_774 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_774 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_38 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000878\033[0m| Choice selection: 1";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000879\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_775 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_775 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_38 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000880\033[0m| Choice selection: 2";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000881\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_776 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_776 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_38 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000882\033[0m| Choice selection: 3";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000883\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_777 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_777 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_38) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0]'; message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_37 = 2;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000884\033[0m| Choice selection: 2";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000885\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_778 = (uint8_t*) buffer++;
                                                            *_tmp_778 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_37 = 3;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000886\033[0m| Choice selection: 3";
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000887\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_779 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_779 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000888\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_780 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_780 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_37 = 4;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000889\033[0m| Choice selection: 4";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000890\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].engine_characteristics[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_781 = (uint8_t*) buffer++;
                                                            *_tmp_781 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].engine_characteristics[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].engine_characteristics[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_37 = 5;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000891\033[0m| Choice selection: 5";
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000892\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_570 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.
                                                                *_ext_flag_570 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_570) {
                                                                    uint8_t* _tmp_783 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value <= INT32_MAX) {
                                                                        *_tmp_783 = 0;
                                                                    
                                                                        uint32_t* _tmp_782 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_782 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_783 = 1;
                                                                    
                                                                        uint64_t* _tmp_782 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_782 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_782 = (uint8_t*) buffer++;
                                                                    *_tmp_782 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value;
                                                                }
                                                                
                                                                // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000893\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_784 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_784 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                if(debug)
                                                                    logger->print() << "|\033[38;5;94m000894\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].special_transport_type.values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].special_transport_type.values.size() < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].special_transport_type.values.size() > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_785 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].special_transport_type.values.size();
                                                                if(__aux64__ > 4) __aux64__ = 4;
                                                                *_tmp_785 = __aux64__ - 4;
                                                                buffer += 1;
                                                                
                                                                int __ifg = __aux64__;
                                                                for(int g = 0; g < __ifg; g++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].special_transport_type.values[g]? 1: 0);
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_37 = 6;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000895\033[0m| Choice selection: 6";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000896\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].usage[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].usage[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_786 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_786 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].usage[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].usage[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_37) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f]'; message dropped.";
                                                            return -1;
                                                        }
                                                    }
                                                    
                                                    // Field:  type(TractorCharacteristics_notEqualTo) name(not_equal_to) extGroup(0)
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                    uint8_t* _ext_flag_573 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.
                                                    *_ext_flag_573 = 0; 
                                                    
                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements.size();
                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                    uint16_t* _tmp_787 = (uint16_t*)buffer;
                                                    buffer += 2;
                                                    *_tmp_787 = __aux64__ - 1;
                                                    
                                                    int __ifh = __aux64__;
                                                    for(int h = 0; h < __ifh; h++) { 
                                                        
                                                        // Choice
                                                           // #0  simpleVehicleType   StationType
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode
                                                           // #2  iso3833VehicleType   Iso3833VehicleType
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics
                                                           // #4  engineCharacteristics   EngineCharacteristics
                                                           // #5  loadType   LoadType
                                                           // #6  usage   VehicleRole
                                                        uint8_t* _ext_flag_574 = (uint8_t*) buffer; 
                                                        buffer++;
                                                        *_ext_flag_574 = 0; 
                                                        
                                                        uint8_t* _choice_39 = (uint8_t*) buffer;
                                                        buffer++;
                                                        
                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].simple_vehicle_type.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsFixValues) 
                                                            *_choice_39 = 0;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000898\033[0m| Choice selection: 0";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000899\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_788 = (uint8_t*) buffer++;
                                                            *_tmp_788 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_39 = 1;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000900\033[0m| Choice selection: 1";
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO
                                                            uint8_t* _choice_40 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l.size() != 0) {  // CHOICE 0  fieldType(EuVehicleCategoryCode) 
                                                                *_choice_40 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000901\033[0m| Choice selection: 0";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000902\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_789 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_789 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' (" << __aux64__ << ") exceeds max allowable (6); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m.size() != 0)  // CHOICE 1  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_40 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000903\033[0m| Choice selection: 1";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000904\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_790 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_790 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n.size() != 0)  // CHOICE 2  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_40 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000905\033[0m| Choice selection: 2";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000906\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_791 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_791 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' (" << __aux64__ << ") exceeds max allowable (2); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o.size() != 0)  // CHOICE 3  fieldType(EuVehicleCategoryCode) 
                                                            {
                                                                *_choice_40 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000907\033[0m| Choice selection: 3";
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000908\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_792 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_792 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_40) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0]'; message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].iso3833_vehicle_type.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_39 = 2;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000909\033[0m| Choice selection: 2";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000910\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_793 = (uint8_t*) buffer++;
                                                            *_tmp_793 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_39 = 3;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000911\033[0m| Choice selection: 3";
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(EuroValue) name(euro_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000912\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_794 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_794 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(CopValue) name(cop_value) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000913\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_795 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_795 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value' (" << __aux64__ << ") exceeds max allowable (8); message dropped.";
                                                                    return -1;
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].engine_characteristics.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_39 = 4;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000914\033[0m| Choice selection: 4";
                                                        
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000915\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].engine_characteristics[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_796 = (uint8_t*) buffer++;
                                                            *_tmp_796 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].engine_characteristics[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].engine_characteristics[0].value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].engine_characteristics[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].engine_characteristics[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_39 = 5;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000916\033[0m| Choice selection: 5";
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                // Optional fields bytemap
                                                                
                                                                // Field:  type(GoodsType) name(goods_type) extGroup(0)
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(15) span(16) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000917\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _ext_flag_585 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.
                                                                *_ext_flag_585 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value <= 15) ? 0 : 1;
                                                                
                                                                if(*_ext_flag_585) {
                                                                    uint8_t* _tmp_798 = (uint8_t*) buffer++; 
                                                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value <= INT32_MAX) {
                                                                        *_tmp_798 = 0;
                                                                    
                                                                        uint32_t* _tmp_797 = (uint32_t*)buffer; buffer += 4;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT32_MIN;
                                                                        *_tmp_797 = __aux64__;
                                                                    } 
                                                                    else
                                                                    {
                                                                        *_tmp_798 = 1;
                                                                    
                                                                        uint64_t* _tmp_797 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value;
                                                                        __aux64__ -= INT64_MIN;
                                                                        *_tmp_797 = __aux64__;
                                                                    }
                                                                } else {
                                                                    uint8_t* _tmp_797 = (uint8_t*) buffer++;
                                                                    *_tmp_797 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value;
                                                                }
                                                                
                                                                // Field:  type(DangerousGoodsBasic) name(dangerous_goods_type) extGroup(0)
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) dataType(Int32)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000918\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                uint8_t* _tmp_799 = (uint8_t*)buffer;
                                                                buffer += 1;
                                                                *_tmp_799 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value; 
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value' (" << __aux64__ << ") exceeds max allowable (19); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                // Field:  type(SpecialTransportType) name(special_transport_type) extGroup(0)
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                if(debug)
                                                                    logger->print() << "|\033[38;5;94m000919\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values.size());
                                                                
                                                                if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values.size() < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values.size()) << " is less than allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values.size() > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.value' " << (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values.size()) << " exceeds max allowable (4); message dropped.";
                                                                    return -1;
                                                                }
                                                                
                                                                uint8_t* _tmp_800 = (uint8_t*)buffer;
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values.size();
                                                                if(__aux64__ > 4) __aux64__ = 4;
                                                                *_tmp_800 = __aux64__ - 4;
                                                                buffer += 1;
                                                                
                                                                int __ifi = __aux64__;
                                                                for(int i = 0; i < __ifi; i++) {
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    *__b__ = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values[i]? 1: 0);
                                                                }
                                                        
                                                        }
                                                        else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].usage.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsFixValues) 
                                                        {
                                                            *_choice_39 = 6;  // Setting choice selection
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000920\033[0m| Choice selection: 6";
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) dataType(Int32)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000921\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].usage[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].usage[0].value);
                                                            }
                                                            
                                                            uint8_t* _tmp_801 = (uint8_t*)buffer;
                                                            buffer += 1;
                                                            *_tmp_801 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].usage[0].value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].usage[0].value; 
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].usage[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].usage[0].value' (" << __aux64__ << ") exceeds max allowable (15); message dropped.";
                                                                return -1;
                                                            }
                                                        
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(*_choice_39) << ") selected in CHOICE VehicleCharacteristicsFixValues in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h]'; message dropped.";
                                                            return -1;
                                                        }
                                                    }
                                                    
                                                    // Field:  type(TractorCharacteristics_ranges) name(ranges) extGroup(0)
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                                    uint8_t* _ext_flag_588 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.
                                                    *_ext_flag_588 = 0; 
                                                    
                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements.size();
                                                    if(__aux64__ > 4) __aux64__ = 4;
                                                    uint16_t* _tmp_802 = (uint16_t*)buffer;
                                                    buffer += 2;
                                                    *_tmp_802 = __aux64__ - 1;
                                                    
                                                    int __ifj = __aux64__;
                                                    for(int j = 0; j < __ifj; j++) { 
                                                        
                                                            // VehicleCharacteristicsRanges  SEQUENCE
                                                                //  comparisonOperator ComparisonOperator                      
                                                                //  limits             VehicleCharacteristicsRanges_limits     
                                                            // Optional fields bytemap
                                                            
                                                            // Field:  type(ComparisonOperator) name(comparison_operator) extGroup(0)
                                                            // Integer
                                                            
                                                            // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                                            if(debug) {
                                                                logger->print() << "|\033[38;5;94m000923\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].comparison_operator.value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].comparison_operator.value);
                                                            }
                                                            
                                                            uint8_t* _tmp_803 = (uint8_t*) buffer++;
                                                            *_tmp_803 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].comparison_operator.value; 
                                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].comparison_operator.value;
                                                            
                                                            // MIN validator
                                                            if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].comparison_operator.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                return -1;
                                                            }
                                                            // MAX validator
                                                            if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].comparison_operator.value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                            // Field:  type(VehicleCharacteristicsRanges_limits) name(limits) extGroup(0)
                                                            // Choice
                                                               // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles
                                                               // #1  vehicleDimensions   VehicleDimensions
                                                               // #2  vehicleWeightLimits   VehicleWeightLimits
                                                               // #3  axleWeightLimits   AxleWeightLimits
                                                               // #4  passengerCapacity   PassengerCapacity
                                                               // #5  exhaustEmissionValues   ExhaustEmissionValues
                                                               // #6  dieselEmissionValues   DieselEmissionValues
                                                               // #7  soundLevel   SoundLevel
                                                            uint8_t* _ext_flag_590 = (uint8_t*) buffer; 
                                                            buffer++;
                                                            *_ext_flag_590 = 0; 
                                                            
                                                            uint8_t* _choice_41 = (uint8_t*) buffer;
                                                            buffer++;
                                                            
                                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.number_of_axles.size() != 0) {  // CHOICE 0  fieldType(VehicleCharacteristicsRanges_limits) 
                                                                *_choice_41 = 0;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000924\033[0m| Choice selection: 0";
                                                            
                                                                // Integer
                                                                
                                                                // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                                                if(debug) {
                                                                    logger->print() << "|\033[38;5;94m000925\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.number_of_axles[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.number_of_axles[0].value);
                                                                }
                                                                
                                                                uint8_t* _tmp_804 = (uint8_t*) buffer++;
                                                                *_tmp_804 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.number_of_axles[0].value; 
                                                                __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.number_of_axles[0].value;
                                                                
                                                                // MIN validator
                                                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.number_of_axles[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                    return -1;
                                                                }
                                                                // MAX validator
                                                                if (VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.number_of_axles[0].value' (" << __aux64__ << ") exceeds max allowable (7); message dropped.";
                                                                    return -1;
                                                                }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions.size() != 0)  // CHOICE 1  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_41 = 1;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000926\033[0m| Choice selection: 1";
                                                            
                                                                    // VehicleDimensions  SEQUENCE
                                                                        //  vehicleLengthOverall Int1           
                                                                        //  vehicleHeigthOverall Int1           
                                                                        //  vehicleWidthOverall  Int1           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int1) name(vehicle_length_overall) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000927\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_805 = (uint8_t*) buffer++;
                                                                    *_tmp_805 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(vehicle_heigth_overall) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000928\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_806 = (uint8_t*) buffer++;
                                                                    *_tmp_806 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(vehicle_width_overall) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000929\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_807 = (uint8_t*) buffer++;
                                                                    *_tmp_807 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits.size() != 0)  // CHOICE 2  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_41 = 2;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000930\033[0m| Choice selection: 2";
                                                            
                                                                    // VehicleWeightLimits  SEQUENCE
                                                                        //  vehicleMaxLadenWeight     Int2           
                                                                        //  vehicleTrainMaximumWeight Int2           
                                                                        //  vehicleWeightUnladen      Int2           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int2) name(vehicle_max_laden_weight) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000931\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_808 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_808 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(vehicle_train_maximum_weight) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000932\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_809 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_809 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(vehicle_weight_unladen) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000933\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_810 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_810 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits.size() != 0)  // CHOICE 3  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_41 = 3;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000934\033[0m| Choice selection: 3";
                                                            
                                                                    // AxleWeightLimits  SEQUENCE
                                                                        //  maxLadenweightOnAxle1 Int2           
                                                                        //  maxLadenweightOnAxle2 Int2           
                                                                        //  maxLadenweightOnAxle3 Int2           
                                                                        //  maxLadenweightOnAxle4 Int2           
                                                                        //  maxLadenweightOnAxle5 Int2           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle1) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000935\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_811 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_811 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle2) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000936\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_812 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_812 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle3) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000937\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_813 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_813 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle4) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000938\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_814 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_814 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(max_ladenweight_on_axle5) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000939\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_815 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_815 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity.size() != 0)  // CHOICE 4  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_41 = 4;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000940\033[0m| Choice selection: 4";
                                                            
                                                                    // PassengerCapacity  SEQUENCE
                                                                        //  numberOfSeats          Int1           
                                                                        //  numberOfStandingPlaces Int1           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int1) name(number_of_seats) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000941\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_816 = (uint8_t*) buffer++;
                                                                    *_tmp_816 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(number_of_standing_places) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000942\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_817 = (uint8_t*) buffer++;
                                                                    *_tmp_817 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values.size() != 0)  // CHOICE 5  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_41 = 5;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000943\033[0m| Choice selection: 5";
                                                            
                                                                    // ExhaustEmissionValues  SEQUENCE
                                                                        //  unitType      UnitType                             
                                                                        //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                        //  emissionHC    Int2                                 
                                                                        //  emissionNOX   Int2                                 
                                                                        //  emissionHCNOX Int2                                 
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                    // Enumerated
                                                                    // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000944\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_818 = (uint8_t*)buffer;
                                                                    buffer += 1;
                                                                    *_tmp_818 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value; 
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(ExhaustEmissionValues_emissionCO) name(emission_co) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000945\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_819 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_819 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(emission_hc) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000946\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_820 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_820 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(emission_nox) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000947\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_821 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_821 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int2) name(emission_hcnox) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000948\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_822 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_822 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values.size() != 0)  // CHOICE 6  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_41 = 6;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000949\033[0m| Choice selection: 6";
                                                            
                                                                    // DieselEmissionValues  SEQUENCE
                                                                        //  particulate     DieselEmissionValues_particulate     
                                                                        //  absorptionCoeff Int2                                 
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(DieselEmissionValues_particulate) name(particulate) extGroup(0)
                                                                        // DieselEmissionValues_particulate  SEQUENCE
                                                                            //  unitType   UnitType                                   
                                                                            //  value      DieselEmissionValues_particulate_value     
                                                                        // Optional fields bytemap
                                                                        
                                                                        // Field:  type(UnitType) name(unit_type) extGroup(0)
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) dataType(Int32)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000950\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                        }
                                                                        
                                                                        uint8_t* _tmp_823 = (uint8_t*)buffer;
                                                                        buffer += 1;
                                                                        *_tmp_823 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value; 
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        
                                                                        // Field:  type(DieselEmissionValues_particulate_value) name(value) extGroup(0)
                                                                        // Integer
                                                                        
                                                                        // UINT16  min(0) max(32767) span(32768) dataType(UInt16)
                                                                        if(debug) {
                                                                            logger->print() << "|\033[38;5;94m000951\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value;
                                                                        }
                                                                        
                                                                        uint16_t* _tmp_824 = (uint16_t*) buffer; buffer += 2;
                                                                        *_tmp_824 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value; 
                                                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value;
                                                                        
                                                                        // MIN validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                            return -1;
                                                                        }
                                                                        // MAX validator
                                                                        if (VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value' (" << __aux64__ << ") exceeds max allowable (32767); message dropped.";
                                                                            return -1;
                                                                        }
                                                                    
                                                                    // Field:  type(Int2) name(absorption_coeff) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT16  min(0) max(65535) span(65536) dataType(UInt16)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000952\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                    }
                                                                    
                                                                    uint16_t* _tmp_825 = (uint16_t*) buffer; buffer += 2;
                                                                    *_tmp_825 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value' (" << __aux64__ << ") exceeds max allowable (65535); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level.size() != 0)  // CHOICE 7  fieldType(VehicleCharacteristicsRanges_limits) 
                                                            {
                                                                *_choice_41 = 7;  // Setting choice selection
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000953\033[0m| Choice selection: 7";
                                                            
                                                                    // SoundLevel  SEQUENCE
                                                                        //  soundstationary Int1           
                                                                        //  sounddriveby    Int1           
                                                                    // Optional fields bytemap
                                                                    
                                                                    // Field:  type(Int1) name(soundstationary) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000954\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_826 = (uint8_t*) buffer++;
                                                                    *_tmp_826 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    
                                                                    // Field:  type(Int1) name(sounddriveby) extGroup(0)
                                                                    // Integer
                                                                    
                                                                    // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                                                    if(debug) {
                                                                        logger->print() << "|\033[38;5;94m000955\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value);
                                                                    }
                                                                    
                                                                    uint8_t* _tmp_827 = (uint8_t*) buffer++;
                                                                    *_tmp_827 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value; 
                                                                    __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value;
                                                                    
                                                                    // MIN validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") less than (0); message dropped.";
                                                                        return -1;
                                                                    }
                                                                    // MAX validator
                                                                    if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                                                        return -1;
                                                                    }
                                                            
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(*_choice_41) << ") selected in CHOICE VehicleCharacteristicsRanges_limits in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits'; message dropped.";
                                                                return -1;
                                                            }
                                                            
                                                    }
                                            }
                                    }
                                    
                                    // Field:  type(LaneStatus) name(lane_status) extGroup(0)
                                    // Integer
                                    
                                    // UINT8  min(0) max(7) span(8) dataType(UInt8)
                                    if(debug) {
                                        logger->print() << "|\033[38;5;94m000956\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value) << 
                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value);
                                    }
                                    
                                    uint8_t* _ext_flag_615 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.
                                    *_ext_flag_615 = (ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value <= 7) ? 0 : 1;
                                    
                                    if(*_ext_flag_615) {
                                        uint8_t* _tmp_829 = (uint8_t*) buffer++; 
                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value >= 0 && ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value <= INT32_MAX) {
                                            *_tmp_829 = 0;
                                        
                                            uint32_t* _tmp_828 = (uint32_t*)buffer; buffer += 4;
                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value;
                                            __aux64__ -= INT32_MIN;
                                            *_tmp_828 = __aux64__;
                                        } 
                                        else
                                        {
                                            *_tmp_829 = 1;
                                        
                                            uint64_t* _tmp_828 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value;
                                            __aux64__ -= INT64_MIN;
                                            *_tmp_828 = __aux64__;
                                        }
                                    } else {
                                        uint8_t* _tmp_828 = (uint8_t*) buffer++;
                                        *_tmp_828 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value; 
                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value;
                                    }
                                    
                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width.size() != 0) {
                                        // Field:  type(IVILaneWidth) name(lane_width) extGroup(0)
                                        // Integer
                                        
                                        // UINT16  min(0) max(1023) span(1024) dataType(UInt16)
                                        if(debug) {
                                            logger->print() << "|\033[38;5;94m000957\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width[0].value) << 
                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width[0].value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width[0].value;
                                        }
                                        
                                        uint16_t* _tmp_830 = (uint16_t*) buffer; buffer += 2;
                                        *_tmp_830 = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width[0].value; 
                                        __aux64__ = ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width[0].value;
                                        
                                        // MIN validator
                                        if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                            return -1;
                                        }
                                        // MAX validator
                                        if (VALIDATORS_ENABLED && __aux64__ > 1023) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width[0].value' (" << __aux64__ << ") exceeds max allowable (1023); message dropped.";
                                            return -1;
                                        }
                                    }
                                    
                                    if(*_ext_flag_428) {
                                    }
                            }
                            
                            if(*_ext_flag_423) {
                            }
                    }
                
                }
                else if(ros->ivi.optional[0].elements[c].tc.size() != 0)  // CHOICE 3  fieldType(IviContainer) 
                {
                    *_choice_1 = 3;  // Setting choice selection
                
                    if(debug)
                        logger->debug() << "|\033[38;5;94m000958\033[0m| Choice selection: 3";
                
                    // SequenceOf
                    // Data Type UInt8
                    // SEQUENCE_OF  min(1) max(16) span(16) ext(true)
                    uint8_t* _ext_flag_617 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].tc[0].
                    *_ext_flag_617 = 0; 
                    
                    __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements.size();
                    if(__aux64__ > 16) __aux64__ = 16;
                    uint16_t* _tmp_833 = (uint16_t*)buffer;
                    buffer += 2;
                    *_tmp_833 = __aux64__ - 1;
                    
                    int __ifk = __aux64__;
                    for(int k = 0; k < __ifk; k++) { 
                        
                            // TcPart  SEQUENCE
                                //  detectionZoneIds       TcPart_detectionZoneIds         OPTIONAL  
                                //  relevanceZoneIds       TcPart_relevanceZoneIds           
                                //  direction              Direction                       OPTIONAL  
                                //  driverAwarenessZoneIds TcPart_driverAwarenessZoneIds   OPTIONAL  
                                //  minimumAwarenessTime   TcPart_minimumAwarenessTime     OPTIONAL  
                                //  applicableLanes        TcPart_applicableLanes          OPTIONAL  
                                //  layoutId               TcPart_layoutId                 OPTIONAL  
                                //  preStoredlayoutId      TcPart_preStoredlayoutId        OPTIONAL  
                                //  text                   TcPart_text                     OPTIONAL  
                                //  data                   TcPart_data                       
                                //  ...
                            uint8_t* _ext_flag_618 = (uint8_t*) buffer++;  // Write extension flag for TcPart
                            *_ext_flag_618 = 0;  
                            
                            // Optional fields bytemap
                            char* _tmp_834 = (char*) buffer++;
                            *_tmp_834 = (ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000960\033[0m| Optional field detection_zone_ids = " << *_tmp_834;
                            char* _tmp_835 = (char*) buffer++;
                            *_tmp_835 = (ros->ivi.optional[0].elements[c].tc[0].elements[k].direction.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000961\033[0m| Optional field direction = " << *_tmp_835;
                            char* _tmp_836 = (char*) buffer++;
                            *_tmp_836 = (ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000962\033[0m| Optional field driver_awareness_zone_ids = " << *_tmp_836;
                            char* _tmp_837 = (char*) buffer++;
                            *_tmp_837 = (ros->ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000963\033[0m| Optional field minimum_awareness_time = " << *_tmp_837;
                            char* _tmp_838 = (char*) buffer++;
                            *_tmp_838 = (ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000964\033[0m| Optional field applicable_lanes = " << *_tmp_838;
                            char* _tmp_839 = (char*) buffer++;
                            *_tmp_839 = (ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000965\033[0m| Optional field layout_id = " << *_tmp_839;
                            char* _tmp_840 = (char*) buffer++;
                            *_tmp_840 = (ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000966\033[0m| Optional field pre_storedlayout_id = " << *_tmp_840;
                            char* _tmp_841 = (char*) buffer++;
                            *_tmp_841 = (ros->ivi.optional[0].elements[c].tc[0].elements[k].text.size() != 0 ? 1 : 0);
                            if(debug)
                                logger->print() << "|\033[38;5;94m000967\033[0m| Optional field text = " << *_tmp_841;
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids.size() != 0) {
                                // Field:  type(TcPart_detectionZoneIds) name(detection_zone_ids) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_619 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].
                                *_ext_flag_619 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_842 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_842 = __aux64__ - 1;
                                
                                int __ifl = __aux64__;
                                for(int l = 0; l < __ifl; l++) { 
                                    
                                    // Integer
                                    
                                    // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                    if(debug) {
                                        logger->print() << "|\033[38;5;94m000969\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value) << 
                                                     " ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value);
                                    }
                                    
                                    uint8_t* _ext_flag_620 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].
                                    *_ext_flag_620 = (ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value >= 1 && ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value <= 32) ? 0 : 1;
                                    
                                    if(*_ext_flag_620) {
                                        uint8_t* _tmp_844 = (uint8_t*) buffer++; 
                                        if(ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value >= 0 && ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value <= INT32_MAX) {
                                            *_tmp_844 = 0;
                                        
                                            uint32_t* _tmp_843 = (uint32_t*)buffer; buffer += 4;
                                            __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value;
                                            __aux64__ -= INT32_MIN;
                                            *_tmp_843 = __aux64__;
                                        } 
                                        else
                                        {
                                            *_tmp_844 = 1;
                                        
                                            uint64_t* _tmp_843 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value;
                                            __aux64__ -= INT64_MIN;
                                            *_tmp_843 = __aux64__;
                                        }
                                    } else {
                                        uint8_t* _tmp_843 = (uint8_t*) buffer++;
                                        __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value - 1;
                                        *_tmp_843 = __aux64__;
                                        __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value;
                                    }
                                }
                            }
                            
                            // Field:  type(TcPart_relevanceZoneIds) name(relevance_zone_ids) extGroup(0)
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                            uint8_t* _ext_flag_621 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.
                            *_ext_flag_621 = 0; 
                            
                            __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements.size();
                            if(__aux64__ > 8) __aux64__ = 8;
                            uint16_t* _tmp_845 = (uint16_t*)buffer;
                            buffer += 2;
                            *_tmp_845 = __aux64__ - 1;
                            
                            int __ifm = __aux64__;
                            for(int m = 0; m < __ifm; m++) { 
                                
                                // Integer
                                
                                // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000971\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value) << 
                                                 " ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value);
                                }
                                
                                uint8_t* _ext_flag_622 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].
                                *_ext_flag_622 = (ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value >= 1 && ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value <= 32) ? 0 : 1;
                                
                                if(*_ext_flag_622) {
                                    uint8_t* _tmp_847 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value >= 0 && ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value <= INT32_MAX) {
                                        *_tmp_847 = 0;
                                    
                                        uint32_t* _tmp_846 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_846 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_847 = 1;
                                    
                                        uint64_t* _tmp_846 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_846 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_846 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value - 1;
                                    *_tmp_846 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].direction.size() != 0) {
                                // Field:  type(Direction) name(direction) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(3) span(4) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000972\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].direction[0].value) << 
                                                 " ivi.optional[0].elements[c].tc[0].elements[k].direction[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].direction[0].value);
                                }
                                
                                uint8_t* _tmp_848 = (uint8_t*) buffer++;
                                *_tmp_848 = ros->ivi.optional[0].elements[c].tc[0].elements[k].direction[0].value; 
                                __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].direction[0].value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].direction[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].direction[0].value' (" << __aux64__ << ") exceeds max allowable (3); message dropped.";
                                    return -1;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids.size() != 0) {
                                // Field:  type(TcPart_driverAwarenessZoneIds) name(driver_awareness_zone_ids) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_624 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].
                                *_ext_flag_624 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_849 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_849 = __aux64__ - 1;
                                
                                int __ifn = __aux64__;
                                for(int n = 0; n < __ifn; n++) { 
                                    
                                    // Integer
                                    
                                    // UINT8  min(1) max(32) span(32) dataType(UInt8)
                                    if(debug) {
                                        logger->print() << "|\033[38;5;94m000974\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value) << 
                                                     " ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value);
                                    }
                                    
                                    uint8_t* _ext_flag_625 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].
                                    *_ext_flag_625 = (ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value >= 1 && ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value <= 32) ? 0 : 1;
                                    
                                    if(*_ext_flag_625) {
                                        uint8_t* _tmp_851 = (uint8_t*) buffer++; 
                                        if(ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value >= 0 && ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value <= INT32_MAX) {
                                            *_tmp_851 = 0;
                                        
                                            uint32_t* _tmp_850 = (uint32_t*)buffer; buffer += 4;
                                            __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value;
                                            __aux64__ -= INT32_MIN;
                                            *_tmp_850 = __aux64__;
                                        } 
                                        else
                                        {
                                            *_tmp_851 = 1;
                                        
                                            uint64_t* _tmp_850 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value;
                                            __aux64__ -= INT64_MIN;
                                            *_tmp_850 = __aux64__;
                                        }
                                    } else {
                                        uint8_t* _tmp_850 = (uint8_t*) buffer++;
                                        __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value - 1;
                                        *_tmp_850 = __aux64__;
                                        __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value;
                                    }
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time.size() != 0) {
                                // Field:  type(TcPart_minimumAwarenessTime) name(minimum_awareness_time) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(255) span(256) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000975\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time[0].value) << 
                                                 " ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time[0].value);
                                }
                                
                                uint8_t* _tmp_852 = (uint8_t*) buffer++;
                                *_tmp_852 = ros->ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time[0].value; 
                                __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time[0].value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time[0].value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 255) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time[0].value' (" << __aux64__ << ") exceeds max allowable (255); message dropped.";
                                    return -1;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes.size() != 0) {
                                // Field:  type(TcPart_applicableLanes) name(applicable_lanes) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8) ext(true)
                                uint8_t* _ext_flag_627 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].
                                *_ext_flag_627 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].elements.size();
                                if(__aux64__ > 8) __aux64__ = 8;
                                uint16_t* _tmp_853 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_853 = __aux64__ - 1;
                                
                                int __ifo = __aux64__;
                                for(int o = 0; o < __ifo; o++) { 
                                    
                                    // Integer
                                    
                                    // INT8  min(-1) max(14) span(16) dataType(Int8)
                                    if(debug) {
                                        logger->print() << "|\033[38;5;94m000977\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].elements[o].value) << 
                                                     " ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].elements[o].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].elements[o].value);
                                    }
                                    
                                    uint8_t* _tmp_854 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].elements[o].value - -1;
                                    *_tmp_854 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].elements[o].value;
                                    
                                    // MIN validator
                                    if (VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].elements[o].value' (" << __aux64__ << ") less than (-1); message dropped.";
                                        return -1;
                                    }
                                    // MAX validator
                                    if (VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].elements[o].value' (" << __aux64__ << ") exceeds max allowable (14); message dropped.";
                                        return -1;
                                    }
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id.size() != 0) {
                                // Field:  type(TcPart_layoutId) name(layout_id) extGroup(0)
                                // Integer
                                
                                // UINT8  min(1) max(4) span(4) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000978\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value) << 
                                                 " ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value);
                                }
                                
                                uint8_t* _ext_flag_629 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].
                                *_ext_flag_629 = (ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value >= 1 && ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value <= 4) ? 0 : 1;
                                
                                if(*_ext_flag_629) {
                                    uint8_t* _tmp_856 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value >= 0 && ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value <= INT32_MAX) {
                                        *_tmp_856 = 0;
                                    
                                        uint32_t* _tmp_855 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_855 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_856 = 1;
                                    
                                        uint64_t* _tmp_855 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_855 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_855 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value - 1;
                                    *_tmp_855 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id.size() != 0) {
                                // Field:  type(TcPart_preStoredlayoutId) name(pre_storedlayout_id) extGroup(0)
                                // Integer
                                
                                // UINT8  min(1) max(64) span(64) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000979\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value) << 
                                                 " ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value);
                                }
                                
                                uint8_t* _ext_flag_630 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].
                                *_ext_flag_630 = (ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value >= 1 && ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value <= 64) ? 0 : 1;
                                
                                if(*_ext_flag_630) {
                                    uint8_t* _tmp_858 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value >= 0 && ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value <= INT32_MAX) {
                                        *_tmp_858 = 0;
                                    
                                        uint32_t* _tmp_857 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_857 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_858 = 1;
                                    
                                        uint64_t* _tmp_857 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_857 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_857 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value - 1;
                                    *_tmp_857 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].text.size() != 0) {
                                // Field:  type(TcPart_text) name(text) extGroup(0)
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                                uint8_t* _ext_flag_631 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].
                                *_ext_flag_631 = 0; 
                                
                                __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements.size();
                                if(__aux64__ > 4) __aux64__ = 4;
                                uint16_t* _tmp_859 = (uint16_t*)buffer;
                                buffer += 2;
                                *_tmp_859 = __aux64__ - 1;
                                
                                int __ifp = __aux64__;
                                for(int p = 0; p < __ifp; p++) { 
                                    
                                        // Text  SEQUENCE
                                            //  layoutComponentId Text_layoutComponentId   OPTIONAL  
                                            //  language          Text_language              
                                            //  textContent       Text_textContent           
                                        // Optional fields bytemap
                                        char* _tmp_860 = (char*) buffer++;
                                        *_tmp_860 = (ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id.size() != 0 ? 1 : 0);
                                        if(debug)
                                            logger->print() << "|\033[38;5;94m000981\033[0m| Optional field layout_component_id = " << *_tmp_860;
                                        
                                        if(ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id.size() != 0) {
                                            // Field:  type(Text_layoutComponentId) name(layout_component_id) extGroup(0)
                                            // Integer
                                            
                                            // UINT8  min(1) max(4) span(4) dataType(UInt8)
                                            if(debug) {
                                                logger->print() << "|\033[38;5;94m000982\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value) << 
                                                             " ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value);
                                            }
                                            
                                            uint8_t* _ext_flag_632 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].
                                            *_ext_flag_632 = (ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value >= 1 && ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value <= 4) ? 0 : 1;
                                            
                                            if(*_ext_flag_632) {
                                                uint8_t* _tmp_862 = (uint8_t*) buffer++; 
                                                if(ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value >= 0 && ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value <= INT32_MAX) {
                                                    *_tmp_862 = 0;
                                                
                                                    uint32_t* _tmp_861 = (uint32_t*)buffer; buffer += 4;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value;
                                                    __aux64__ -= INT32_MIN;
                                                    *_tmp_861 = __aux64__;
                                                } 
                                                else
                                                {
                                                    *_tmp_862 = 1;
                                                
                                                    uint64_t* _tmp_861 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value;
                                                    __aux64__ -= INT64_MIN;
                                                    *_tmp_861 = __aux64__;
                                                }
                                            } else {
                                                uint8_t* _tmp_861 = (uint8_t*) buffer++;
                                                __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value - 1;
                                                *_tmp_861 = __aux64__;
                                                __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value;
                                            }
                                        }
                                        
                                        // Field:  type(Text_language) name(language) extGroup(0)
                                        // BitString
                                        // BIT_STRING  min(10) max(10) span(1)
                                        if(debug)
                                            logger->print() << "|\033[38;5;94m000983\033[0m| ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].language.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].language.values.size());
                                        
                                        if(ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].language.values.size() < 10) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].language.value' " << (ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].language.values.size()) << " is less than allowable (10); message dropped.";
                                            return -1;
                                        }
                                        if(ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].language.values.size() > 10) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].language.value' " << (ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].language.values.size()) << " exceeds max allowable (10); message dropped.";
                                            return -1;
                                        }
                                        
                                        uint8_t* _tmp_863 = (uint8_t*)buffer;
                                        __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].language.values.size();
                                        if(__aux64__ > 10) __aux64__ = 10;
                                        *_tmp_863 = __aux64__ - 10;
                                        buffer += 1;
                                        
                                        int __ifq = __aux64__;
                                        for(int q = 0; q < __ifq; q++) {
                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                            *__b__ = (ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].language.values[q]? 1: 0);
                                        }
                                        
                                        // Field:  type(Text_textContent) name(text_content) extGroup(0)
                                        // Text
                                        
                                        // Indefinite length
                                        // TEXT  min(0) max(16383) span(16384)
                                        uint16_t* _tmp_864 = (uint16_t*)buffer;
                                        __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].text_content.value.size();
                                        
                                        if(ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].text_content.value.size() < 0) {
                                            logger->warning() << "Error: Length of 'ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].text_content.value' " << (ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].text_content.value) << " is less than allowable (0); message dropped.";
                                            return -1;
                                        }
                                        if(ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].text_content.value.size() > 16383) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].text_content.value' " << (ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].text_content.value) << " exceeds max allowable (16383); message dropped.";
                                            return -1;
                                        }
                                        if(debug)
                                            logger->print() << "|\033[38;5;94m000984\033[0m| ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].text_content.value.size(): " << 
                                                        static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].text_content.value.size());
                                        
                                        if(__aux64__ > 16383) __aux64__ = 16383;
                                        *_tmp_864 = __aux64__;
                                        buffer += 2;
                                        
                                        int __ifr = __aux64__;
                                        for(int r = 0; r < __ifr; r++) {  // 16383
                                            char* __tmp__ = (char*)buffer++;
                                            *__tmp__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].text_content.value.c_str()[r];
                                        }
                                        
                                }
                            }
                            
                            // Field:  type(TcPart_data) name(data) extGroup(0)
                            // OctetString
                            // Indefinite length
                            // OCTET_STRING  min(0) max(16383) span(16384)
                            
                            if(debug)
                                logger->print() << "|\033[38;5;94m000985\033[0m| ivi.optional[0].elements[c].tc[0].elements[k].data.values.size(): ivi.optional[0].elements[c].tc[0].elements[k].data" << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].data.values.size());
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].data.values.size() < 0) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].data.value' (" << 
                                            ros->ivi.optional[0].elements[c].tc[0].elements[k].data.values.size() << ") is less than allowable (0); message dropped.";
                                return -1;
                            }
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].data.values.size() > 16383) {
                                logger->warning() << "Error: Value in 'ros->ivi.optional[0].elements[c].tc[0].elements[k].data.value' (" << 
                                            ros->ivi.optional[0].elements[c].tc[0].elements[k].data.values.size() << ") exceeds max allowable (16383); message dropped.";
                                return -1;
                            }
                            uint16_t* _tmp_865 = (uint16_t*)buffer;
                            buffer += 2;
                            __aux64__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].data.values.size();
                            if(__aux64__ > 16383) __aux64__ = 16383;
                            *_tmp_865 = __aux64__;
                            
                            int __ifs = __aux64__;
                            for(int s = 0; s < __ifs; s++) {
                                int8_t* __m__ = (int8_t*)buffer++;
                                *__m__ = ros->ivi.optional[0].elements[c].tc[0].elements[k].data.values[s];
                            }
                            
                            if(*_ext_flag_618) {
                            }
                    }
                
                }
                else if(ros->ivi.optional[0].elements[c].lac.size() != 0)  // CHOICE 4  fieldType(IviContainer) 
                {
                    *_choice_1 = 4;  // Setting choice selection
                
                    if(debug)
                        logger->debug() << "|\033[38;5;94m000986\033[0m| Choice selection: 4";
                
                        // LayoutContainer  SEQUENCE
                            //  layoutId         LayoutContainer_layoutId             
                            //  height           LayoutContainer_height             OPTIONAL  
                            //  width            LayoutContainer_width              OPTIONAL  
                            //  layoutComponents LayoutContainer_layoutComponents     
                            //  ...
                        uint8_t* _ext_flag_633 = (uint8_t*) buffer++;  // Write extension flag for LayoutContainer
                        *_ext_flag_633 = 0;  
                        
                        // Optional fields bytemap
                        char* _tmp_867 = (char*) buffer++;
                        *_tmp_867 = (ros->ivi.optional[0].elements[c].lac[0].height.size() != 0 ? 1 : 0);
                        if(debug)
                            logger->print() << "|\033[38;5;94m000987\033[0m| Optional field height = " << *_tmp_867;
                        char* _tmp_868 = (char*) buffer++;
                        *_tmp_868 = (ros->ivi.optional[0].elements[c].lac[0].width.size() != 0 ? 1 : 0);
                        if(debug)
                            logger->print() << "|\033[38;5;94m000988\033[0m| Optional field width = " << *_tmp_868;
                        
                        // Field:  type(LayoutContainer_layoutId) name(layout_id) extGroup(0)
                        // Integer
                        
                        // UINT8  min(1) max(4) span(4) dataType(UInt8)
                        if(debug) {
                            logger->print() << "|\033[38;5;94m000989\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].layout_id.value) << 
                                         " ivi.optional[0].elements[c].lac[0].layout_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].layout_id.value);
                        }
                        
                        uint8_t* _ext_flag_634 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].lac[0].layout_id.
                        *_ext_flag_634 = (ros->ivi.optional[0].elements[c].lac[0].layout_id.value >= 1 && ros->ivi.optional[0].elements[c].lac[0].layout_id.value <= 4) ? 0 : 1;
                        
                        if(*_ext_flag_634) {
                            uint8_t* _tmp_870 = (uint8_t*) buffer++; 
                            if(ros->ivi.optional[0].elements[c].lac[0].layout_id.value >= 0 && ros->ivi.optional[0].elements[c].lac[0].layout_id.value <= INT32_MAX) {
                                *_tmp_870 = 0;
                            
                                uint32_t* _tmp_869 = (uint32_t*)buffer; buffer += 4;
                                __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_id.value;
                                __aux64__ -= INT32_MIN;
                                *_tmp_869 = __aux64__;
                            } 
                            else
                            {
                                *_tmp_870 = 1;
                            
                                uint64_t* _tmp_869 = (uint64_t*)buffer; buffer += 8;
                                __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_id.value;
                                __aux64__ -= INT64_MIN;
                                *_tmp_869 = __aux64__;
                            }
                        } else {
                            uint8_t* _tmp_869 = (uint8_t*) buffer++;
                            __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_id.value - 1;
                            *_tmp_869 = __aux64__;
                            __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_id.value;
                        }
                        
                        if(ros->ivi.optional[0].elements[c].lac[0].height.size() != 0) {
                            // Field:  type(LayoutContainer_height) name(height) extGroup(0)
                            // Integer
                            
                            // UINT8  min(10) max(73) span(64) dataType(UInt8)
                            if(debug) {
                                logger->print() << "|\033[38;5;94m000990\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].height[0].value) << 
                                             " ivi.optional[0].elements[c].lac[0].height[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].height[0].value);
                            }
                            
                            uint8_t* _tmp_871 = (uint8_t*) buffer++;
                            __aux64__ = ros->ivi.optional[0].elements[c].lac[0].height[0].value - 10;
                            *_tmp_871 = __aux64__;
                            __aux64__ = ros->ivi.optional[0].elements[c].lac[0].height[0].value;
                            
                            // MIN validator
                            if (VALIDATORS_ENABLED && __aux64__ < 10) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].height[0].value' (" << __aux64__ << ") less than (10); message dropped.";
                                return -1;
                            }
                            // MAX validator
                            if (VALIDATORS_ENABLED && __aux64__ > 73) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].height[0].value' (" << __aux64__ << ") exceeds max allowable (73); message dropped.";
                                return -1;
                            }
                        }
                        
                        if(ros->ivi.optional[0].elements[c].lac[0].width.size() != 0) {
                            // Field:  type(LayoutContainer_width) name(width) extGroup(0)
                            // Integer
                            
                            // UINT16  min(10) max(265) span(256) dataType(UInt16)
                            if(debug) {
                                logger->print() << "|\033[38;5;94m000991\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].width[0].value) << 
                                             " ivi.optional[0].elements[c].lac[0].width[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].width[0].value);
                            }
                            
                            uint8_t* _tmp_872 = (uint8_t*) buffer++;
                            __aux64__ = ros->ivi.optional[0].elements[c].lac[0].width[0].value - 10;
                            *_tmp_872 = __aux64__;
                            __aux64__ = ros->ivi.optional[0].elements[c].lac[0].width[0].value;
                            
                            // MIN validator
                            if (VALIDATORS_ENABLED && __aux64__ < 10) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].width[0].value' (" << __aux64__ << ") less than (10); message dropped.";
                                return -1;
                            }
                            // MAX validator
                            if (VALIDATORS_ENABLED && __aux64__ > 265) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].width[0].value' (" << __aux64__ << ") exceeds max allowable (265); message dropped.";
                                return -1;
                            }
                        }
                        
                        // Field:  type(LayoutContainer_layoutComponents) name(layout_components) extGroup(0)
                        // SequenceOf
                        // Data Type UInt8
                        // SEQUENCE_OF  min(1) max(4) span(4) ext(true)
                        uint8_t* _ext_flag_637 = (uint8_t*) buffer++; // Write extension flag for ros->ivi.optional[0].elements[c].lac[0].layout_components.
                        *_ext_flag_637 = 0; 
                        
                        __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_components.elements.size();
                        if(__aux64__ > 4) __aux64__ = 4;
                        uint16_t* _tmp_873 = (uint16_t*)buffer;
                        buffer += 2;
                        *_tmp_873 = __aux64__ - 1;
                        
                        int __ift = __aux64__;
                        for(int t = 0; t < __ift; t++) { 
                            
                                // LayoutComponent  SEQUENCE
                                    //  layoutComponentId LayoutComponent_layoutComponentId     
                                    //  height            LayoutComponent_height                
                                    //  width             LayoutComponent_width                 
                                    //  x                 LayoutComponent_x                     
                                    //  y                 LayoutComponent_y                     
                                    //  textScripting     LayoutComponent_textScripting         
                                // Optional fields bytemap
                                
                                // Field:  type(LayoutComponent_layoutComponentId) name(layout_component_id) extGroup(0)
                                // Integer
                                
                                // UINT8  min(1) max(8) span(8) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000993\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value) << 
                                                 " ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value);
                                }
                                
                                uint8_t* _ext_flag_638 = (uint8_t*) buffer++; // Extension flag for ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.
                                *_ext_flag_638 = (ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value >= 1 && ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value <= 8) ? 0 : 1;
                                
                                if(*_ext_flag_638) {
                                    uint8_t* _tmp_875 = (uint8_t*) buffer++; 
                                    if(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value >= 0 && ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value <= INT32_MAX) {
                                        *_tmp_875 = 0;
                                    
                                        uint32_t* _tmp_874 = (uint32_t*)buffer; buffer += 4;
                                        __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value;
                                        __aux64__ -= INT32_MIN;
                                        *_tmp_874 = __aux64__;
                                    } 
                                    else
                                    {
                                        *_tmp_875 = 1;
                                    
                                        uint64_t* _tmp_874 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value;
                                        __aux64__ -= INT64_MIN;
                                        *_tmp_874 = __aux64__;
                                    }
                                } else {
                                    uint8_t* _tmp_874 = (uint8_t*) buffer++;
                                    __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value - 1;
                                    *_tmp_874 = __aux64__;
                                    __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value;
                                }
                                
                                // Field:  type(LayoutComponent_height) name(height) extGroup(0)
                                // Integer
                                
                                // UINT8  min(10) max(73) span(64) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000994\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].height.value) << 
                                                 " ivi.optional[0].elements[c].lac[0].layout_components.elements[t].height.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].height.value);
                                }
                                
                                uint8_t* _tmp_876 = (uint8_t*) buffer++;
                                __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].height.value - 10;
                                *_tmp_876 = __aux64__;
                                __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].height.value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].height.value' (" << __aux64__ << ") less than (10); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 73) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].height.value' (" << __aux64__ << ") exceeds max allowable (73); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(LayoutComponent_width) name(width) extGroup(0)
                                // Integer
                                
                                // UINT16  min(10) max(265) span(256) dataType(UInt16)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000995\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].width.value) << 
                                                 " ivi.optional[0].elements[c].lac[0].layout_components.elements[t].width.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].width.value);
                                }
                                
                                uint8_t* _tmp_877 = (uint8_t*) buffer++;
                                __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].width.value - 10;
                                *_tmp_877 = __aux64__;
                                __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].width.value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].width.value' (" << __aux64__ << ") less than (10); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 265) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].width.value' (" << __aux64__ << ") exceeds max allowable (265); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(LayoutComponent_x) name(x) extGroup(0)
                                // Integer
                                
                                // UINT16  min(10) max(265) span(256) dataType(UInt16)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000996\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].x.value) << 
                                                 " ivi.optional[0].elements[c].lac[0].layout_components.elements[t].x.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].x.value);
                                }
                                
                                uint8_t* _tmp_878 = (uint8_t*) buffer++;
                                __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].x.value - 10;
                                *_tmp_878 = __aux64__;
                                __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].x.value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].x.value' (" << __aux64__ << ") less than (10); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 265) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].x.value' (" << __aux64__ << ") exceeds max allowable (265); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(LayoutComponent_y) name(y) extGroup(0)
                                // Integer
                                
                                // UINT8  min(10) max(73) span(64) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000997\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].y.value) << 
                                                 " ivi.optional[0].elements[c].lac[0].layout_components.elements[t].y.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].y.value);
                                }
                                
                                uint8_t* _tmp_879 = (uint8_t*) buffer++;
                                __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].y.value - 10;
                                *_tmp_879 = __aux64__;
                                __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].y.value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].y.value' (" << __aux64__ << ") less than (10); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 73) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].y.value' (" << __aux64__ << ") exceeds max allowable (73); message dropped.";
                                    return -1;
                                }
                                
                                // Field:  type(LayoutComponent_textScripting) name(text_scripting) extGroup(0)
                                // Integer
                                
                                // UINT8  min(0) max(1) span(2) dataType(UInt8)
                                if(debug) {
                                    logger->print() << "|\033[38;5;94m000998\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].text_scripting.value) << 
                                                 " ivi.optional[0].elements[c].lac[0].layout_components.elements[t].text_scripting.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].text_scripting.value);
                                }
                                
                                uint8_t* _tmp_880 = (uint8_t*) buffer++;
                                *_tmp_880 = ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].text_scripting.value; 
                                __aux64__ = ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].text_scripting.value;
                                
                                // MIN validator
                                if (VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].text_scripting.value' (" << __aux64__ << ") less than (0); message dropped.";
                                    return -1;
                                }
                                // MAX validator
                                if (VALIDATORS_ENABLED && __aux64__ > 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].text_scripting.value' (" << __aux64__ << ") exceeds max allowable (1); message dropped.";
                                    return -1;
                                }
                                
                        }
                        
                        if(*_ext_flag_633) {
                        }
                
                }
                else
                {
                    logger->warning() << "Wrong option (" << static_cast<int>(*_choice_1) << ") selected in CHOICE IviContainer in 'ivi.optional[0].elements[c]'; message dropped.";
                    return -1;
                }
            }
        }
    
	
            return buffer - start;
        }
    } 
}