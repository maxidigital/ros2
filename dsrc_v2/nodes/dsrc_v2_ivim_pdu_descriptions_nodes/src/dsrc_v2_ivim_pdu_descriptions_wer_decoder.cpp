/*
 *
 * Copyright (C) German Aerospace Center e.V. (https://www.dlr.de)
 * Institute of Transportation Systems. (https://www.dlr.de/ts/)
 *
 * 
 * Eclipse ADORe, Automated Driving Open Research https://eclipse.org/adore
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 *
 * 
 * File automatically generated with DLR Wind v2
 * 
 * This file belongs to the DLR Wind project de.dlr.ts.v2x:dsrc_v2:4.0
 * 
 * Module: IVIM_PDU_Descriptions {itu-t(0) identified-organization(4) etsi(0) itsDomain(5) 
 *         wg1(1) en(103301) ivim(2) version2(2)}
 * 
 * For support contact v2x-ts@dlr.de
 * 
 *
 */
#include <dsrc_v2_ivim_pdu_descriptions_wer_decoder.h>


/**
 *
 */
namespace wind
{
    namespace decoder_dsrc_v2_ivim_pdu_descriptions
    {        
        
        #if WIND_ROS_VERSION == 1
          bool WerDecoder::decode(dsrc_v2_ivim_pdu_descriptions_msgs::IVIM* ros, const uint8_t *buffer)
        #else
          bool WerDecoder::decode(dsrc_v2_ivim_pdu_descriptions_msgs::msg::IVIM* ros, const uint8_t *buffer)
        #endif
        {
            const uint8_t *start = buffer;
            int64_t __aux64__;
	
    // IVIM  SEQUENCE
        //  header     ItsPduHeader     
        //  ivi        IviStructure     
    
    // Field name: hheader
        // ItsPduHeader  SEQUENCE
            //  protocolVersion ItsPduHeader_protocolVersion     
            //  messageID       ItsPduHeader_messageID           
            //  stationID       StationID                        
        
        // Field name: protocol_version
        // Integer
        // UINT8  min(0) max(255) span(256) datatype(UInt8)
        uint8_t* _tmp_1 = (uint8_t*) buffer++;
        __aux64__ = *_tmp_1;
        ros->hheader.protocol_version.value = __aux64__;
        
        if(debug) {
            logger->debug() << "|\033[38;5;94m000000\033[0m| " << tools::getTypeName(ros->hheader.protocol_version.value) << 
                         " hheader.protocol_version.value: " << static_cast<int>(ros->hheader.protocol_version.value);
        }
        
        // ******************* MIN validator *******************
        if(VALIDATORS_ENABLED && __aux64__ < 0) {
            logger->warning() << "Error: Value in 'hheader.protocol_version.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
            return false;
        }
        // ******************* MAX validator *******************
        if(VALIDATORS_ENABLED && __aux64__ > 255) {
            logger->warning() << "Error: Value in 'hheader.protocol_version.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
            return false;
        }
        
        // Field name: message_id
        // Integer
        // UINT8  min(0) max(255) span(256) datatype(UInt8)
        uint8_t* _tmp_2 = (uint8_t*) buffer++;
        __aux64__ = *_tmp_2;
        ros->hheader.message_id.value = __aux64__;
        
        if(debug) {
            logger->debug() << "|\033[38;5;94m000001\033[0m| " << tools::getTypeName(ros->hheader.message_id.value) << 
                         " hheader.message_id.value: " << static_cast<int>(ros->hheader.message_id.value);
        }
        
        // ******************* MIN validator *******************
        if(VALIDATORS_ENABLED && __aux64__ < 0) {
            logger->warning() << "Error: Value in 'hheader.message_id.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
            return false;
        }
        // ******************* MAX validator *******************
        if(VALIDATORS_ENABLED && __aux64__ > 255) {
            logger->warning() << "Error: Value in 'hheader.message_id.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
            return false;
        }
        
        // Field name: station_id
        // Integer
        // UINT32  min(0) max(4294967295) span(4294967296) datatype(UInt32)
        uint32_t* _tmp_3 = (uint32_t*) buffer; buffer += 4;
        __aux64__ = *_tmp_3;
        ros->hheader.station_id.value = __aux64__;
        
        if(debug) {
            logger->debug() << "|\033[38;5;94m000002\033[0m| " << tools::getTypeName(ros->hheader.station_id.value) << 
                         " hheader.station_id.value: " << ros->hheader.station_id.value;
        }
        
        // ******************* MIN validator *******************
        if(VALIDATORS_ENABLED && __aux64__ < 0) {
            logger->warning() << "Error: Value in 'hheader.station_id.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
            return false;
        }
        // ******************* MAX validator *******************
        if(VALIDATORS_ENABLED && __aux64__ > 4294967295) {
            logger->warning() << "Error: Value in 'hheader.station_id.value' " << (__aux64__) << " exceeds max allowable (4294967295); message dropped.";
            return false;
        }
    
    // Field name: ivi
        // IviStructure  SEQUENCE
            //  mandatory  IVIManagementContainer     
            //  optional   IviStructure_optional    OPTIONAL  
        if(*(buffer++)) { 
            dsrc_v2_ivi_msgs::msg::IviStructureOptional _tmp_4;
            ros->ivi.optional.push_back(_tmp_4);
        
            if(debug)
                logger->debug() << "|\033[38;5;94m000003\033[0m| ros->ivi.optional " << tools::green("present");
        }
        
        // Field name: mandatory
            // IVIManagementContainer  SEQUENCE
                //  serviceProviderId       Provider                                          
                //  iviIdentificationNumber IviIdentificationNumber                           
                //  timeStamp               TimestampIts                                    OPTIONAL  
                //  validFrom               TimestampIts                                    OPTIONAL  
                //  validTo                 TimestampIts                                    OPTIONAL  
                //  connectedIviStructures  IVIManagementContainer_connectedIviStructures   OPTIONAL  
                //  iviStatus               IviStatus                                         
                //  ...
            uint8_t* _ext_flag_1 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.mandatory.
            
            if(debug) {
                logger->debug() << "|\033[38;5;94m000004\033[0m| Reading ext flag from ros->ivi.mandatory.: " << int(*_ext_flag_1);
            }
            
            if(*(buffer++)) { 
                its_container_v1_its_container_msgs::msg::TimestampIts _tmp_5;
                ros->ivi.mandatory.time_stamp.push_back(_tmp_5);
            
                if(debug)
                    logger->debug() << "|\033[38;5;94m000005\033[0m| ros->ivi.mandatory.time_stamp " << tools::green("present");
            }
            if(*(buffer++)) { 
                its_container_v1_its_container_msgs::msg::TimestampIts _tmp_6;
                ros->ivi.mandatory.valid_from.push_back(_tmp_6);
            
                if(debug)
                    logger->debug() << "|\033[38;5;94m000006\033[0m| ros->ivi.mandatory.valid_from " << tools::green("present");
            }
            if(*(buffer++)) { 
                its_container_v1_its_container_msgs::msg::TimestampIts _tmp_7;
                ros->ivi.mandatory.valid_to.push_back(_tmp_7);
            
                if(debug)
                    logger->debug() << "|\033[38;5;94m000007\033[0m| ros->ivi.mandatory.valid_to " << tools::green("present");
            }
            if(*(buffer++)) { 
                dsrc_v2_ivi_msgs::msg::IVIManagementContainerConnectedIviStructures _tmp_8;
                ros->ivi.mandatory.connected_ivi_structures.push_back(_tmp_8);
            
                if(debug)
                    logger->debug() << "|\033[38;5;94m000008\033[0m| ros->ivi.mandatory.connected_ivi_structures " << tools::green("present");
            }
            
            // Field name: service_provider_id
                // Provider  SEQUENCE
                    //  countryCode        CountryCode          
                    //  providerIdentifier IssuerIdentifier     
                
                // Field name: country_code
                // BitString
                // BIT_STRING  min(10) max(10) span(1)
                uint8_t* _tmp_9 = (uint8_t*)buffer;
                __aux64__ = *_tmp_9 + 10;
                buffer += 1;
                
                if(debug)
                    logger->debug() << "|\033[38;5;94m000009\033[0m| ivi.mandatory.service_provider_id.country_code.value: " << __aux64__;
                
                int _if__tmp_9 = __aux64__;
                for(int a = 0; a < _if__tmp_9; a++) {
                    uint8_t __c__;
                    ros->ivi.mandatory.service_provider_id.country_code.values.push_back(__c__);
                    uint8_t* __b__ = (uint8_t*)buffer++;
                    ros->ivi.mandatory.service_provider_id.country_code.values[a] = (*__b__ == 1);
                }
                
                // ******************* MIN validator *******************
                if(VALIDATORS_ENABLED && __aux64__ < 10) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.country_code.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                    return false;
                }
                // ******************* MAX validator *******************
                if(VALIDATORS_ENABLED && __aux64__ > 10) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.country_code.value' " << (__aux64__) << " exceeds max allowable (10); message dropped.";
                    return false;
                }
                
                // Field name: provider_identifier
                // Integer
                // UINT16  min(0) max(16383) span(16384) datatype(UInt16)
                uint16_t* _tmp_10 = (uint16_t*) buffer; buffer += 2;
                __aux64__ = *_tmp_10;
                ros->ivi.mandatory.service_provider_id.provider_identifier.value = __aux64__;
                
                if(debug) {
                    logger->debug() << "|\033[38;5;94m000010\033[0m| " << tools::getTypeName(ros->ivi.mandatory.service_provider_id.provider_identifier.value) << 
                                 " ivi.mandatory.service_provider_id.provider_identifier.value: " << ros->ivi.mandatory.service_provider_id.provider_identifier.value;
                }
                
                // ******************* MIN validator *******************
                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.provider_identifier.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                    return false;
                }
                // ******************* MAX validator *******************
                if(VALIDATORS_ENABLED && __aux64__ > 16383) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.provider_identifier.value' " << (__aux64__) << " exceeds max allowable (16383); message dropped.";
                    return false;
                }
            
            // Field name: ivi_identification_number
            // Integer
            // UINT16  min(1) max(32767) span(32767) datatype(UInt16)
            uint8_t* _ext_flag_2 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.mandatory.ivi_identification_number.
            
            if(debug) {
                logger->debug() << "|\033[38;5;94m000011\033[0m| Reading ext flag from ros->ivi.mandatory.ivi_identification_number.: " << int(*_ext_flag_2);
            }
            
            if(*_ext_flag_2) {
                uint8_t* _tmp_12 = (uint8_t*) buffer++;
                
                if(*_tmp_12) {
                    uint64_t* _tmp_13 = (uint64_t*)buffer; buffer += 8;
                    __aux64__ = *_tmp_13;
                    __aux64__ += INT64_MIN;
                    ros->ivi.mandatory.ivi_identification_number.value = __aux64__;
                }
                else
                {
                    uint32_t* _tmp_13 = (uint32_t*) buffer; buffer += 4;
                    __aux64__ = *_tmp_13;
                    __aux64__ += INT32_MIN;
                    ros->ivi.mandatory.ivi_identification_number.value = __aux64__;
                }
            }
            else
            {
                uint16_t* _tmp_11 = (uint16_t*) buffer; buffer += 2;
                __aux64__ = *_tmp_11;
                __aux64__ += 1;
                ros->ivi.mandatory.ivi_identification_number.value = __aux64__;
            
                if(debug) {
                    logger->debug() << "|\033[38;5;94m000012\033[0m| " << tools::getTypeName(ros->ivi.mandatory.ivi_identification_number.value) << 
                                 " ivi.mandatory.ivi_identification_number.value: " << ros->ivi.mandatory.ivi_identification_number.value;
                }
                
                // ******************* MIN validator *******************
                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.ivi_identification_number.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                    return false;
                }
                // ******************* MAX validator *******************
                if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.ivi_identification_number.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                    return false;
                }
                
            }
            
            if(ros->ivi.mandatory.time_stamp.size() != 0) {
                // Field name: time_stamp
                // Integer
                // INT64  min(0) max(4398046511103) span(4398046511104) datatype(Int64)
                uint64_t* _tmp_14 = (uint64_t*)buffer; buffer += 8;
                __aux64__ = *_tmp_14;
                ros->ivi.mandatory.time_stamp[0].value = __aux64__;
                
                if(debug) {
                    logger->debug() << "|\033[38;5;94m000013\033[0m| " << tools::getTypeName(ros->ivi.mandatory.time_stamp[0].value) << 
                                 " ivi.mandatory.time_stamp[0].value: " << ros->ivi.mandatory.time_stamp[0].value;
                }
                
                // ******************* MIN validator *******************
                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.time_stamp[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                    return false;
                }
                // ******************* MAX validator *******************
                if(VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.time_stamp[0].value' " << (__aux64__) << " exceeds max allowable (4398046511103); message dropped.";
                    return false;
                }
            }
            
            if(ros->ivi.mandatory.valid_from.size() != 0) {
                // Field name: valid_from
                // Integer
                // INT64  min(0) max(4398046511103) span(4398046511104) datatype(Int64)
                uint64_t* _tmp_15 = (uint64_t*)buffer; buffer += 8;
                __aux64__ = *_tmp_15;
                ros->ivi.mandatory.valid_from[0].value = __aux64__;
                
                if(debug) {
                    logger->debug() << "|\033[38;5;94m000014\033[0m| " << tools::getTypeName(ros->ivi.mandatory.valid_from[0].value) << 
                                 " ivi.mandatory.valid_from[0].value: " << ros->ivi.mandatory.valid_from[0].value;
                }
                
                // ******************* MIN validator *******************
                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_from[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                    return false;
                }
                // ******************* MAX validator *******************
                if(VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_from[0].value' " << (__aux64__) << " exceeds max allowable (4398046511103); message dropped.";
                    return false;
                }
            }
            
            if(ros->ivi.mandatory.valid_to.size() != 0) {
                // Field name: valid_to
                // Integer
                // INT64  min(0) max(4398046511103) span(4398046511104) datatype(Int64)
                uint64_t* _tmp_16 = (uint64_t*)buffer; buffer += 8;
                __aux64__ = *_tmp_16;
                ros->ivi.mandatory.valid_to[0].value = __aux64__;
                
                if(debug) {
                    logger->debug() << "|\033[38;5;94m000015\033[0m| " << tools::getTypeName(ros->ivi.mandatory.valid_to[0].value) << 
                                 " ivi.mandatory.valid_to[0].value: " << ros->ivi.mandatory.valid_to[0].value;
                }
                
                // ******************* MIN validator *******************
                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_to[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                    return false;
                }
                // ******************* MAX validator *******************
                if(VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_to[0].value' " << (__aux64__) << " exceeds max allowable (4398046511103); message dropped.";
                    return false;
                }
            }
            
            if(ros->ivi.mandatory.connected_ivi_structures.size() != 0) {
                // Field name: connected_ivi_structures
                // SequenceOf
                // Data Type UInt8
                // SEQUENCE_OF  min(1) max(8) span(8)
                int16_t* _tmp_17 = (int16_t*)buffer;
                buffer += 2;
                __aux64__ = *_tmp_17;
                __aux64__ += 1;     // +min
                
                int _if__tmp_17 = __aux64__;
                
                if(debug) {
                    logger->debug() << "|\033[38;5;94m000016\033[0m| SequenceOf ros->ivi.mandatory.connected_ivi_structures[0]. size: " << int(*_tmp_17);
                }
                
                // ******************* MIN validator *******************
                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.connected_ivi_structures[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                    return false;
                }
                // ******************* MAX validator *******************
                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.connected_ivi_structures[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                    return false;
                }
                
                
                for(int b = 0; b < _if__tmp_17; b++) {
                    dsrc_v2_ivi_msgs::msg::IviIdentificationNumber seqof_b;  // INTEGER
                    ros->ivi.mandatory.connected_ivi_structures[0].elements.push_back(seqof_b);
                
                    // Integer
                    // UINT16  min(1) max(32767) span(32767) datatype(UInt16)
                    uint8_t* _ext_flag_3 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.mandatory.connected_ivi_structures[0].elements[b].
                    
                    if(debug) {
                        logger->debug() << "|\033[38;5;94m000017\033[0m| Reading ext flag from ros->ivi.mandatory.connected_ivi_structures[0].elements[b].: " << int(*_ext_flag_3);
                    }
                    
                    if(*_ext_flag_3) {
                        uint8_t* _tmp_19 = (uint8_t*) buffer++;
                        
                        if(*_tmp_19) {
                            uint64_t* _tmp_20 = (uint64_t*)buffer; buffer += 8;
                            __aux64__ = *_tmp_20;
                            __aux64__ += INT64_MIN;
                            ros->ivi.mandatory.connected_ivi_structures[0].elements[b].value = __aux64__;
                        }
                        else
                        {
                            uint32_t* _tmp_20 = (uint32_t*) buffer; buffer += 4;
                            __aux64__ = *_tmp_20;
                            __aux64__ += INT32_MIN;
                            ros->ivi.mandatory.connected_ivi_structures[0].elements[b].value = __aux64__;
                        }
                    }
                    else
                    {
                        uint16_t* _tmp_18 = (uint16_t*) buffer; buffer += 2;
                        __aux64__ = *_tmp_18;
                        __aux64__ += 1;
                        ros->ivi.mandatory.connected_ivi_structures[0].elements[b].value = __aux64__;
                    
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m000018\033[0m| " << tools::getTypeName(ros->ivi.mandatory.connected_ivi_structures[0].elements[b].value) << 
                                         " ivi.mandatory.connected_ivi_structures[0].elements[b].value: " << ros->ivi.mandatory.connected_ivi_structures[0].elements[b].value;
                        }
                        
                        // ******************* MIN validator *******************
                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                            logger->warning() << "Error: Value in 'ivi.mandatory.connected_ivi_structures[0].elements[b].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                            return false;
                        }
                        // ******************* MAX validator *******************
                        if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                            logger->warning() << "Error: Value in 'ivi.mandatory.connected_ivi_structures[0].elements[b].value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                            return false;
                        }
                        
                    }
                    
                    
                }
            }
            
            // Field name: ivi_status
            // Integer
            // UINT8  min(0) max(7) span(8) datatype(UInt8)
            uint8_t* _tmp_21 = (uint8_t*) buffer++;
            __aux64__ = *_tmp_21;
            ros->ivi.mandatory.ivi_status.value = __aux64__;
            
            if(debug) {
                logger->debug() << "|\033[38;5;94m000019\033[0m| " << tools::getTypeName(ros->ivi.mandatory.ivi_status.value) << 
                             " ivi.mandatory.ivi_status.value: " << static_cast<int>(ros->ivi.mandatory.ivi_status.value);
            }
            
            // ******************* MIN validator *******************
            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                logger->warning() << "Error: Value in 'ivi.mandatory.ivi_status.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                return false;
            }
            // ******************* MAX validator *******************
            if(VALIDATORS_ENABLED && __aux64__ > 7) {
                logger->warning() << "Error: Value in 'ivi.mandatory.ivi_status.value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                return false;
            }
            if(*_ext_flag_1) { // from ros->ivi.mandatory. 
                uint8_t* _tmp_22 = (uint8_t*) buffer++;  // number of extensions
                bool _array_1[*_tmp_22];
                
                if(debug)
                    logger->debug() << "|\033[38;5;94m000020\033[0m| Reading number of exts from ros->ivi.mandatory.: " << static_cast<unsigned int>(*_tmp_22);
                
                // Extensions bytemap
                for(int i = 0; i < *_tmp_22; i++)
                    _array_1[i] = (*buffer++) != 0;
                
                // Discarding unknown OpenType containers
                for(int i = 0; i < *_tmp_22; i++) {
                    uint16_t* _tmp_23 = (uint16_t*)buffer;  // OpenType length
                    buffer += 2;
                
                    if(debug) {
                    }
                
                    for(int i = 0; i < *_tmp_23; i++)
                        buffer++;
                }
                
            }
        
        if(ros->ivi.optional.size() != 0) {
            // Field name: optional
            // SequenceOf
            // Data Type UInt8
            // SEQUENCE_OF  min(1) max(8) span(8)
            uint8_t* _ext_flag_4 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].
            
            if(debug) {
                logger->debug() << "|\033[38;5;94m000021\033[0m| Reading ext flag from ros->ivi.optional[0].: " << int(*_ext_flag_4);
            }
            
            int16_t* _tmp_24 = (int16_t*)buffer;
            buffer += 2;
            __aux64__ = *_tmp_24;
            __aux64__ += 1;     // +min
            
            int _if__tmp_24 = __aux64__;
            
            if(debug) {
                logger->debug() << "|\033[38;5;94m000022\033[0m| SequenceOf ros->ivi.optional[0]. size: " << int(*_tmp_24);
            }
            
            // ******************* MIN validator *******************
            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                logger->warning() << "Error: Value in 'ivi.optional[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                return false;
            }
            // ******************* MAX validator *******************
            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                logger->warning() << "Error: Value in 'ivi.optional[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                return false;
            }
            
            
            for(int c = 0; c < _if__tmp_24; c++) {
                dsrc_v2_ivi_msgs::msg::IviContainer seqof_c;  // CHOICE
                ros->ivi.optional[0].elements.push_back(seqof_c);
            
                // Choice
                uint8_t* _ext_flag_5 = (uint8_t*)buffer++; // ext flag
                
                   // #0  glc   GeographicLocationContainer   
                   // #1  giv   GeneralIviContainer   
                   // #2  rcc   RoadConfigurationContainer   
                   // #3  tc   TextContainer   
                   // #4  lac   LayoutContainer   
                uint8_t _choice_1 = *(buffer++);
                
                if(*_ext_flag_5)
                    _choice_1 += 4 + 1; // Ext addition
                
                if(_choice_1 == 0) {
                    dsrc_v2_ivi_msgs::msg::GeographicLocationContainer _tmp_25;
                    ros->ivi.optional[0].elements[c].glc.push_back(_tmp_25);
                
                        // GeographicLocationContainer  SEQUENCE
                            //  referencePosition        ReferencePosition                     
                            //  referencePositionTime    TimestampIts                        OPTIONAL  
                            //  referencePositionHeading Heading                             OPTIONAL  
                            //  referencePositionSpeed   Speed                               OPTIONAL  
                            //  parts                    GeographicLocationContainer_parts     
                            //  ...
                        uint8_t* _ext_flag_6 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].glc[0].
                        
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m000023\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].glc[0].: " << int(*_ext_flag_6);
                        }
                        
                        if(*(buffer++)) { 
                            its_container_v1_its_container_msgs::msg::TimestampIts _tmp_26;
                            ros->ivi.optional[0].elements[c].glc[0].reference_position_time.push_back(_tmp_26);
                        
                            if(debug)
                                logger->debug() << "|\033[38;5;94m000024\033[0m| ros->ivi.optional[0].elements[c].glc[0].reference_position_time " << tools::green("present");
                        }
                        if(*(buffer++)) { 
                            its_container_v1_its_container_msgs::msg::Heading _tmp_27;
                            ros->ivi.optional[0].elements[c].glc[0].reference_position_heading.push_back(_tmp_27);
                        
                            if(debug)
                                logger->debug() << "|\033[38;5;94m000025\033[0m| ros->ivi.optional[0].elements[c].glc[0].reference_position_heading " << tools::green("present");
                        }
                        if(*(buffer++)) { 
                            its_container_v1_its_container_msgs::msg::Speed _tmp_28;
                            ros->ivi.optional[0].elements[c].glc[0].reference_position_speed.push_back(_tmp_28);
                        
                            if(debug)
                                logger->debug() << "|\033[38;5;94m000026\033[0m| ros->ivi.optional[0].elements[c].glc[0].reference_position_speed " << tools::green("present");
                        }
                        
                        // Field name: reference_position
                            // ReferencePosition  SEQUENCE
                                //  latitude                  Latitude                 
                                //  longitude                 Longitude                
                                //  positionConfidenceEllipse PosConfidenceEllipse     
                                //  altitude                  Altitude                 
                            
                            // Field name: latitude
                            // Real
                            // Double
                            // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                            uint32_t* _tmp_29 = (uint32_t*) buffer; buffer += 4;
                            ros->ivi.optional[0].elements[c].glc[0].reference_position.latitude.value = *_tmp_29;
                            ros->ivi.optional[0].elements[c].glc[0].reference_position.latitude.value += -900000000;
                            __aux64__ = ros->ivi.optional[0].elements[c].glc[0].reference_position.latitude.value;
                            ros->ivi.optional[0].elements[c].glc[0].reference_position.latitude.value /= 1.0E7;
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.latitude.value' " << (__aux64__) << " is less than allowable (-900000000); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.latitude.value' " << (__aux64__) << " exceeds max allowable (900000001); message dropped.";
                                return false;
                            }
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000027\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position.latitude.value) << " ivi.optional[0].elements[c].glc[0].reference_position.latitude: " <<
                                             ros->ivi.optional[0].elements[c].glc[0].reference_position.latitude.value << " (" << __aux64__ << ")";
                            }
                            
                            // Field name: longitude
                            // Real
                            // Double
                            // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                            uint32_t* _tmp_30 = (uint32_t*) buffer; buffer += 4;
                            ros->ivi.optional[0].elements[c].glc[0].reference_position.longitude.value = *_tmp_30;
                            ros->ivi.optional[0].elements[c].glc[0].reference_position.longitude.value += -1800000000;
                            __aux64__ = ros->ivi.optional[0].elements[c].glc[0].reference_position.longitude.value;
                            ros->ivi.optional[0].elements[c].glc[0].reference_position.longitude.value /= 1.0E7;
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.longitude.value' " << (__aux64__) << " is less than allowable (-1800000000); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.longitude.value' " << (__aux64__) << " exceeds max allowable (1800000001); message dropped.";
                                return false;
                            }
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000028\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position.longitude.value) << " ivi.optional[0].elements[c].glc[0].reference_position.longitude: " <<
                                             ros->ivi.optional[0].elements[c].glc[0].reference_position.longitude.value << " (" << __aux64__ << ")";
                            }
                            
                            // Field name: position_confidence_ellipse
                                // PosConfidenceEllipse  SEQUENCE
                                    //  semiMajorConfidence  SemiAxisLength     
                                    //  semiMinorConfidence  SemiAxisLength     
                                    //  semiMajorOrientation HeadingValue       
                                
                                // Field name: semi_major_confidence
                                // Integer
                                // UINT16  min(0) max(4095) span(4096) datatype(UInt16)
                                uint16_t* _tmp_31 = (uint16_t*) buffer; buffer += 2;
                                __aux64__ = *_tmp_31;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000029\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value) << 
                                                 " ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value: " << ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value;
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 4095) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value' " << (__aux64__) << " exceeds max allowable (4095); message dropped.";
                                    return false;
                                }
                                
                                // Field name: semi_minor_confidence
                                // Integer
                                // UINT16  min(0) max(4095) span(4096) datatype(UInt16)
                                uint16_t* _tmp_32 = (uint16_t*) buffer; buffer += 2;
                                __aux64__ = *_tmp_32;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000030\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value) << 
                                                 " ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value: " << ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value;
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 4095) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value' " << (__aux64__) << " exceeds max allowable (4095); message dropped.";
                                    return false;
                                }
                                
                                // Field name: semi_major_orientation
                                // Real
                                // Float
                                // FLOAT  min(0) max(3601) span(3602) scaleDivisor(10.0) dataType(Float)
                                uint16_t* _tmp_33 = (uint16_t*) buffer; buffer += 2;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value = *_tmp_33;
                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value /= 10.0;
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 3601) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value' " << (__aux64__) << " exceeds max allowable (3601); message dropped.";
                                    return false;
                                }
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000031\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value) << " ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation: " <<
                                                 ros->ivi.optional[0].elements[c].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value << " (" << __aux64__ << ")";
                                }
                            
                            // Field name: altitude
                                // Altitude  SEQUENCE
                                    //  altitudeValue      AltitudeValue          
                                    //  altitudeConfidence AltitudeConfidence     
                                
                                // Field name: altitude_value
                                // Real
                                // Float
                                // FLOAT  min(-100000) max(800001) span(900002) scaleDivisor(100.0) dataType(Float)
                                uint32_t* _tmp_34 = (uint32_t*) buffer; buffer += 4;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_value.value = *_tmp_34;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_value.value += -100000;
                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_value.value;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_value.value /= 100.0;
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < -100000) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_value.value' " << (__aux64__) << " is less than allowable (-100000); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 800001) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_value.value' " << (__aux64__) << " exceeds max allowable (800001); message dropped.";
                                    return false;
                                }
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000032\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_value.value) << " ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_value: " <<
                                                 ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_value.value << " (" << __aux64__ << ")";
                                }
                                
                                // Field name: altitude_confidence
                                // Enumerated
                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                uint8_t* _tmp_35 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_35;
                                __aux64__ += 0;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_confidence.value = __aux64__;
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_confidence.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_confidence.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                    return false;
                                }
                                
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000033\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_confidence.value) << 
                                                 " ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].reference_position.altitude.altitude_confidence.value);
                                }
                        
                        if(ros->ivi.optional[0].elements[c].glc[0].reference_position_time.size() != 0) {
                            // Field name: reference_position_time
                            // Integer
                            // INT64  min(0) max(4398046511103) span(4398046511104) datatype(Int64)
                            uint64_t* _tmp_36 = (uint64_t*)buffer; buffer += 8;
                            __aux64__ = *_tmp_36;
                            ros->ivi.optional[0].elements[c].glc[0].reference_position_time[0].value = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000034\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position_time[0].value) << 
                                             " ivi.optional[0].elements[c].glc[0].reference_position_time[0].value: " << ros->ivi.optional[0].elements[c].glc[0].reference_position_time[0].value;
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_time[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_time[0].value' " << (__aux64__) << " exceeds max allowable (4398046511103); message dropped.";
                                return false;
                            }
                        }
                        
                        if(ros->ivi.optional[0].elements[c].glc[0].reference_position_heading.size() != 0) {
                            // Field name: reference_position_heading
                                // Heading  SEQUENCE
                                    //  headingValue      HeadingValue          
                                    //  headingConfidence HeadingConfidence     
                                
                                // Field name: heading_value
                                // Real
                                // Float
                                // FLOAT  min(0) max(3601) span(3602) scaleDivisor(10.0) dataType(Float)
                                uint16_t* _tmp_37 = (uint16_t*) buffer; buffer += 2;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_value.value = *_tmp_37;
                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_value.value;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_value.value /= 10.0;
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 3601) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_value.value' " << (__aux64__) << " exceeds max allowable (3601); message dropped.";
                                    return false;
                                }
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000035\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_value.value) << " ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_value: " <<
                                                 ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_value.value << " (" << __aux64__ << ")";
                                }
                                
                                // Field name: heading_confidence
                                // Real
                                // Float
                                // FLOAT  min(1) max(127) span(127) scaleDivisor(10.0) dataType(Float)
                                uint8_t* _tmp_38 = (uint8_t*) buffer++;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_confidence.value = *_tmp_38;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_confidence.value += 1;
                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_confidence.value;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_confidence.value /= 10.0;
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_confidence.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 127) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_confidence.value' " << (__aux64__) << " exceeds max allowable (127); message dropped.";
                                    return false;
                                }
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000036\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_confidence.value) << " ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_confidence: " <<
                                                 ros->ivi.optional[0].elements[c].glc[0].reference_position_heading[0].heading_confidence.value << " (" << __aux64__ << ")";
                                }
                        }
                        
                        if(ros->ivi.optional[0].elements[c].glc[0].reference_position_speed.size() != 0) {
                            // Field name: reference_position_speed
                                // Speed  SEQUENCE
                                    //  speedValue      SpeedValue          
                                    //  speedConfidence SpeedConfidence     
                                
                                // Field name: speed_value
                                // Real
                                // Float
                                // FLOAT  min(0) max(16383) span(16384) scaleDivisor(100.0) dataType(Float)
                                uint16_t* _tmp_39 = (uint16_t*) buffer; buffer += 2;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_value.value = *_tmp_39;
                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_value.value;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_value.value /= 100.0;
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 16383) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_value.value' " << (__aux64__) << " exceeds max allowable (16383); message dropped.";
                                    return false;
                                }
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000037\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_value.value) << " ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_value: " <<
                                                 ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_value.value << " (" << __aux64__ << ")";
                                }
                                
                                // Field name: speed_confidence
                                // Real
                                // Float
                                // FLOAT  min(1) max(127) span(127) scaleDivisor(100.0) dataType(Float)
                                uint8_t* _tmp_40 = (uint8_t*) buffer++;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_confidence.value = *_tmp_40;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_confidence.value += 1;
                                __aux64__ = ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_confidence.value;
                                ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_confidence.value /= 100.0;
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_confidence.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 127) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_confidence.value' " << (__aux64__) << " exceeds max allowable (127); message dropped.";
                                    return false;
                                }
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000038\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_confidence.value) << " ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_confidence: " <<
                                                 ros->ivi.optional[0].elements[c].glc[0].reference_position_speed[0].speed_confidence.value << " (" << __aux64__ << ")";
                                }
                        }
                        
                        // Field name: parts
                        // SequenceOf
                        // Data Type UInt8
                        // SEQUENCE_OF  min(1) max(16) span(16)
                        uint8_t* _ext_flag_16 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.
                        
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m000039\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.: " << int(*_ext_flag_16);
                        }
                        
                        int16_t* _tmp_41 = (int16_t*)buffer;
                        buffer += 2;
                        __aux64__ = *_tmp_41;
                        __aux64__ += 1;     // +min
                        
                        int _if__tmp_41 = __aux64__;
                        
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m000040\033[0m| SequenceOf ros->ivi.optional[0].elements[c].glc[0].parts. size: " << int(*_tmp_41);
                        }
                        
                        // ******************* MIN validator *******************
                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                            return false;
                        }
                        // ******************* MAX validator *******************
                        if(VALIDATORS_ENABLED && __aux64__ > 16) {
                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.value' " << (__aux64__) << " exceeds max allowable (16); message dropped.";
                            return false;
                        }
                        
                        
                        for(int d = 0; d < _if__tmp_41; d++) {
                            dsrc_v2_ivi_msgs::msg::GlcPart seqof_d;  // SEQUENCE
                            ros->ivi.optional[0].elements[c].glc[0].parts.elements.push_back(seqof_d);
                        
                                // GlcPart  SEQUENCE
                                    //  zoneId        Zid                       
                                    //  laneNumber    LanePosition            OPTIONAL  
                                    //  zoneExtension GlcPart_zoneExtension   OPTIONAL  
                                    //  zoneHeading   HeadingValue            OPTIONAL  
                                    //  zone          Zone                    OPTIONAL  
                                    //  ...
                                uint8_t* _ext_flag_17 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000041\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].: " << int(*_ext_flag_17);
                                }
                                
                                if(*(buffer++)) { 
                                    its_container_v1_its_container_msgs::msg::LanePosition _tmp_42;
                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number.push_back(_tmp_42);
                                
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m000042\033[0m| ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number " << tools::green("present");
                                }
                                if(*(buffer++)) { 
                                    dsrc_v2_ivi_msgs::msg::GlcPartZoneExtension _tmp_43;
                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension.push_back(_tmp_43);
                                
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m000043\033[0m| ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension " << tools::green("present");
                                }
                                if(*(buffer++)) { 
                                    its_container_v1_its_container_msgs::msg::HeadingValue _tmp_44;
                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading.push_back(_tmp_44);
                                
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m000044\033[0m| ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading " << tools::green("present");
                                }
                                if(*(buffer++)) { 
                                    dsrc_v2_ivi_msgs::msg::Zone _tmp_45;
                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone.push_back(_tmp_45);
                                
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m000045\033[0m| ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone " << tools::green("present");
                                }
                                
                                // Field name: zone_id
                                // Integer
                                // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                uint8_t* _ext_flag_18 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000046\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.: " << int(*_ext_flag_18);
                                }
                                
                                if(*_ext_flag_18) {
                                    uint8_t* _tmp_47 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_47) {
                                        uint64_t* _tmp_48 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_48;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_48 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_48;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_46 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_46;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000047\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value) << 
                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_id.value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                        return false;
                                    }
                                    
                                }
                                
                                if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number.size() != 0) {
                                    // Field name: lane_number
                                    // Integer
                                    // INT8  min(-1) max(14) span(16) datatype(Int8)
                                    uint8_t* _tmp_49 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_49;
                                    __aux64__ += -1;
                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number[0].value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000048\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number[0].value) << 
                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number[0].value' " << (__aux64__) << " is less than allowable (-1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].lane_number[0].value' " << (__aux64__) << " exceeds max allowable (14); message dropped.";
                                        return false;
                                    }
                                }
                                
                                if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension.size() != 0) {
                                    // Field name: zone_extension
                                    // Integer
                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                    uint8_t* _tmp_50 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_50;
                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension[0].value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000049\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension[0].value) << 
                                                     " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_extension[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                        return false;
                                    }
                                }
                                
                                if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading.size() != 0) {
                                    // Field name: zone_heading
                                    // Real
                                    // Float
                                    // FLOAT  min(0) max(3601) span(3602) scaleDivisor(10.0) dataType(Float)
                                    uint16_t* _tmp_51 = (uint16_t*) buffer; buffer += 2;
                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading[0].value = *_tmp_51;
                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading[0].value;
                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading[0].value /= 10.0;
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 3601) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading[0].value' " << (__aux64__) << " exceeds max allowable (3601); message dropped.";
                                        return false;
                                    }
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000050\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading[0].value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading[0]: " <<
                                                     ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone_heading[0].value << " (" << __aux64__ << ")";
                                    }
                                }
                                
                                if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone.size() != 0) {
                                    // Field name: zone
                                    // Choice
                                    uint8_t* _ext_flag_20 = (uint8_t*)buffer++; // ext flag
                                    
                                       // #0  segment   Segment   
                                       // #1  area   PolygonalLine   
                                       // #2  computedSegment   ComputedSegment   
                                    uint8_t _choice_2 = *(buffer++);
                                    
                                    if(*_ext_flag_20)
                                        _choice_2 += 2 + 1; // Ext addition
                                    
                                    if(_choice_2 == 0) {
                                        dsrc_v2_ivi_msgs::msg::Segment _tmp_52;
                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment.push_back(_tmp_52);
                                    
                                            // Segment  SEQUENCE
                                                //  line       PolygonalLine     
                                                //  laneWidth  IVILaneWidth    OPTIONAL  
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::IVILaneWidth _tmp_53;
                                                ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width.push_back(_tmp_53);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000051\033[0m| ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width " << tools::green("present");
                                            }
                                            
                                            // Field name: line
                                            // Choice
                                            uint8_t* _ext_flag_21 = (uint8_t*)buffer++; // ext flag
                                            
                                               // #0  deltaPositions   PolygonalLine_deltaPositions   
                                               // #1  deltaPositionsWithAltitude   PolygonalLine_deltaPositionsWithAltitude   
                                               // #2  absolutePositions   PolygonalLine_absolutePositions   
                                               // #3  absolutePositionsWithAltitude   PolygonalLine_absolutePositionsWithAltitude   
                                            uint8_t _choice_3 = *(buffer++);
                                            
                                            if(*_ext_flag_21)
                                                _choice_3 += 3 + 1; // Ext addition
                                            
                                            if(_choice_3 == 0) {
                                                dsrc_v2_ivi_msgs::msg::PolygonalLineDeltaPositions _tmp_54;
                                                ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions.push_back(_tmp_54);
                                            
                                                uint16_t* _tmp_55 = (uint16_t*)buffer;  // OpenType length
                                                buffer += 2;
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(32) span(32)
                                                uint8_t* _ext_flag_22 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000052\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].: " << int(*_ext_flag_22);
                                                }
                                                
                                                int16_t* _tmp_56 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_56;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_56 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000053\033[0m| SequenceOf ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0]. size: " << int(*_tmp_56);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int e = 0; e < _if__tmp_56; e++) {
                                                    dsrc_v2_ivi_msgs::msg::DeltaPosition seqof_e;  // SEQUENCE
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements.push_back(seqof_e);
                                                
                                                        // DeltaPosition  SEQUENCE
                                                            //  deltaLatitude  DeltaLatitude      
                                                            //  deltaLongitude DeltaLongitude     
                                                        
                                                        // Field name: delta_latitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_57 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_latitude.value = *_tmp_57;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_latitude.value += -131071;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_latitude.value;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_latitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_latitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_latitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000054\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_latitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_latitude: " <<
                                                                         ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_latitude.value << " (" << __aux64__ << ")";
                                                        }
                                                        
                                                        // Field name: delta_longitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_58 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_longitude.value = *_tmp_58;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_longitude.value += -131071;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_longitude.value;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_longitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_longitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_longitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000055\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_longitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_longitude: " <<
                                                                         ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions[0].elements[e].delta_longitude.value << " (" << __aux64__ << ")";
                                                        }
                                                }
                                            }
                                            else if(_choice_3 == 1)  // CHOICE PolygonalLine  fieldName(delta_positions_with_altitude)
                                            {
                                                dsrc_v2_ivi_msgs::msg::PolygonalLineDeltaPositionsWithAltitude _tmp_59;
                                                ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude.push_back(_tmp_59);
                                            
                                                uint16_t* _tmp_60 = (uint16_t*)buffer;  // OpenType length
                                                buffer += 2;
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(32) span(32)
                                                uint8_t* _ext_flag_25 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000056\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].: " << int(*_ext_flag_25);
                                                }
                                                
                                                int16_t* _tmp_61 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_61;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_61 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000057\033[0m| SequenceOf ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0]. size: " << int(*_tmp_61);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int f = 0; f < _if__tmp_61; f++) {
                                                    its_container_v1_its_container_msgs::msg::DeltaReferencePosition seqof_f;  // SEQUENCE
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements.push_back(seqof_f);
                                                
                                                        // DeltaReferencePosition  SEQUENCE
                                                            //  deltaLatitude  DeltaLatitude      
                                                            //  deltaLongitude DeltaLongitude     
                                                            //  deltaAltitude  DeltaAltitude      
                                                        
                                                        // Field name: delta_latitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_62 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_latitude.value = *_tmp_62;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_latitude.value += -131071;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_latitude.value;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_latitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_latitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_latitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000058\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_latitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_latitude: " <<
                                                                         ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_latitude.value << " (" << __aux64__ << ")";
                                                        }
                                                        
                                                        // Field name: delta_longitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_63 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_longitude.value = *_tmp_63;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_longitude.value += -131071;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_longitude.value;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_longitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_longitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_longitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000059\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_longitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_longitude: " <<
                                                                         ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_longitude.value << " (" << __aux64__ << ")";
                                                        }
                                                        
                                                        // Field name: delta_altitude
                                                        // Real
                                                        // Float
                                                        // FLOAT  min(-12700) max(12800) span(25501) scaleDivisor(100.0) dataType(Float)
                                                        uint16_t* _tmp_64 = (uint16_t*) buffer; buffer += 2;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_altitude.value = *_tmp_64;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_altitude.value += -12700;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_altitude.value;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_altitude.value /= 100.0;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -12700) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_altitude.value' " << (__aux64__) << " is less than allowable (-12700); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 12800) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_altitude.value' " << (__aux64__) << " exceeds max allowable (12800); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000060\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_altitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_altitude: " <<
                                                                         ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[f].delta_altitude.value << " (" << __aux64__ << ")";
                                                        }
                                                }
                                            }
                                            else if(_choice_3 == 2)  // CHOICE PolygonalLine  fieldName(absolute_positions)
                                            {
                                                dsrc_v2_ivi_msgs::msg::PolygonalLineAbsolutePositions _tmp_65;
                                                ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions.push_back(_tmp_65);
                                            
                                                uint16_t* _tmp_66 = (uint16_t*)buffer;  // OpenType length
                                                buffer += 2;
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8)
                                                uint8_t* _ext_flag_29 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000061\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].: " << int(*_ext_flag_29);
                                                }
                                                
                                                int16_t* _tmp_67 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_67;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_67 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000062\033[0m| SequenceOf ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0]. size: " << int(*_tmp_67);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int g = 0; g < _if__tmp_67; g++) {
                                                    dsrc_v2_ivi_msgs::msg::AbsolutePosition seqof_g;  // SEQUENCE
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements.push_back(seqof_g);
                                                
                                                        // AbsolutePosition  SEQUENCE
                                                            //  latitude   Latitude       
                                                            //  longitude  Longitude      
                                                        
                                                        // Field name: latitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_68 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].latitude.value = *_tmp_68;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].latitude.value += -900000000;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].latitude.value;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].latitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].latitude.value' " << (__aux64__) << " is less than allowable (-900000000); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].latitude.value' " << (__aux64__) << " exceeds max allowable (900000001); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000063\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].latitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].latitude: " <<
                                                                         ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].latitude.value << " (" << __aux64__ << ")";
                                                        }
                                                        
                                                        // Field name: longitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_69 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].longitude.value = *_tmp_69;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].longitude.value += -1800000000;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].longitude.value;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].longitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].longitude.value' " << (__aux64__) << " is less than allowable (-1800000000); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].longitude.value' " << (__aux64__) << " exceeds max allowable (1800000001); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000064\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].longitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].longitude: " <<
                                                                         ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions[0].elements[g].longitude.value << " (" << __aux64__ << ")";
                                                        }
                                                }
                                            }
                                            else if(_choice_3 == 3)  // CHOICE PolygonalLine  fieldName(absolute_positions_with_altitude)
                                            {
                                                dsrc_v2_ivi_msgs::msg::PolygonalLineAbsolutePositionsWithAltitude _tmp_70;
                                                ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude.push_back(_tmp_70);
                                            
                                                uint16_t* _tmp_71 = (uint16_t*)buffer;  // OpenType length
                                                buffer += 2;
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8)
                                                uint8_t* _ext_flag_32 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000065\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].: " << int(*_ext_flag_32);
                                                }
                                                
                                                int16_t* _tmp_72 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_72;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_72 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000066\033[0m| SequenceOf ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0]. size: " << int(*_tmp_72);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int h = 0; h < _if__tmp_72; h++) {
                                                    dsrc_v2_ivi_msgs::msg::AbsolutePositionWAltitude seqof_h;  // SEQUENCE
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements.push_back(seqof_h);
                                                
                                                        // AbsolutePositionWAltitude  SEQUENCE
                                                            //  latitude   Latitude       
                                                            //  longitude  Longitude      
                                                            //  altitude   Altitude       
                                                        
                                                        // Field name: latitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_73 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].latitude.value = *_tmp_73;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].latitude.value += -900000000;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].latitude.value;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].latitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].latitude.value' " << (__aux64__) << " is less than allowable (-900000000); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].latitude.value' " << (__aux64__) << " exceeds max allowable (900000001); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000067\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].latitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].latitude: " <<
                                                                         ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].latitude.value << " (" << __aux64__ << ")";
                                                        }
                                                        
                                                        // Field name: longitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_74 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].longitude.value = *_tmp_74;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].longitude.value += -1800000000;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].longitude.value;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].longitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].longitude.value' " << (__aux64__) << " is less than allowable (-1800000000); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].longitude.value' " << (__aux64__) << " exceeds max allowable (1800000001); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000068\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].longitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].longitude: " <<
                                                                         ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].longitude.value << " (" << __aux64__ << ")";
                                                        }
                                                        
                                                        // Field name: altitude
                                                            // Altitude  SEQUENCE
                                                                //  altitudeValue      AltitudeValue          
                                                                //  altitudeConfidence AltitudeConfidence     
                                                            
                                                            // Field name: altitude_value
                                                            // Real
                                                            // Float
                                                            // FLOAT  min(-100000) max(800001) span(900002) scaleDivisor(100.0) dataType(Float)
                                                            uint32_t* _tmp_75 = (uint32_t*) buffer; buffer += 4;
                                                            ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value = *_tmp_75;
                                                            ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value += -100000;
                                                            __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value;
                                                            ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value /= 100.0;
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < -100000) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value' " << (__aux64__) << " is less than allowable (-100000); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 800001) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value' " << (__aux64__) << " exceeds max allowable (800001); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000069\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_value: " <<
                                                                             ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value << " (" << __aux64__ << ")";
                                                            }
                                                            
                                                            // Field name: altitude_confidence
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) datatype(Int32)
                                                            uint8_t* _tmp_76 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_76;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000070\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value) << 
                                                                             " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value);
                                                            }
                                                }
                                            }
                                            else
                                            {
                                                uint16_t* _tmp_77 = (uint16_t*)buffer;  // OpenType length
                                                buffer += 2 + int(*_tmp_77);            // Ignoring opentype data
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width.size() != 0) {
                                                // Field name: lane_width
                                                // Integer
                                                // UINT16  min(0) max(1023) span(1024) datatype(UInt16)
                                                uint16_t* _tmp_78 = (uint16_t*) buffer; buffer += 2;
                                                __aux64__ = *_tmp_78;
                                                ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width[0].value = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000071\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width[0].value) << 
                                                                 " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width[0].value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width[0].value;
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 1023) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].segment[0].lane_width[0].value' " << (__aux64__) << " exceeds max allowable (1023); message dropped.";
                                                    return false;
                                                }
                                            }
                                    }
                                    else if(_choice_2 == 1)  // CHOICE Zone  fieldName(area)
                                    {
                                        dsrc_v2_ivi_msgs::msg::PolygonalLine _tmp_79;
                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area.push_back(_tmp_79);
                                    
                                        // Choice
                                        uint8_t* _ext_flag_37 = (uint8_t*)buffer++; // ext flag
                                        
                                           // #0  deltaPositions   PolygonalLine_deltaPositions   
                                           // #1  deltaPositionsWithAltitude   PolygonalLine_deltaPositionsWithAltitude   
                                           // #2  absolutePositions   PolygonalLine_absolutePositions   
                                           // #3  absolutePositionsWithAltitude   PolygonalLine_absolutePositionsWithAltitude   
                                        uint8_t _choice_4 = *(buffer++);
                                        
                                        if(*_ext_flag_37)
                                            _choice_4 += 3 + 1; // Ext addition
                                        
                                        if(_choice_4 == 0) {
                                            dsrc_v2_ivi_msgs::msg::PolygonalLineDeltaPositions _tmp_80;
                                            ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions.push_back(_tmp_80);
                                        
                                            uint16_t* _tmp_81 = (uint16_t*)buffer;  // OpenType length
                                            buffer += 2;
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(32) span(32)
                                            uint8_t* _ext_flag_38 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000072\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].: " << int(*_ext_flag_38);
                                            }
                                            
                                            int16_t* _tmp_82 = (int16_t*)buffer;
                                            buffer += 2;
                                            __aux64__ = *_tmp_82;
                                            __aux64__ += 1;     // +min
                                            
                                            int _if__tmp_82 = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000073\033[0m| SequenceOf ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0]. size: " << int(*_tmp_82);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                                return false;
                                            }
                                            
                                            
                                            for(int i = 0; i < _if__tmp_82; i++) {
                                                dsrc_v2_ivi_msgs::msg::DeltaPosition seqof_i;  // SEQUENCE
                                                ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements.push_back(seqof_i);
                                            
                                                    // DeltaPosition  SEQUENCE
                                                        //  deltaLatitude  DeltaLatitude      
                                                        //  deltaLongitude DeltaLongitude     
                                                    
                                                    // Field name: delta_latitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_83 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_latitude.value = *_tmp_83;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_latitude.value += -131071;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_latitude.value;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_latitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_latitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_latitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000074\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_latitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_latitude: " <<
                                                                     ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_latitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: delta_longitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_84 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_longitude.value = *_tmp_84;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_longitude.value += -131071;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_longitude.value;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_longitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_longitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_longitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000075\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_longitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_longitude: " <<
                                                                     ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions[0].elements[i].delta_longitude.value << " (" << __aux64__ << ")";
                                                    }
                                            }
                                        }
                                        else if(_choice_4 == 1)  // CHOICE PolygonalLine  fieldName(delta_positions_with_altitude)
                                        {
                                            dsrc_v2_ivi_msgs::msg::PolygonalLineDeltaPositionsWithAltitude _tmp_85;
                                            ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude.push_back(_tmp_85);
                                        
                                            uint16_t* _tmp_86 = (uint16_t*)buffer;  // OpenType length
                                            buffer += 2;
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(32) span(32)
                                            uint8_t* _ext_flag_41 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000076\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].: " << int(*_ext_flag_41);
                                            }
                                            
                                            int16_t* _tmp_87 = (int16_t*)buffer;
                                            buffer += 2;
                                            __aux64__ = *_tmp_87;
                                            __aux64__ += 1;     // +min
                                            
                                            int _if__tmp_87 = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000077\033[0m| SequenceOf ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0]. size: " << int(*_tmp_87);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                                return false;
                                            }
                                            
                                            
                                            for(int j = 0; j < _if__tmp_87; j++) {
                                                its_container_v1_its_container_msgs::msg::DeltaReferencePosition seqof_j;  // SEQUENCE
                                                ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements.push_back(seqof_j);
                                            
                                                    // DeltaReferencePosition  SEQUENCE
                                                        //  deltaLatitude  DeltaLatitude      
                                                        //  deltaLongitude DeltaLongitude     
                                                        //  deltaAltitude  DeltaAltitude      
                                                    
                                                    // Field name: delta_latitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_88 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_latitude.value = *_tmp_88;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_latitude.value += -131071;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_latitude.value;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_latitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_latitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_latitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000078\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_latitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_latitude: " <<
                                                                     ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_latitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: delta_longitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_89 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_longitude.value = *_tmp_89;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_longitude.value += -131071;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_longitude.value;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_longitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_longitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_longitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000079\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_longitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_longitude: " <<
                                                                     ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_longitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: delta_altitude
                                                    // Real
                                                    // Float
                                                    // FLOAT  min(-12700) max(12800) span(25501) scaleDivisor(100.0) dataType(Float)
                                                    uint16_t* _tmp_90 = (uint16_t*) buffer; buffer += 2;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_altitude.value = *_tmp_90;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_altitude.value += -12700;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_altitude.value;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_altitude.value /= 100.0;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -12700) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_altitude.value' " << (__aux64__) << " is less than allowable (-12700); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 12800) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_altitude.value' " << (__aux64__) << " exceeds max allowable (12800); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000080\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_altitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_altitude: " <<
                                                                     ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].delta_positions_with_altitude[0].elements[j].delta_altitude.value << " (" << __aux64__ << ")";
                                                    }
                                            }
                                        }
                                        else if(_choice_4 == 2)  // CHOICE PolygonalLine  fieldName(absolute_positions)
                                        {
                                            dsrc_v2_ivi_msgs::msg::PolygonalLineAbsolutePositions _tmp_91;
                                            ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions.push_back(_tmp_91);
                                        
                                            uint16_t* _tmp_92 = (uint16_t*)buffer;  // OpenType length
                                            buffer += 2;
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(8) span(8)
                                            uint8_t* _ext_flag_45 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000081\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].: " << int(*_ext_flag_45);
                                            }
                                            
                                            int16_t* _tmp_93 = (int16_t*)buffer;
                                            buffer += 2;
                                            __aux64__ = *_tmp_93;
                                            __aux64__ += 1;     // +min
                                            
                                            int _if__tmp_93 = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000082\033[0m| SequenceOf ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0]. size: " << int(*_tmp_93);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                return false;
                                            }
                                            
                                            
                                            for(int k = 0; k < _if__tmp_93; k++) {
                                                dsrc_v2_ivi_msgs::msg::AbsolutePosition seqof_k;  // SEQUENCE
                                                ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements.push_back(seqof_k);
                                            
                                                    // AbsolutePosition  SEQUENCE
                                                        //  latitude   Latitude       
                                                        //  longitude  Longitude      
                                                    
                                                    // Field name: latitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_94 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].latitude.value = *_tmp_94;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].latitude.value += -900000000;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].latitude.value;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].latitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].latitude.value' " << (__aux64__) << " is less than allowable (-900000000); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].latitude.value' " << (__aux64__) << " exceeds max allowable (900000001); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000083\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].latitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].latitude: " <<
                                                                     ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].latitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: longitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_95 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].longitude.value = *_tmp_95;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].longitude.value += -1800000000;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].longitude.value;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].longitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].longitude.value' " << (__aux64__) << " is less than allowable (-1800000000); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].longitude.value' " << (__aux64__) << " exceeds max allowable (1800000001); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000084\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].longitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].longitude: " <<
                                                                     ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions[0].elements[k].longitude.value << " (" << __aux64__ << ")";
                                                    }
                                            }
                                        }
                                        else if(_choice_4 == 3)  // CHOICE PolygonalLine  fieldName(absolute_positions_with_altitude)
                                        {
                                            dsrc_v2_ivi_msgs::msg::PolygonalLineAbsolutePositionsWithAltitude _tmp_96;
                                            ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude.push_back(_tmp_96);
                                        
                                            uint16_t* _tmp_97 = (uint16_t*)buffer;  // OpenType length
                                            buffer += 2;
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(8) span(8)
                                            uint8_t* _ext_flag_48 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000085\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].: " << int(*_ext_flag_48);
                                            }
                                            
                                            int16_t* _tmp_98 = (int16_t*)buffer;
                                            buffer += 2;
                                            __aux64__ = *_tmp_98;
                                            __aux64__ += 1;     // +min
                                            
                                            int _if__tmp_98 = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000086\033[0m| SequenceOf ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0]. size: " << int(*_tmp_98);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                return false;
                                            }
                                            
                                            
                                            for(int l = 0; l < _if__tmp_98; l++) {
                                                dsrc_v2_ivi_msgs::msg::AbsolutePositionWAltitude seqof_l;  // SEQUENCE
                                                ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements.push_back(seqof_l);
                                            
                                                    // AbsolutePositionWAltitude  SEQUENCE
                                                        //  latitude   Latitude       
                                                        //  longitude  Longitude      
                                                        //  altitude   Altitude       
                                                    
                                                    // Field name: latitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_99 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].latitude.value = *_tmp_99;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].latitude.value += -900000000;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].latitude.value;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].latitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].latitude.value' " << (__aux64__) << " is less than allowable (-900000000); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].latitude.value' " << (__aux64__) << " exceeds max allowable (900000001); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000087\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].latitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].latitude: " <<
                                                                     ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].latitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: longitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_100 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].longitude.value = *_tmp_100;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].longitude.value += -1800000000;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].longitude.value;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].longitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].longitude.value' " << (__aux64__) << " is less than allowable (-1800000000); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].longitude.value' " << (__aux64__) << " exceeds max allowable (1800000001); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000088\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].longitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].longitude: " <<
                                                                     ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].longitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: altitude
                                                        // Altitude  SEQUENCE
                                                            //  altitudeValue      AltitudeValue          
                                                            //  altitudeConfidence AltitudeConfidence     
                                                        
                                                        // Field name: altitude_value
                                                        // Real
                                                        // Float
                                                        // FLOAT  min(-100000) max(800001) span(900002) scaleDivisor(100.0) dataType(Float)
                                                        uint32_t* _tmp_101 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_value.value = *_tmp_101;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_value.value += -100000;
                                                        __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_value.value;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_value.value /= 100.0;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -100000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_value.value' " << (__aux64__) << " is less than allowable (-100000); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 800001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_value.value' " << (__aux64__) << " exceeds max allowable (800001); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000089\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_value.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_value: " <<
                                                                         ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_value.value << " (" << __aux64__ << ")";
                                                        }
                                                        
                                                        // Field name: altitude_confidence
                                                        // Enumerated
                                                        // INT32  min(0) max(15) span(16) datatype(Int32)
                                                        uint8_t* _tmp_102 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_102;
                                                        __aux64__ += 0;
                                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_confidence.value = __aux64__;
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_confidence.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_confidence.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000090\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_confidence.value) << 
                                                                         " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].area[0].absolute_positions_with_altitude[0].elements[l].altitude.altitude_confidence.value);
                                                        }
                                            }
                                        }
                                        else
                                        {
                                            uint16_t* _tmp_103 = (uint16_t*)buffer;  // OpenType length
                                            buffer += 2 + int(*_tmp_103);            // Ignoring opentype data
                                        }
                                    }
                                    else if(_choice_2 == 2)  // CHOICE Zone  fieldName(computed_segment)
                                    {
                                        dsrc_v2_ivi_msgs::msg::ComputedSegment _tmp_104;
                                        ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment.push_back(_tmp_104);
                                    
                                            // ComputedSegment  SEQUENCE
                                                //  zoneId         Zid                                
                                                //  laneNumber     LanePosition                       
                                                //  laneWidth      IVILaneWidth                       
                                                //  offsetDistance ComputedSegment_offsetDistance   OPTIONAL  
                                                //  offsetPosition DeltaReferencePosition           OPTIONAL  
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::ComputedSegmentOffsetDistance _tmp_105;
                                                ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance.push_back(_tmp_105);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000091\033[0m| ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                its_container_v1_its_container_msgs::msg::DeltaReferencePosition _tmp_106;
                                                ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position.push_back(_tmp_106);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000092\033[0m| ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position " << tools::green("present");
                                            }
                                            
                                            // Field name: zone_id
                                            // Integer
                                            // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                            uint8_t* _ext_flag_53 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000093\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.: " << int(*_ext_flag_53);
                                            }
                                            
                                            if(*_ext_flag_53) {
                                                uint8_t* _tmp_108 = (uint8_t*) buffer++;
                                                
                                                if(*_tmp_108) {
                                                    uint64_t* _tmp_109 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = *_tmp_109;
                                                    __aux64__ += INT64_MIN;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value = __aux64__;
                                                }
                                                else
                                                {
                                                    uint32_t* _tmp_109 = (uint32_t*) buffer; buffer += 4;
                                                    __aux64__ = *_tmp_109;
                                                    __aux64__ += INT32_MIN;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value = __aux64__;
                                                }
                                            }
                                            else
                                            {
                                                uint8_t* _tmp_107 = (uint8_t*) buffer++;
                                                __aux64__ = *_tmp_107;
                                                __aux64__ += 1;
                                                ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value = __aux64__;
                                            
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000094\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value) << 
                                                                 " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].zone_id.value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                                    return false;
                                                }
                                                
                                            }
                                            
                                            // Field name: lane_number
                                            // Integer
                                            // INT8  min(-1) max(14) span(16) datatype(Int8)
                                            uint8_t* _tmp_110 = (uint8_t*) buffer++;
                                            __aux64__ = *_tmp_110;
                                            __aux64__ += -1;
                                            ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_number.value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000095\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_number.value) << 
                                                             " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_number.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_number.value);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < -1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_number.value' " << (__aux64__) << " is less than allowable (-1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 14) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_number.value' " << (__aux64__) << " exceeds max allowable (14); message dropped.";
                                                return false;
                                            }
                                            
                                            // Field name: lane_width
                                            // Integer
                                            // UINT16  min(0) max(1023) span(1024) datatype(UInt16)
                                            uint16_t* _tmp_111 = (uint16_t*) buffer; buffer += 2;
                                            __aux64__ = *_tmp_111;
                                            ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_width.value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000096\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_width.value) << 
                                                             " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_width.value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_width.value;
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_width.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 1023) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].lane_width.value' " << (__aux64__) << " exceeds max allowable (1023); message dropped.";
                                                return false;
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance.size() != 0) {
                                                // Field name: offset_distance
                                                // Integer
                                                // INT16  min(-32768) max(32767) span(65536) datatype(Int16)
                                                uint16_t* _tmp_112 = (uint16_t*) buffer; buffer += 2;
                                                __aux64__ = *_tmp_112;
                                                __aux64__ += -32768;
                                                ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance[0].value = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000097\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance[0].value) << 
                                                                 " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance[0].value: " << ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance[0].value;
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < -32768) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance[0].value' " << (__aux64__) << " is less than allowable (-32768); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_distance[0].value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                    return false;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position.size() != 0) {
                                                // Field name: offset_position
                                                    // DeltaReferencePosition  SEQUENCE
                                                        //  deltaLatitude  DeltaLatitude      
                                                        //  deltaLongitude DeltaLongitude     
                                                        //  deltaAltitude  DeltaAltitude      
                                                    
                                                    // Field name: delta_latitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_113 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_latitude.value = *_tmp_113;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_latitude.value += -131071;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_latitude.value;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_latitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_latitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_latitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000098\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_latitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_latitude: " <<
                                                                     ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_latitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: delta_longitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_114 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_longitude.value = *_tmp_114;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_longitude.value += -131071;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_longitude.value;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_longitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_longitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_longitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000099\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_longitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_longitude: " <<
                                                                     ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_longitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: delta_altitude
                                                    // Real
                                                    // Float
                                                    // FLOAT  min(-12700) max(12800) span(25501) scaleDivisor(100.0) dataType(Float)
                                                    uint16_t* _tmp_115 = (uint16_t*) buffer; buffer += 2;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_altitude.value = *_tmp_115;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_altitude.value += -12700;
                                                    __aux64__ = ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_altitude.value;
                                                    ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_altitude.value /= 100.0;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -12700) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_altitude.value' " << (__aux64__) << " is less than allowable (-12700); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 12800) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_altitude.value' " << (__aux64__) << " exceeds max allowable (12800); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000100\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_altitude.value) << " ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_altitude: " <<
                                                                     ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].zone[0].computed_segment[0].offset_position[0].delta_altitude.value << " (" << __aux64__ << ")";
                                                    }
                                            }
                                    }
                                    else
                                    {
                                        uint16_t* _tmp_116 = (uint16_t*)buffer;  // OpenType length
                                        buffer += 2 + int(*_tmp_116);            // Ignoring opentype data
                                    }
                                }
                                if(*_ext_flag_17) { // from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d]. 
                                    uint8_t* _tmp_117 = (uint8_t*) buffer++;  // number of extensions
                                    bool _array_2[*_tmp_117];
                                    
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m000101\033[0m| Reading number of exts from ros->ivi.optional[0].elements[c].glc[0].parts.elements[d].: " << static_cast<unsigned int>(*_tmp_117);
                                    
                                    // Extensions bytemap
                                    for(int i = 0; i < *_tmp_117; i++)
                                        _array_2[i] = (*buffer++) != 0;
                                    
                                    // Discarding unknown OpenType containers
                                    for(int i = 0; i < *_tmp_117; i++) {
                                        uint16_t* _tmp_118 = (uint16_t*)buffer;  // OpenType length
                                        buffer += 2;
                                    
                                        if(debug) {
                                        }
                                    
                                        for(int i = 0; i < *_tmp_118; i++)
                                            buffer++;
                                    }
                                    
                                }
                        }
                        if(*_ext_flag_6) { // from ros->ivi.optional[0].elements[c].glc[0]. 
                            uint8_t* _tmp_119 = (uint8_t*) buffer++;  // number of extensions
                            bool _array_3[*_tmp_119];
                            
                            if(debug)
                                logger->debug() << "|\033[38;5;94m000102\033[0m| Reading number of exts from ros->ivi.optional[0].elements[c].glc[0].: " << static_cast<unsigned int>(*_tmp_119);
                            
                            // Extensions bytemap
                            for(int i = 0; i < *_tmp_119; i++)
                                _array_3[i] = (*buffer++) != 0;
                            
                            // Discarding unknown OpenType containers
                            for(int i = 0; i < *_tmp_119; i++) {
                                uint16_t* _tmp_120 = (uint16_t*)buffer;  // OpenType length
                                buffer += 2;
                            
                                if(debug) {
                                }
                            
                                for(int i = 0; i < *_tmp_120; i++)
                                    buffer++;
                            }
                            
                        }
                }
                else if(_choice_1 == 1)  // CHOICE IviContainer  fieldName(giv)
                {
                    dsrc_v2_ivi_msgs::msg::GeneralIviContainer _tmp_121;
                    ros->ivi.optional[0].elements[c].giv.push_back(_tmp_121);
                
                    // SequenceOf
                    // Data Type UInt8
                    // SEQUENCE_OF  min(1) max(16) span(16)
                    uint8_t* _ext_flag_57 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].
                    
                    if(debug) {
                        logger->debug() << "|\033[38;5;94m000103\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].: " << int(*_ext_flag_57);
                    }
                    
                    int16_t* _tmp_122 = (int16_t*)buffer;
                    buffer += 2;
                    __aux64__ = *_tmp_122;
                    __aux64__ += 1;     // +min
                    
                    int _if__tmp_122 = __aux64__;
                    
                    if(debug) {
                        logger->debug() << "|\033[38;5;94m000104\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0]. size: " << int(*_tmp_122);
                    }
                    
                    // ******************* MIN validator *******************
                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                        return false;
                    }
                    // ******************* MAX validator *******************
                    if(VALIDATORS_ENABLED && __aux64__ > 16) {
                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].value' " << (__aux64__) << " exceeds max allowable (16); message dropped.";
                        return false;
                    }
                    
                    
                    for(int m = 0; m < _if__tmp_122; m++) {
                        dsrc_v2_ivi_msgs::msg::GicPart seqof_m;  // SEQUENCE
                        ros->ivi.optional[0].elements[c].giv[0].elements.push_back(seqof_m);
                    
                            // GicPart  SEQUENCE
                                //  detectionZoneIds       GicPart_detectionZoneIds         OPTIONAL  
                                //  its_Rrid               VarLengthNumber                  OPTIONAL  
                                //  relevanceZoneIds       GicPart_relevanceZoneIds         OPTIONAL  
                                //  direction              Direction                        OPTIONAL  
                                //  driverAwarenessZoneIds GicPart_driverAwarenessZoneIds   OPTIONAL  
                                //  minimumAwarenessTime   GicPart_minimumAwarenessTime     OPTIONAL  
                                //  applicableLanes        GicPart_applicableLanes          OPTIONAL  
                                //  iviType                IviType                            
                                //  iviPurpose             IviPurpose                       OPTIONAL  
                                //  laneStatus             LaneStatus                       OPTIONAL  
                                //  vehicleCharacteristics GicPart_vehicleCharacteristics   OPTIONAL  
                                //  driverCharacteristics  DriverCharacteristics            OPTIONAL  
                                //  layoutId               GicPart_layoutId                 OPTIONAL  
                                //  preStoredlayoutId      GicPart_preStoredlayoutId        OPTIONAL  
                                //  roadSignCodes          GicPart_roadSignCodes              
                                //  extraText              GicPart_extraText                OPTIONAL  
                                //  ...
                            uint8_t* _ext_flag_58 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000105\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].: " << int(*_ext_flag_58);
                            }
                            
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartDetectionZoneIds _tmp_123;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids.push_back(_tmp_123);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000106\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_citsapplmgmtids_msgs::msg::VarLengthNumber _tmp_124;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid.push_back(_tmp_124);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000107\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartRelevanceZoneIds _tmp_125;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids.push_back(_tmp_125);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000108\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::Direction _tmp_126;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].direction.push_back(_tmp_126);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000109\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].direction " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartDriverAwarenessZoneIds _tmp_127;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids.push_back(_tmp_127);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000110\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartMinimumAwarenessTime _tmp_128;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time.push_back(_tmp_128);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000111\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartApplicableLanes _tmp_129;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes.push_back(_tmp_129);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000112\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::IviPurpose _tmp_130;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose.push_back(_tmp_130);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000113\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::LaneStatus _tmp_131;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status.push_back(_tmp_131);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000114\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartVehicleCharacteristics _tmp_132;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics.push_back(_tmp_132);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000115\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::DriverCharacteristics _tmp_133;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics.push_back(_tmp_133);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000116\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartLayoutId _tmp_134;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id.push_back(_tmp_134);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000117\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartPreStoredlayoutId _tmp_135;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id.push_back(_tmp_135);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000118\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartExtraText _tmp_136;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text.push_back(_tmp_136);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000119\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text " << tools::green("present");
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids.size() != 0) {
                                // Field name: detection_zone_ids
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_59 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000120\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].: " << int(*_ext_flag_59);
                                }
                                
                                int16_t* _tmp_137 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_137;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_137 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000121\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0]. size: " << int(*_tmp_137);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int n = 0; n < _if__tmp_137; n++) {
                                    dsrc_v2_ivi_msgs::msg::Zid seqof_n;  // INTEGER
                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements.push_back(seqof_n);
                                
                                    // Integer
                                    // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                    uint8_t* _ext_flag_60 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000122\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].: " << int(*_ext_flag_60);
                                    }
                                    
                                    if(*_ext_flag_60) {
                                        uint8_t* _tmp_139 = (uint8_t*) buffer++;
                                        
                                        if(*_tmp_139) {
                                            uint64_t* _tmp_140 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = *_tmp_140;
                                            __aux64__ += INT64_MIN;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value = __aux64__;
                                        }
                                        else
                                        {
                                            uint32_t* _tmp_140 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = *_tmp_140;
                                            __aux64__ += INT32_MIN;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value = __aux64__;
                                        }
                                    }
                                    else
                                    {
                                        uint8_t* _tmp_138 = (uint8_t*) buffer++;
                                        __aux64__ = *_tmp_138;
                                        __aux64__ += 1;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value = __aux64__;
                                    
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m000123\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value) << 
                                                         " ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].detection_zone_ids[0].elements[n].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                            return false;
                                        }
                                        
                                    }
                                    
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid.size() != 0) {
                                // Field name: its_rrid
                                // Choice
                                   // #0  content   VarLengthNumber_content   
                                   // #1  extension   Ext1   
                                uint8_t _choice_5 = *(buffer++);
                                
                                if(_choice_5 == 0) {
                                    dsrc_v2_citsapplmgmtids_msgs::msg::VarLengthNumberContent _tmp_141;
                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].content.push_back(_tmp_141);
                                
                                    // Integer
                                    // UINT8  min(0) max(127) span(128) datatype(UInt8)
                                    uint8_t* _tmp_142 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_142;
                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].content[0].value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000124\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].content[0].value) << 
                                                     " ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].content[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].content[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].content[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 127) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].content[0].value' " << (__aux64__) << " exceeds max allowable (127); message dropped.";
                                        return false;
                                    }
                                }
                                else if(_choice_5 == 1)  // CHOICE VarLengthNumber  fieldName(extension)
                                {
                                    dsrc_v2_citsapplmgmtids_msgs::msg::Ext1 _tmp_143;
                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension.push_back(_tmp_143);
                                
                                    // Choice
                                       // #0  content   Ext1_content   
                                       // #1  extension   Ext2   
                                    uint8_t _choice_6 = *(buffer++);
                                    
                                    if(_choice_6 == 0) {
                                        dsrc_v2_citsapplmgmtids_msgs::msg::Ext1Content _tmp_144;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].content.push_back(_tmp_144);
                                    
                                        // Integer
                                        // UINT16  min(128) max(16511) span(16384) datatype(UInt16)
                                        uint16_t* _tmp_145 = (uint16_t*) buffer; buffer += 2;
                                        __aux64__ = *_tmp_145;
                                        __aux64__ += 128;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].content[0].value = __aux64__;
                                        
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m000125\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].content[0].value) << 
                                                         " ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].content[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].content[0].value;
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 128) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].content[0].value' " << (__aux64__) << " is less than allowable (128); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 16511) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].content[0].value' " << (__aux64__) << " exceeds max allowable (16511); message dropped.";
                                            return false;
                                        }
                                    }
                                    else if(_choice_6 == 1)  // CHOICE Ext1  fieldName(extension)
                                    {
                                        dsrc_v2_citsapplmgmtids_msgs::msg::Ext2 _tmp_146;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension.push_back(_tmp_146);
                                    
                                        // Choice
                                           // #0  content   Ext2_content   
                                           // #1  extension   Ext3   
                                        uint8_t _choice_7 = *(buffer++);
                                        
                                        if(_choice_7 == 0) {
                                            dsrc_v2_citsapplmgmtids_msgs::msg::Ext2Content _tmp_147;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].content.push_back(_tmp_147);
                                        
                                            // Integer
                                            // UINT32  min(16512) max(2113663) span(2097152) datatype(UInt32)
                                            uint32_t* _tmp_148 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = *_tmp_148;
                                            __aux64__ += 16512;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].content[0].value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000126\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].content[0].value) << 
                                                             " ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].content[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].content[0].value;
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 16512) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].content[0].value' " << (__aux64__) << " is less than allowable (16512); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 2113663) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].content[0].value' " << (__aux64__) << " exceeds max allowable (2113663); message dropped.";
                                                return false;
                                            }
                                        }
                                        else if(_choice_7 == 1)  // CHOICE Ext2  fieldName(extension)
                                        {
                                            dsrc_v2_citsapplmgmtids_msgs::msg::Ext3 _tmp_149;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension.push_back(_tmp_149);
                                        
                                            // Integer
                                            // UINT32  min(2113664) max(270549119) span(268435456) datatype(UInt32)
                                            uint8_t* _ext_flag_64 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000127\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].: " << int(*_ext_flag_64);
                                            }
                                            
                                            if(*_ext_flag_64) {
                                                uint8_t* _tmp_151 = (uint8_t*) buffer++;
                                                
                                                if(*_tmp_151) {
                                                    uint64_t* _tmp_152 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = *_tmp_152;
                                                    __aux64__ += INT64_MIN;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value = __aux64__;
                                                }
                                                else
                                                {
                                                    uint32_t* _tmp_152 = (uint32_t*) buffer; buffer += 4;
                                                    __aux64__ = *_tmp_152;
                                                    __aux64__ += INT32_MIN;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value = __aux64__;
                                                }
                                            }
                                            else
                                            {
                                                uint32_t* _tmp_150 = (uint32_t*) buffer; buffer += 4;
                                                __aux64__ = *_tmp_150;
                                                __aux64__ += 2113664;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value = __aux64__;
                                            
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000128\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value) << 
                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value;
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 2113664) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value' " << (__aux64__) << " is less than allowable (2113664); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 270549119) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0].extension[0].value' " << (__aux64__) << " exceeds max allowable (270549119); message dropped.";
                                                    return false;
                                                }
                                                
                                            }
                                        }
                                        else
                                        {
                                            logger->warning() << "Wrong option (" << static_cast<int>(_choice_7) << ") selected in CHOICE Ext2 in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0].extension[0]'; message dropped.";
                                            return false;
                                        }
                                    }
                                    else
                                    {
                                        logger->warning() << "Wrong option (" << static_cast<int>(_choice_6) << ") selected in CHOICE Ext1 in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0].extension[0]'; message dropped.";
                                        return false;
                                    }
                                }
                                else
                                {
                                    logger->warning() << "Wrong option (" << static_cast<int>(_choice_5) << ") selected in CHOICE VarLengthNumber in 'ivi.optional[0].elements[c].giv[0].elements[m].its_rrid[0]'; message dropped.";
                                    return false;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids.size() != 0) {
                                // Field name: relevance_zone_ids
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_65 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000129\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].: " << int(*_ext_flag_65);
                                }
                                
                                int16_t* _tmp_153 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_153;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_153 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000130\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0]. size: " << int(*_tmp_153);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int o = 0; o < _if__tmp_153; o++) {
                                    dsrc_v2_ivi_msgs::msg::Zid seqof_o;  // INTEGER
                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements.push_back(seqof_o);
                                
                                    // Integer
                                    // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                    uint8_t* _ext_flag_66 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000131\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].: " << int(*_ext_flag_66);
                                    }
                                    
                                    if(*_ext_flag_66) {
                                        uint8_t* _tmp_155 = (uint8_t*) buffer++;
                                        
                                        if(*_tmp_155) {
                                            uint64_t* _tmp_156 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = *_tmp_156;
                                            __aux64__ += INT64_MIN;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value = __aux64__;
                                        }
                                        else
                                        {
                                            uint32_t* _tmp_156 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = *_tmp_156;
                                            __aux64__ += INT32_MIN;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value = __aux64__;
                                        }
                                    }
                                    else
                                    {
                                        uint8_t* _tmp_154 = (uint8_t*) buffer++;
                                        __aux64__ = *_tmp_154;
                                        __aux64__ += 1;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value = __aux64__;
                                    
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m000132\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value) << 
                                                         " ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].relevance_zone_ids[0].elements[o].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                            return false;
                                        }
                                        
                                    }
                                    
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].direction.size() != 0) {
                                // Field name: direction
                                // Integer
                                // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                uint8_t* _tmp_157 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_157;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].direction[0].value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000133\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].direction[0].value) << 
                                                 " ivi.optional[0].elements[c].giv[0].elements[m].direction[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].direction[0].value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].direction[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].direction[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                    return false;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids.size() != 0) {
                                // Field name: driver_awareness_zone_ids
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_67 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000134\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].: " << int(*_ext_flag_67);
                                }
                                
                                int16_t* _tmp_158 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_158;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_158 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000135\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0]. size: " << int(*_tmp_158);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int p = 0; p < _if__tmp_158; p++) {
                                    dsrc_v2_ivi_msgs::msg::Zid seqof_p;  // INTEGER
                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements.push_back(seqof_p);
                                
                                    // Integer
                                    // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                    uint8_t* _ext_flag_68 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000136\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].: " << int(*_ext_flag_68);
                                    }
                                    
                                    if(*_ext_flag_68) {
                                        uint8_t* _tmp_160 = (uint8_t*) buffer++;
                                        
                                        if(*_tmp_160) {
                                            uint64_t* _tmp_161 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = *_tmp_161;
                                            __aux64__ += INT64_MIN;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value = __aux64__;
                                        }
                                        else
                                        {
                                            uint32_t* _tmp_161 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = *_tmp_161;
                                            __aux64__ += INT32_MIN;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value = __aux64__;
                                        }
                                    }
                                    else
                                    {
                                        uint8_t* _tmp_159 = (uint8_t*) buffer++;
                                        __aux64__ = *_tmp_159;
                                        __aux64__ += 1;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value = __aux64__;
                                    
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m000137\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value) << 
                                                         " ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].driver_awareness_zone_ids[0].elements[p].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                            return false;
                                        }
                                        
                                    }
                                    
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time.size() != 0) {
                                // Field name: minimum_awareness_time
                                // Integer
                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                uint8_t* _tmp_162 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_162;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time[0].value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000138\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time[0].value) << 
                                                 " ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time[0].value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].minimum_awareness_time[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                    return false;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes.size() != 0) {
                                // Field name: applicable_lanes
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_69 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000139\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].: " << int(*_ext_flag_69);
                                }
                                
                                int16_t* _tmp_163 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_163;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_163 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000140\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0]. size: " << int(*_tmp_163);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int q = 0; q < _if__tmp_163; q++) {
                                    its_container_v1_its_container_msgs::msg::LanePosition seqof_q;  // INTEGER
                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].elements.push_back(seqof_q);
                                
                                    // Integer
                                    // INT8  min(-1) max(14) span(16) datatype(Int8)
                                    uint8_t* _tmp_164 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_164;
                                    __aux64__ += -1;
                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].elements[q].value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000141\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].elements[q].value) << 
                                                     " ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].elements[q].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].elements[q].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].elements[q].value' " << (__aux64__) << " is less than allowable (-1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].applicable_lanes[0].elements[q].value' " << (__aux64__) << " exceeds max allowable (14); message dropped.";
                                        return false;
                                    }
                                    
                                    
                                }
                            }
                            
                            // Field name: ivi_type
                            // Integer
                            // UINT8  min(0) max(7) span(8) datatype(UInt8)
                            uint8_t* _tmp_165 = (uint8_t*) buffer++;
                            __aux64__ = *_tmp_165;
                            ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_type.value = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000142\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_type.value) << 
                                             " ivi.optional[0].elements[c].giv[0].elements[m].ivi_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_type.value);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].ivi_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].ivi_type.value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                return false;
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose.size() != 0) {
                                // Field name: ivi_purpose
                                // Integer
                                // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                uint8_t* _tmp_166 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_166;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose[0].value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000143\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose[0].value) << 
                                                 " ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose[0].value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].ivi_purpose[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                    return false;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status.size() != 0) {
                                // Field name: lane_status
                                // Integer
                                // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                uint8_t* _ext_flag_70 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000144\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].: " << int(*_ext_flag_70);
                                }
                                
                                if(*_ext_flag_70) {
                                    uint8_t* _tmp_168 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_168) {
                                        uint64_t* _tmp_169 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_169;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_169 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_169;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_167 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_167;
                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000145\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value) << 
                                                     " ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].lane_status[0].value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                        return false;
                                    }
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics.size() != 0) {
                                // Field name: vehicle_characteristics
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_71 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000146\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].: " << int(*_ext_flag_71);
                                }
                                
                                int16_t* _tmp_170 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_170;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_170 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000147\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0]. size: " << int(*_tmp_170);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int r = 0; r < _if__tmp_170; r++) {
                                    dsrc_v2_ivi_msgs::msg::CompleteVehicleCharacteristics seqof_r;  // SEQUENCE
                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements.push_back(seqof_r);
                                
                                        // CompleteVehicleCharacteristics  SEQUENCE
                                            //  tractor    TractorCharacteristics                   OPTIONAL  
                                            //  trailer    CompleteVehicleCharacteristics_trailer   OPTIONAL  
                                            //  train      TrainCharacteristics                     OPTIONAL  
                                        if(*(buffer++)) { 
                                            dsrc_v2_ivi_msgs::msg::TractorCharacteristics _tmp_171;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor.push_back(_tmp_171);
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m000148\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor " << tools::green("present");
                                        }
                                        if(*(buffer++)) { 
                                            dsrc_v2_ivi_msgs::msg::CompleteVehicleCharacteristicsTrailer _tmp_172;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer.push_back(_tmp_172);
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m000149\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer " << tools::green("present");
                                        }
                                        if(*(buffer++)) { 
                                            dsrc_v2_ivi_msgs::msg::TrainCharacteristics _tmp_173;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train.push_back(_tmp_173);
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m000150\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train " << tools::green("present");
                                        }
                                        
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor.size() != 0) {
                                            // Field name: tractor
                                                // TractorCharacteristics  SEQUENCE
                                                    //  equalTo    TractorCharacteristics_equalTo      OPTIONAL  
                                                    //  notEqualTo TractorCharacteristics_notEqualTo   OPTIONAL  
                                                    //  ranges     TractorCharacteristics_ranges       OPTIONAL  
                                                if(*(buffer++)) { 
                                                    dsrc_v2_ivi_msgs::msg::TractorCharacteristicsEqualTo _tmp_174;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to.push_back(_tmp_174);
                                                
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m000151\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to " << tools::green("present");
                                                }
                                                if(*(buffer++)) { 
                                                    dsrc_v2_ivi_msgs::msg::TractorCharacteristicsNotEqualTo _tmp_175;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to.push_back(_tmp_175);
                                                
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m000152\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to " << tools::green("present");
                                                }
                                                if(*(buffer++)) { 
                                                    dsrc_v2_ivi_msgs::msg::TractorCharacteristicsRanges _tmp_176;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges.push_back(_tmp_176);
                                                
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m000153\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges " << tools::green("present");
                                                }
                                                
                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to.size() != 0) {
                                                    // Field name: equal_to
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4)
                                                    uint8_t* _ext_flag_72 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000154\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].: " << int(*_ext_flag_72);
                                                    }
                                                    
                                                    int16_t* _tmp_177 = (int16_t*)buffer;
                                                    buffer += 2;
                                                    __aux64__ = *_tmp_177;
                                                    __aux64__ += 1;     // +min
                                                    
                                                    int _if__tmp_177 = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000155\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0]. size: " << int(*_tmp_177);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    for(int s = 0; s < _if__tmp_177; s++) {
                                                        dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_s;  // CHOICE
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements.push_back(seqof_s);
                                                    
                                                        // Choice
                                                        uint8_t* _ext_flag_73 = (uint8_t*)buffer++; // ext flag
                                                        
                                                           // #0  simpleVehicleType   StationType   
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                           // #2  iso3833VehicleType   Iso3833VehicleType   
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                           // #4  engineCharacteristics   EngineCharacteristics   
                                                           // #5  loadType   LoadType   
                                                           // #6  usage   VehicleRole   
                                                        uint8_t _choice_8 = *(buffer++);
                                                        
                                                        if(*_ext_flag_73)
                                                            _choice_8 += 6 + 1; // Ext addition
                                                        
                                                        if(_choice_8 == 0) {
                                                            its_container_v1_its_container_msgs::msg::StationType _tmp_178;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].simple_vehicle_type.push_back(_tmp_178);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_179 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_179;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].simple_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000156\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_8 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_180;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code.push_back(_tmp_180);
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                            uint8_t _choice_9 = *(buffer++);
                                                            
                                                            if(_choice_9 == 0) {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_181;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_181);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                uint8_t* _tmp_182 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_182;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000157\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                            }
                                                            else if(_choice_9 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_183;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_183);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_184 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_184;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000158\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                            }
                                                            else if(_choice_9 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_185;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_185);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_186 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_186;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000159\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                            }
                                                            else if(_choice_9 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_187;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_187);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                uint8_t* _tmp_188 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_188;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000160\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(_choice_9) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].eu_vehicle_category_code[0]'; message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_8 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_189;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].iso3833_vehicle_type.push_back(_tmp_189);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_190 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_190;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].iso3833_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000161\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_8 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_191;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value.push_back(_tmp_191);
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                
                                                                // Field name: euro_value
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_192 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_192;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000162\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                // Field name: cop_value
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                uint8_t* _tmp_193 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_193;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000163\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].euro_and_co2value[0].cop_value.value);
                                                                }
                                                        }
                                                        else if(_choice_8 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_194;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].engine_characteristics.push_back(_tmp_194);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_195 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_195;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].engine_characteristics[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000164\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].engine_characteristics[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_8 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                        {
                                                            dsrc_v2_ivi_msgs::msg::LoadType _tmp_196;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type.push_back(_tmp_196);
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                
                                                                // Field name: goods_type
                                                                // Integer
                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                uint8_t* _ext_flag_81 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000165\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.: " << int(*_ext_flag_81);
                                                                }
                                                                
                                                                if(*_ext_flag_81) {
                                                                    uint8_t* _tmp_198 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_198) {
                                                                        uint64_t* _tmp_199 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_199;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_199 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_199;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_197 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_197;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000166\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                                
                                                                // Field name: dangerous_goods_type
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                uint8_t* _tmp_200 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_200;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000167\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                // Field name: special_transport_type
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                uint8_t* _tmp_201 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_201 + 4;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000168\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].special_transport_type.value: " << __aux64__;
                                                                
                                                                int _if__tmp_201 = __aux64__;
                                                                for(int t = 0; t < _if__tmp_201; t++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].special_transport_type.values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].special_transport_type.values[t] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_8 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                        {
                                                            its_container_v1_its_container_msgs::msg::VehicleRole _tmp_202;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].usage.push_back(_tmp_202);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) datatype(Int32)
                                                            uint8_t* _tmp_203 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_203;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].usage[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000169\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].usage[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].equal_to[0].elements[s].usage[0].value);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            uint16_t* _tmp_204 = (uint16_t*)buffer;  // OpenType length
                                                            buffer += 2 + int(*_tmp_204);            // Ignoring opentype data
                                                        }
                                                    }
                                                }
                                                
                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to.size() != 0) {
                                                    // Field name: not_equal_to
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4)
                                                    uint8_t* _ext_flag_84 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000170\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].: " << int(*_ext_flag_84);
                                                    }
                                                    
                                                    int16_t* _tmp_205 = (int16_t*)buffer;
                                                    buffer += 2;
                                                    __aux64__ = *_tmp_205;
                                                    __aux64__ += 1;     // +min
                                                    
                                                    int _if__tmp_205 = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000171\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0]. size: " << int(*_tmp_205);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    for(int u = 0; u < _if__tmp_205; u++) {
                                                        dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_u;  // CHOICE
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements.push_back(seqof_u);
                                                    
                                                        // Choice
                                                        uint8_t* _ext_flag_85 = (uint8_t*)buffer++; // ext flag
                                                        
                                                           // #0  simpleVehicleType   StationType   
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                           // #2  iso3833VehicleType   Iso3833VehicleType   
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                           // #4  engineCharacteristics   EngineCharacteristics   
                                                           // #5  loadType   LoadType   
                                                           // #6  usage   VehicleRole   
                                                        uint8_t _choice_10 = *(buffer++);
                                                        
                                                        if(*_ext_flag_85)
                                                            _choice_10 += 6 + 1; // Ext addition
                                                        
                                                        if(_choice_10 == 0) {
                                                            its_container_v1_its_container_msgs::msg::StationType _tmp_206;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].simple_vehicle_type.push_back(_tmp_206);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_207 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_207;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].simple_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000172\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_10 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_208;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code.push_back(_tmp_208);
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                            uint8_t _choice_11 = *(buffer++);
                                                            
                                                            if(_choice_11 == 0) {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_209;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_209);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                uint8_t* _tmp_210 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_210;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000173\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                            }
                                                            else if(_choice_11 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_211;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_211);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_212 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_212;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000174\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                            }
                                                            else if(_choice_11 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_213;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_213);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_214 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_214;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000175\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                            }
                                                            else if(_choice_11 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_215;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_215);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                uint8_t* _tmp_216 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_216;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000176\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(_choice_11) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].eu_vehicle_category_code[0]'; message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_10 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_217;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].iso3833_vehicle_type.push_back(_tmp_217);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_218 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_218;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].iso3833_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000177\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_10 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_219;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value.push_back(_tmp_219);
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                
                                                                // Field name: euro_value
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_220 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_220;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000178\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                // Field name: cop_value
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                uint8_t* _tmp_221 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_221;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000179\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].euro_and_co2value[0].cop_value.value);
                                                                }
                                                        }
                                                        else if(_choice_10 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_222;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].engine_characteristics.push_back(_tmp_222);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_223 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_223;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].engine_characteristics[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000180\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].engine_characteristics[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_10 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                        {
                                                            dsrc_v2_ivi_msgs::msg::LoadType _tmp_224;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type.push_back(_tmp_224);
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                
                                                                // Field name: goods_type
                                                                // Integer
                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                uint8_t* _ext_flag_93 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000181\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.: " << int(*_ext_flag_93);
                                                                }
                                                                
                                                                if(*_ext_flag_93) {
                                                                    uint8_t* _tmp_226 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_226) {
                                                                        uint64_t* _tmp_227 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_227;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_227 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_227;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_225 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_225;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000182\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                                
                                                                // Field name: dangerous_goods_type
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                uint8_t* _tmp_228 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_228;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000183\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                // Field name: special_transport_type
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                uint8_t* _tmp_229 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_229 + 4;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000184\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].special_transport_type.value: " << __aux64__;
                                                                
                                                                int _if__tmp_229 = __aux64__;
                                                                for(int v = 0; v < _if__tmp_229; v++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].special_transport_type.values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].special_transport_type.values[v] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_10 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                        {
                                                            its_container_v1_its_container_msgs::msg::VehicleRole _tmp_230;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].usage.push_back(_tmp_230);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) datatype(Int32)
                                                            uint8_t* _tmp_231 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_231;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].usage[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000185\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].usage[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].not_equal_to[0].elements[u].usage[0].value);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            uint16_t* _tmp_232 = (uint16_t*)buffer;  // OpenType length
                                                            buffer += 2 + int(*_tmp_232);            // Ignoring opentype data
                                                        }
                                                    }
                                                }
                                                
                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges.size() != 0) {
                                                    // Field name: ranges
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4)
                                                    uint8_t* _ext_flag_96 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000186\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].: " << int(*_ext_flag_96);
                                                    }
                                                    
                                                    int16_t* _tmp_233 = (int16_t*)buffer;
                                                    buffer += 2;
                                                    __aux64__ = *_tmp_233;
                                                    __aux64__ += 1;     // +min
                                                    
                                                    int _if__tmp_233 = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000187\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0]. size: " << int(*_tmp_233);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    for(int w = 0; w < _if__tmp_233; w++) {
                                                        dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRanges seqof_w;  // SEQUENCE
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements.push_back(seqof_w);
                                                    
                                                            // VehicleCharacteristicsRanges  SEQUENCE
                                                                //  comparisonOperator ComparisonOperator                      
                                                                //  limits             VehicleCharacteristicsRanges_limits     
                                                            
                                                            // Field name: comparison_operator
                                                            // Integer
                                                            // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                                            uint8_t* _tmp_234 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_234;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].comparison_operator.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000188\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].comparison_operator.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].comparison_operator.value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].comparison_operator.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].comparison_operator.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: limits
                                                            // Choice
                                                            uint8_t* _ext_flag_97 = (uint8_t*)buffer++; // ext flag
                                                            
                                                               // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles   
                                                               // #1  vehicleDimensions   VehicleDimensions   
                                                               // #2  vehicleWeightLimits   VehicleWeightLimits   
                                                               // #3  axleWeightLimits   AxleWeightLimits   
                                                               // #4  passengerCapacity   PassengerCapacity   
                                                               // #5  exhaustEmissionValues   ExhaustEmissionValues   
                                                               // #6  dieselEmissionValues   DieselEmissionValues   
                                                               // #7  soundLevel   SoundLevel   
                                                            uint8_t _choice_12 = *(buffer++);
                                                            
                                                            if(*_ext_flag_97)
                                                                _choice_12 += 7 + 1; // Ext addition
                                                            
                                                            if(_choice_12 == 0) {
                                                                dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRangesLimitsNumberOfAxles _tmp_235;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.number_of_axles.push_back(_tmp_235);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                                uint8_t* _tmp_236 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_236;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.number_of_axles[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000189\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.number_of_axles[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.number_of_axles[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.number_of_axles[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.number_of_axles[0].value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_12 == 1)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_dimensions)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::VehicleDimensions _tmp_237;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions.push_back(_tmp_237);
                                                            
                                                                    // VehicleDimensions  SEQUENCE
                                                                        //  vehicleLengthOverall Int1           
                                                                        //  vehicleHeigthOverall Int1           
                                                                        //  vehicleWidthOverall  Int1           
                                                                    
                                                                    // Field name: vehicle_length_overall
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_238 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_238;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_length_overall.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000190\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_heigth_overall
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_239 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_239;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_heigth_overall.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000191\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_width_overall
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_240 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_240;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_width_overall.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000192\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_12 == 2)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_weight_limits)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::VehicleWeightLimits _tmp_241;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits.push_back(_tmp_241);
                                                            
                                                                    // VehicleWeightLimits  SEQUENCE
                                                                        //  vehicleMaxLadenWeight     Int2           
                                                                        //  vehicleTrainMaximumWeight Int2           
                                                                        //  vehicleWeightUnladen      Int2           
                                                                    
                                                                    // Field name: vehicle_max_laden_weight
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_242 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_242;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000193\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_train_maximum_weight
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_243 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_243;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000194\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_weight_unladen
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_244 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_244;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000195\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_12 == 3)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(axle_weight_limits)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::AxleWeightLimits _tmp_245;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits.push_back(_tmp_245);
                                                            
                                                                    // AxleWeightLimits  SEQUENCE
                                                                        //  maxLadenweightOnAxle1 Int2           
                                                                        //  maxLadenweightOnAxle2 Int2           
                                                                        //  maxLadenweightOnAxle3 Int2           
                                                                        //  maxLadenweightOnAxle4 Int2           
                                                                        //  maxLadenweightOnAxle5 Int2           
                                                                    
                                                                    // Field name: max_ladenweight_on_axle1
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_246 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_246;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000196\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle2
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_247 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_247;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000197\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle3
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_248 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_248;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000198\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle4
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_249 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_249;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000199\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle5
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_250 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_250;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000200\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_12 == 4)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(passenger_capacity)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::PassengerCapacity _tmp_251;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity.push_back(_tmp_251);
                                                            
                                                                    // PassengerCapacity  SEQUENCE
                                                                        //  numberOfSeats          Int1           
                                                                        //  numberOfStandingPlaces Int1           
                                                                    
                                                                    // Field name: number_of_seats
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_252 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_252;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_seats.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000201\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_seats.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: number_of_standing_places
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_253 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_253;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_standing_places.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000202\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_12 == 5)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(exhaust_emission_values)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::ExhaustEmissionValues _tmp_254;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values.push_back(_tmp_254);
                                                            
                                                                    // ExhaustEmissionValues  SEQUENCE
                                                                        //  unitType      UnitType                             
                                                                        //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                        //  emissionHC    Int2                                 
                                                                        //  emissionNOX   Int2                                 
                                                                        //  emissionHCNOX Int2                                 
                                                                    
                                                                    // Field name: unit_type
                                                                    // Enumerated
                                                                    // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                    uint8_t* _tmp_255 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_255;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].unit_type.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000203\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].unit_type.value);
                                                                    }
                                                                    
                                                                    // Field name: emission_co
                                                                    // Integer
                                                                    // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                    uint16_t* _tmp_256 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_256;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_co.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000204\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_co.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: emission_hc
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_257 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_257;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hc.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000205\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hc.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: emission_nox
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_258 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_258;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_nox.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000206\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_nox.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: emission_hcnox
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_259 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_259;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hcnox.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000207\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_12 == 6)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(diesel_emission_values)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::DieselEmissionValues _tmp_260;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values.push_back(_tmp_260);
                                                            
                                                                    // DieselEmissionValues  SEQUENCE
                                                                        //  particulate     DieselEmissionValues_particulate     
                                                                        //  absorptionCoeff Int2                                 
                                                                    
                                                                    // Field name: particulate
                                                                        // DieselEmissionValues_particulate  SEQUENCE
                                                                            //  unitType   UnitType                                   
                                                                            //  value      DieselEmissionValues_particulate_value     
                                                                        
                                                                        // Field name: unit_type
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                        uint8_t* _tmp_261 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_261;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.unit_type.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000208\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                        }
                                                                        
                                                                        // Field name: value
                                                                        // Integer
                                                                        // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                        uint16_t* _tmp_262 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_262;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.value.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000209\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.value.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                            return false;
                                                                        }
                                                                    
                                                                    // Field name: absorption_coeff
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_263 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_263;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].absorption_coeff.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000210\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_12 == 7)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(sound_level)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::SoundLevel _tmp_264;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level.push_back(_tmp_264);
                                                            
                                                                    // SoundLevel  SEQUENCE
                                                                        //  soundstationary Int1           
                                                                        //  sounddriveby    Int1           
                                                                    
                                                                    // Field name: soundstationary
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_265 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_265;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].soundstationary.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000211\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].soundstationary.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].soundstationary.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: sounddriveby
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_266 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_266;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].sounddriveby.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000212\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].sounddriveby.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].sounddriveby.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].tractor[0].ranges[0].elements[w].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else
                                                            {
                                                                uint16_t* _tmp_267 = (uint16_t*)buffer;  // OpenType length
                                                                buffer += 2 + int(*_tmp_267);            // Ignoring opentype data
                                                            }
                                                    }
                                                }
                                        }
                                        
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer.size() != 0) {
                                            // Field name: trailer
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(3) span(3)
                                            int16_t* _tmp_268 = (int16_t*)buffer;
                                            buffer += 2;
                                            __aux64__ = *_tmp_268;
                                            __aux64__ += 1;     // +min
                                            
                                            int _if__tmp_268 = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000213\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0]. size: " << int(*_tmp_268);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                return false;
                                            }
                                            
                                            
                                            for(int x = 0; x < _if__tmp_268; x++) {
                                                dsrc_v2_ivi_msgs::msg::TrailerCharacteristics seqof_x;  // SEQUENCE
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements.push_back(seqof_x);
                                            
                                                    // TrailerCharacteristics  SEQUENCE
                                                        //  equalTo    TrailerCharacteristics_equalTo      OPTIONAL  
                                                        //  notEqualTo TrailerCharacteristics_notEqualTo   OPTIONAL  
                                                        //  ranges     TrailerCharacteristics_ranges       OPTIONAL  
                                                    if(*(buffer++)) { 
                                                        dsrc_v2_ivi_msgs::msg::TrailerCharacteristicsEqualTo _tmp_269;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to.push_back(_tmp_269);
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000214\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to " << tools::green("present");
                                                    }
                                                    if(*(buffer++)) { 
                                                        dsrc_v2_ivi_msgs::msg::TrailerCharacteristicsNotEqualTo _tmp_270;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to.push_back(_tmp_270);
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000215\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to " << tools::green("present");
                                                    }
                                                    if(*(buffer++)) { 
                                                        dsrc_v2_ivi_msgs::msg::TrailerCharacteristicsRanges _tmp_271;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges.push_back(_tmp_271);
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000216\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges " << tools::green("present");
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to.size() != 0) {
                                                        // Field name: equal_to
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                        uint8_t* _ext_flag_100 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000217\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].: " << int(*_ext_flag_100);
                                                        }
                                                        
                                                        int16_t* _tmp_272 = (int16_t*)buffer;
                                                        buffer += 2;
                                                        __aux64__ = *_tmp_272;
                                                        __aux64__ += 1;     // +min
                                                        
                                                        int _if__tmp_272 = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000218\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0]. size: " << int(*_tmp_272);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        for(int y = 0; y < _if__tmp_272; y++) {
                                                            dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_y;  // CHOICE
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements.push_back(seqof_y);
                                                        
                                                            // Choice
                                                            uint8_t* _ext_flag_101 = (uint8_t*)buffer++; // ext flag
                                                            
                                                               // #0  simpleVehicleType   StationType   
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                               // #2  iso3833VehicleType   Iso3833VehicleType   
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                               // #4  engineCharacteristics   EngineCharacteristics   
                                                               // #5  loadType   LoadType   
                                                               // #6  usage   VehicleRole   
                                                            uint8_t _choice_13 = *(buffer++);
                                                            
                                                            if(*_ext_flag_101)
                                                                _choice_13 += 6 + 1; // Ext addition
                                                            
                                                            if(_choice_13 == 0) {
                                                                its_container_v1_its_container_msgs::msg::StationType _tmp_273;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].simple_vehicle_type.push_back(_tmp_273);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_274 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_274;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].simple_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000219\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_13 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_275;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code.push_back(_tmp_275);
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                                uint8_t _choice_14 = *(buffer++);
                                                                
                                                                if(_choice_14 == 0) {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_276;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_276);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                    uint8_t* _tmp_277 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_277;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000220\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_14 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_278;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_278);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_279 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_279;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000221\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_14 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_280;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_280);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_281 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_281;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000222\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_14 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_282;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_282);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                    uint8_t* _tmp_283 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_283;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000223\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(_choice_14) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_13 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_284;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].iso3833_vehicle_type.push_back(_tmp_284);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_285 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_285;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].iso3833_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000224\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_13 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_286;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value.push_back(_tmp_286);
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    
                                                                    // Field name: euro_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                    uint8_t* _tmp_287 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_287;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000225\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    // Field name: cop_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                    uint8_t* _tmp_288 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_288;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000226\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                            }
                                                            else if(_choice_13 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_289;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].engine_characteristics.push_back(_tmp_289);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_290 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_290;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].engine_characteristics[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000227\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].engine_characteristics[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_13 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                            {
                                                                dsrc_v2_ivi_msgs::msg::LoadType _tmp_291;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type.push_back(_tmp_291);
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    
                                                                    // Field name: goods_type
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _ext_flag_109 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000228\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.: " << int(*_ext_flag_109);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_109) {
                                                                        uint8_t* _tmp_293 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_293) {
                                                                            uint64_t* _tmp_294 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_294;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_294 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_294;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_292 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_292;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000229\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                    // Field name: dangerous_goods_type
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                    uint8_t* _tmp_295 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_295;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000230\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    // Field name: special_transport_type
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    uint8_t* _tmp_296 = (uint8_t*)buffer;
                                                                    __aux64__ = *_tmp_296 + 4;
                                                                    buffer += 1;
                                                                    
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000231\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].special_transport_type.value: " << __aux64__;
                                                                    
                                                                    int _if__tmp_296 = __aux64__;
                                                                    for(int z = 0; z < _if__tmp_296; z++) {
                                                                        uint8_t __c__;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].special_transport_type.values.push_back(__c__);
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].special_transport_type.values[z] = (*__b__ == 1);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_13 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                            {
                                                                its_container_v1_its_container_msgs::msg::VehicleRole _tmp_297;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].usage.push_back(_tmp_297);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_298 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_298;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].usage[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000232\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].equal_to[0].elements[y].usage[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                uint16_t* _tmp_299 = (uint16_t*)buffer;  // OpenType length
                                                                buffer += 2 + int(*_tmp_299);            // Ignoring opentype data
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to.size() != 0) {
                                                        // Field name: not_equal_to
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                        uint8_t* _ext_flag_112 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000233\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].: " << int(*_ext_flag_112);
                                                        }
                                                        
                                                        int16_t* _tmp_300 = (int16_t*)buffer;
                                                        buffer += 2;
                                                        __aux64__ = *_tmp_300;
                                                        __aux64__ += 1;     // +min
                                                        
                                                        int _if__tmp_300 = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000234\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0]. size: " << int(*_tmp_300);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        for(int a = 0; a < _if__tmp_300; a++) {
                                                            dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_a;  // CHOICE
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements.push_back(seqof_a);
                                                        
                                                            // Choice
                                                            uint8_t* _ext_flag_113 = (uint8_t*)buffer++; // ext flag
                                                            
                                                               // #0  simpleVehicleType   StationType   
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                               // #2  iso3833VehicleType   Iso3833VehicleType   
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                               // #4  engineCharacteristics   EngineCharacteristics   
                                                               // #5  loadType   LoadType   
                                                               // #6  usage   VehicleRole   
                                                            uint8_t _choice_15 = *(buffer++);
                                                            
                                                            if(*_ext_flag_113)
                                                                _choice_15 += 6 + 1; // Ext addition
                                                            
                                                            if(_choice_15 == 0) {
                                                                its_container_v1_its_container_msgs::msg::StationType _tmp_301;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].simple_vehicle_type.push_back(_tmp_301);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_302 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_302;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].simple_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000235\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_15 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_303;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code.push_back(_tmp_303);
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                                uint8_t _choice_16 = *(buffer++);
                                                                
                                                                if(_choice_16 == 0) {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_304;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_304);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                    uint8_t* _tmp_305 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_305;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000236\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_16 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_306;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_306);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_307 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_307;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000237\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_16 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_308;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_308);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_309 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_309;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000238\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_16 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_310;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_310);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                    uint8_t* _tmp_311 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_311;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000239\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(_choice_16) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_15 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_312;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].iso3833_vehicle_type.push_back(_tmp_312);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_313 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_313;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].iso3833_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000240\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_15 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_314;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value.push_back(_tmp_314);
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    
                                                                    // Field name: euro_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                    uint8_t* _tmp_315 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_315;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000241\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    // Field name: cop_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                    uint8_t* _tmp_316 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_316;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000242\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                            }
                                                            else if(_choice_15 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_317;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].engine_characteristics.push_back(_tmp_317);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_318 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_318;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].engine_characteristics[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000243\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].engine_characteristics[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_15 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                            {
                                                                dsrc_v2_ivi_msgs::msg::LoadType _tmp_319;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type.push_back(_tmp_319);
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    
                                                                    // Field name: goods_type
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _ext_flag_121 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000244\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.: " << int(*_ext_flag_121);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_121) {
                                                                        uint8_t* _tmp_321 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_321) {
                                                                            uint64_t* _tmp_322 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_322;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_322 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_322;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_320 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_320;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000245\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                    // Field name: dangerous_goods_type
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                    uint8_t* _tmp_323 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_323;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000246\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    // Field name: special_transport_type
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    uint8_t* _tmp_324 = (uint8_t*)buffer;
                                                                    __aux64__ = *_tmp_324 + 4;
                                                                    buffer += 1;
                                                                    
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000247\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].special_transport_type.value: " << __aux64__;
                                                                    
                                                                    int _if__tmp_324 = __aux64__;
                                                                    for(int b = 0; b < _if__tmp_324; b++) {
                                                                        uint8_t __c__;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].special_transport_type.values.push_back(__c__);
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].special_transport_type.values[b] = (*__b__ == 1);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_15 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                            {
                                                                its_container_v1_its_container_msgs::msg::VehicleRole _tmp_325;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].usage.push_back(_tmp_325);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_326 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_326;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].usage[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000248\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].not_equal_to[0].elements[a].usage[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                uint16_t* _tmp_327 = (uint16_t*)buffer;  // OpenType length
                                                                buffer += 2 + int(*_tmp_327);            // Ignoring opentype data
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges.size() != 0) {
                                                        // Field name: ranges
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                        uint8_t* _ext_flag_124 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000249\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].: " << int(*_ext_flag_124);
                                                        }
                                                        
                                                        int16_t* _tmp_328 = (int16_t*)buffer;
                                                        buffer += 2;
                                                        __aux64__ = *_tmp_328;
                                                        __aux64__ += 1;     // +min
                                                        
                                                        int _if__tmp_328 = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000250\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0]. size: " << int(*_tmp_328);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        for(int c = 0; c < _if__tmp_328; c++) {
                                                            dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRanges seqof_c;  // SEQUENCE
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements.push_back(seqof_c);
                                                        
                                                                // VehicleCharacteristicsRanges  SEQUENCE
                                                                    //  comparisonOperator ComparisonOperator                      
                                                                    //  limits             VehicleCharacteristicsRanges_limits     
                                                                
                                                                // Field name: comparison_operator
                                                                // Integer
                                                                // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                                                uint8_t* _tmp_329 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_329;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].comparison_operator.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000251\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].comparison_operator.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].comparison_operator.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].comparison_operator.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].comparison_operator.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: limits
                                                                // Choice
                                                                uint8_t* _ext_flag_125 = (uint8_t*)buffer++; // ext flag
                                                                
                                                                   // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles   
                                                                   // #1  vehicleDimensions   VehicleDimensions   
                                                                   // #2  vehicleWeightLimits   VehicleWeightLimits   
                                                                   // #3  axleWeightLimits   AxleWeightLimits   
                                                                   // #4  passengerCapacity   PassengerCapacity   
                                                                   // #5  exhaustEmissionValues   ExhaustEmissionValues   
                                                                   // #6  dieselEmissionValues   DieselEmissionValues   
                                                                   // #7  soundLevel   SoundLevel   
                                                                uint8_t _choice_17 = *(buffer++);
                                                                
                                                                if(*_ext_flag_125)
                                                                    _choice_17 += 7 + 1; // Ext addition
                                                                
                                                                if(_choice_17 == 0) {
                                                                    dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRangesLimitsNumberOfAxles _tmp_330;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.number_of_axles.push_back(_tmp_330);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                                    uint8_t* _tmp_331 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_331;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.number_of_axles[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000252\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.number_of_axles[0].value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.number_of_axles[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.number_of_axles[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.number_of_axles[0].value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_17 == 1)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_dimensions)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::VehicleDimensions _tmp_332;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions.push_back(_tmp_332);
                                                                
                                                                        // VehicleDimensions  SEQUENCE
                                                                            //  vehicleLengthOverall Int1           
                                                                            //  vehicleHeigthOverall Int1           
                                                                            //  vehicleWidthOverall  Int1           
                                                                        
                                                                        // Field name: vehicle_length_overall
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_333 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_333;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_length_overall.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000253\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_heigth_overall
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_334 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_334;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_heigth_overall.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000254\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_width_overall
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_335 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_335;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_width_overall.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000255\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_17 == 2)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_weight_limits)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::VehicleWeightLimits _tmp_336;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits.push_back(_tmp_336);
                                                                
                                                                        // VehicleWeightLimits  SEQUENCE
                                                                            //  vehicleMaxLadenWeight     Int2           
                                                                            //  vehicleTrainMaximumWeight Int2           
                                                                            //  vehicleWeightUnladen      Int2           
                                                                        
                                                                        // Field name: vehicle_max_laden_weight
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_337 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_337;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000256\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_train_maximum_weight
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_338 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_338;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000257\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_weight_unladen
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_339 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_339;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000258\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_17 == 3)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(axle_weight_limits)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::AxleWeightLimits _tmp_340;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits.push_back(_tmp_340);
                                                                
                                                                        // AxleWeightLimits  SEQUENCE
                                                                            //  maxLadenweightOnAxle1 Int2           
                                                                            //  maxLadenweightOnAxle2 Int2           
                                                                            //  maxLadenweightOnAxle3 Int2           
                                                                            //  maxLadenweightOnAxle4 Int2           
                                                                            //  maxLadenweightOnAxle5 Int2           
                                                                        
                                                                        // Field name: max_ladenweight_on_axle1
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_341 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_341;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000259\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle2
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_342 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_342;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000260\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle3
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_343 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_343;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000261\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle4
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_344 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_344;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000262\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle5
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_345 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_345;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000263\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_17 == 4)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(passenger_capacity)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::PassengerCapacity _tmp_346;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity.push_back(_tmp_346);
                                                                
                                                                        // PassengerCapacity  SEQUENCE
                                                                            //  numberOfSeats          Int1           
                                                                            //  numberOfStandingPlaces Int1           
                                                                        
                                                                        // Field name: number_of_seats
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_347 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_347;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_seats.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000264\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_seats.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: number_of_standing_places
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_348 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_348;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_standing_places.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000265\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_17 == 5)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(exhaust_emission_values)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::ExhaustEmissionValues _tmp_349;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values.push_back(_tmp_349);
                                                                
                                                                        // ExhaustEmissionValues  SEQUENCE
                                                                            //  unitType      UnitType                             
                                                                            //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                            //  emissionHC    Int2                                 
                                                                            //  emissionNOX   Int2                                 
                                                                            //  emissionHCNOX Int2                                 
                                                                        
                                                                        // Field name: unit_type
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                        uint8_t* _tmp_350 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_350;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].unit_type.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000266\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].unit_type.value);
                                                                        }
                                                                        
                                                                        // Field name: emission_co
                                                                        // Integer
                                                                        // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                        uint16_t* _tmp_351 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_351;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_co.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000267\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_co.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: emission_hc
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_352 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_352;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hc.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000268\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hc.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: emission_nox
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_353 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_353;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_nox.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000269\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_nox.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: emission_hcnox
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_354 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_354;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hcnox.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000270\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_17 == 6)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(diesel_emission_values)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::DieselEmissionValues _tmp_355;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values.push_back(_tmp_355);
                                                                
                                                                        // DieselEmissionValues  SEQUENCE
                                                                            //  particulate     DieselEmissionValues_particulate     
                                                                            //  absorptionCoeff Int2                                 
                                                                        
                                                                        // Field name: particulate
                                                                            // DieselEmissionValues_particulate  SEQUENCE
                                                                                //  unitType   UnitType                                   
                                                                                //  value      DieselEmissionValues_particulate_value     
                                                                            
                                                                            // Field name: unit_type
                                                                            // Enumerated
                                                                            // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                            uint8_t* _tmp_356 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_356;
                                                                            __aux64__ += 0;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.unit_type.value = __aux64__;
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000271\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                            }
                                                                            
                                                                            // Field name: value
                                                                            // Integer
                                                                            // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                            uint16_t* _tmp_357 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_357;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.value.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000272\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.value.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                                return false;
                                                                            }
                                                                        
                                                                        // Field name: absorption_coeff
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_358 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_358;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].absorption_coeff.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000273\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_17 == 7)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(sound_level)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::SoundLevel _tmp_359;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level.push_back(_tmp_359);
                                                                
                                                                        // SoundLevel  SEQUENCE
                                                                            //  soundstationary Int1           
                                                                            //  sounddriveby    Int1           
                                                                        
                                                                        // Field name: soundstationary
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_360 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_360;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].soundstationary.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000274\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].soundstationary.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].soundstationary.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: sounddriveby
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_361 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_361;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].sounddriveby.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000275\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].sounddriveby.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].sounddriveby.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].trailer[0].elements[x].ranges[0].elements[c].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else
                                                                {
                                                                    uint16_t* _tmp_362 = (uint16_t*)buffer;  // OpenType length
                                                                    buffer += 2 + int(*_tmp_362);            // Ignoring opentype data
                                                                }
                                                        }
                                                    }
                                            }
                                        }
                                        
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train.size() != 0) {
                                            // Field name: train
                                                // TrainCharacteristics  SEQUENCE
                                                    //  equalTo    TractorCharacteristics_equalTo        
                                                    //  notEqualTo TractorCharacteristics_notEqualTo     
                                                    //  ranges     TractorCharacteristics_ranges         
                                                
                                                // Field name: equal_to
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(4) span(4)
                                                uint8_t* _ext_flag_128 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000276\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.: " << int(*_ext_flag_128);
                                                }
                                                
                                                int16_t* _tmp_363 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_363;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_363 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000277\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to. size: " << int(*_tmp_363);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int d = 0; d < _if__tmp_363; d++) {
                                                    dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_d;  // CHOICE
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements.push_back(seqof_d);
                                                
                                                    // Choice
                                                    uint8_t* _ext_flag_129 = (uint8_t*)buffer++; // ext flag
                                                    
                                                       // #0  simpleVehicleType   StationType   
                                                       // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                       // #2  iso3833VehicleType   Iso3833VehicleType   
                                                       // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                       // #4  engineCharacteristics   EngineCharacteristics   
                                                       // #5  loadType   LoadType   
                                                       // #6  usage   VehicleRole   
                                                    uint8_t _choice_18 = *(buffer++);
                                                    
                                                    if(*_ext_flag_129)
                                                        _choice_18 += 6 + 1; // Ext addition
                                                    
                                                    if(_choice_18 == 0) {
                                                        its_container_v1_its_container_msgs::msg::StationType _tmp_364;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].simple_vehicle_type.push_back(_tmp_364);
                                                    
                                                        // Integer
                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                        uint8_t* _tmp_365 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_365;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].simple_vehicle_type[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000278\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].simple_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].simple_vehicle_type[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_18 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                    {
                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_366;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code.push_back(_tmp_366);
                                                    
                                                        // Choice
                                                           // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                           // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                           // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                           // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                        uint8_t _choice_19 = *(buffer++);
                                                        
                                                        if(_choice_19 == 0) {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_367;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_367);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(6) span(7) datatype(Int32)
                                                            uint8_t* _tmp_368 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_368;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000279\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                            }
                                                        }
                                                        else if(_choice_19 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_369;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_369);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) datatype(Int32)
                                                            uint8_t* _tmp_370 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_370;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000280\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                            }
                                                        }
                                                        else if(_choice_19 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_371;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_371);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) datatype(Int32)
                                                            uint8_t* _tmp_372 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_372;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000281\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                            }
                                                        }
                                                        else if(_choice_19 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_373;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_373);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(3) span(4) datatype(Int32)
                                                            uint8_t* _tmp_374 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_374;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000282\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(_choice_19) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].eu_vehicle_category_code[0]'; message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_18 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                    {
                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_375;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].iso3833_vehicle_type.push_back(_tmp_375);
                                                    
                                                        // Integer
                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                        uint8_t* _tmp_376 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_376;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].iso3833_vehicle_type[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000283\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].iso3833_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].iso3833_vehicle_type[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_18 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                    {
                                                        dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_377;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value.push_back(_tmp_377);
                                                    
                                                            // EnvironmentalCharacteristics  SEQUENCE
                                                                //  euroValue  EuroValue      
                                                                //  copValue   CopValue       
                                                            
                                                            // Field name: euro_value
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) datatype(Int32)
                                                            uint8_t* _tmp_378 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_378;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].euro_value.value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000284\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].euro_value.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].euro_value.value);
                                                            }
                                                            
                                                            // Field name: cop_value
                                                            // Enumerated
                                                            // INT32  min(0) max(8) span(9) datatype(Int32)
                                                            uint8_t* _tmp_379 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_379;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].cop_value.value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000285\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].cop_value.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].euro_and_co2value[0].cop_value.value);
                                                            }
                                                    }
                                                    else if(_choice_18 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                    {
                                                        dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_380;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].engine_characteristics.push_back(_tmp_380);
                                                    
                                                        // Integer
                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                        uint8_t* _tmp_381 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_381;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].engine_characteristics[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000286\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].engine_characteristics[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].engine_characteristics[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_18 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::LoadType _tmp_382;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type.push_back(_tmp_382);
                                                    
                                                            // LoadType  SEQUENCE
                                                                //  goodsType            GoodsType                
                                                                //  dangerousGoodsType   DangerousGoodsBasic      
                                                                //  specialTransportType SpecialTransportType     
                                                            
                                                            // Field name: goods_type
                                                            // Integer
                                                            // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                            uint8_t* _ext_flag_137 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000287\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.: " << int(*_ext_flag_137);
                                                            }
                                                            
                                                            if(*_ext_flag_137) {
                                                                uint8_t* _tmp_384 = (uint8_t*) buffer++;
                                                                
                                                                if(*_tmp_384) {
                                                                    uint64_t* _tmp_385 = (uint64_t*)buffer; buffer += 8;
                                                                    __aux64__ = *_tmp_385;
                                                                    __aux64__ += INT64_MIN;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value = __aux64__;
                                                                }
                                                                else
                                                                {
                                                                    uint32_t* _tmp_385 = (uint32_t*) buffer; buffer += 4;
                                                                    __aux64__ = *_tmp_385;
                                                                    __aux64__ += INT32_MIN;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value = __aux64__;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                uint8_t* _tmp_383 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_383;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value = __aux64__;
                                                            
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000288\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                            }
                                                            
                                                            // Field name: dangerous_goods_type
                                                            // Enumerated
                                                            // INT32  min(0) max(19) span(20) datatype(Int32)
                                                            uint8_t* _tmp_386 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_386;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].dangerous_goods_type.value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000289\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].dangerous_goods_type.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].dangerous_goods_type.value);
                                                            }
                                                            
                                                            // Field name: special_transport_type
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            uint8_t* _tmp_387 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_387 + 4;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000290\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].special_transport_type.value: " << __aux64__;
                                                            
                                                            int _if__tmp_387 = __aux64__;
                                                            for(int e = 0; e < _if__tmp_387; e++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].special_transport_type.values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].special_transport_type.values[e] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                    }
                                                    else if(_choice_18 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                    {
                                                        its_container_v1_its_container_msgs::msg::VehicleRole _tmp_388;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].usage.push_back(_tmp_388);
                                                    
                                                        // Enumerated
                                                        // INT32  min(0) max(15) span(16) datatype(Int32)
                                                        uint8_t* _tmp_389 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_389;
                                                        __aux64__ += 0;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].usage[0].value = __aux64__;
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000291\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].usage[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].equal_to.elements[d].usage[0].value);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        uint16_t* _tmp_390 = (uint16_t*)buffer;  // OpenType length
                                                        buffer += 2 + int(*_tmp_390);            // Ignoring opentype data
                                                    }
                                                }
                                                
                                                // Field name: not_equal_to
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(4) span(4)
                                                uint8_t* _ext_flag_140 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000292\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.: " << int(*_ext_flag_140);
                                                }
                                                
                                                int16_t* _tmp_391 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_391;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_391 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000293\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to. size: " << int(*_tmp_391);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int f = 0; f < _if__tmp_391; f++) {
                                                    dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_f;  // CHOICE
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements.push_back(seqof_f);
                                                
                                                    // Choice
                                                    uint8_t* _ext_flag_141 = (uint8_t*)buffer++; // ext flag
                                                    
                                                       // #0  simpleVehicleType   StationType   
                                                       // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                       // #2  iso3833VehicleType   Iso3833VehicleType   
                                                       // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                       // #4  engineCharacteristics   EngineCharacteristics   
                                                       // #5  loadType   LoadType   
                                                       // #6  usage   VehicleRole   
                                                    uint8_t _choice_20 = *(buffer++);
                                                    
                                                    if(*_ext_flag_141)
                                                        _choice_20 += 6 + 1; // Ext addition
                                                    
                                                    if(_choice_20 == 0) {
                                                        its_container_v1_its_container_msgs::msg::StationType _tmp_392;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].simple_vehicle_type.push_back(_tmp_392);
                                                    
                                                        // Integer
                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                        uint8_t* _tmp_393 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_393;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].simple_vehicle_type[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000294\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].simple_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].simple_vehicle_type[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_20 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                    {
                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_394;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code.push_back(_tmp_394);
                                                    
                                                        // Choice
                                                           // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                           // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                           // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                           // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                        uint8_t _choice_21 = *(buffer++);
                                                        
                                                        if(_choice_21 == 0) {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_395;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_395);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(6) span(7) datatype(Int32)
                                                            uint8_t* _tmp_396 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_396;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000295\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                            }
                                                        }
                                                        else if(_choice_21 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_397;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_397);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) datatype(Int32)
                                                            uint8_t* _tmp_398 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_398;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000296\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                            }
                                                        }
                                                        else if(_choice_21 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_399;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_399);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) datatype(Int32)
                                                            uint8_t* _tmp_400 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_400;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000297\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                            }
                                                        }
                                                        else if(_choice_21 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_401;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_401);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(3) span(4) datatype(Int32)
                                                            uint8_t* _tmp_402 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_402;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000298\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(_choice_21) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].eu_vehicle_category_code[0]'; message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_20 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                    {
                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_403;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].iso3833_vehicle_type.push_back(_tmp_403);
                                                    
                                                        // Integer
                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                        uint8_t* _tmp_404 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_404;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].iso3833_vehicle_type[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000299\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].iso3833_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].iso3833_vehicle_type[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_20 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                    {
                                                        dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_405;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value.push_back(_tmp_405);
                                                    
                                                            // EnvironmentalCharacteristics  SEQUENCE
                                                                //  euroValue  EuroValue      
                                                                //  copValue   CopValue       
                                                            
                                                            // Field name: euro_value
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) datatype(Int32)
                                                            uint8_t* _tmp_406 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_406;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].euro_value.value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000300\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].euro_value.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].euro_value.value);
                                                            }
                                                            
                                                            // Field name: cop_value
                                                            // Enumerated
                                                            // INT32  min(0) max(8) span(9) datatype(Int32)
                                                            uint8_t* _tmp_407 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_407;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].cop_value.value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000301\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].cop_value.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].euro_and_co2value[0].cop_value.value);
                                                            }
                                                    }
                                                    else if(_choice_20 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                    {
                                                        dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_408;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].engine_characteristics.push_back(_tmp_408);
                                                    
                                                        // Integer
                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                        uint8_t* _tmp_409 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_409;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].engine_characteristics[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000302\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].engine_characteristics[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].engine_characteristics[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_20 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::LoadType _tmp_410;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type.push_back(_tmp_410);
                                                    
                                                            // LoadType  SEQUENCE
                                                                //  goodsType            GoodsType                
                                                                //  dangerousGoodsType   DangerousGoodsBasic      
                                                                //  specialTransportType SpecialTransportType     
                                                            
                                                            // Field name: goods_type
                                                            // Integer
                                                            // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                            uint8_t* _ext_flag_149 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000303\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.: " << int(*_ext_flag_149);
                                                            }
                                                            
                                                            if(*_ext_flag_149) {
                                                                uint8_t* _tmp_412 = (uint8_t*) buffer++;
                                                                
                                                                if(*_tmp_412) {
                                                                    uint64_t* _tmp_413 = (uint64_t*)buffer; buffer += 8;
                                                                    __aux64__ = *_tmp_413;
                                                                    __aux64__ += INT64_MIN;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value = __aux64__;
                                                                }
                                                                else
                                                                {
                                                                    uint32_t* _tmp_413 = (uint32_t*) buffer; buffer += 4;
                                                                    __aux64__ = *_tmp_413;
                                                                    __aux64__ += INT32_MIN;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value = __aux64__;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                uint8_t* _tmp_411 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_411;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value = __aux64__;
                                                            
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000304\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                            }
                                                            
                                                            // Field name: dangerous_goods_type
                                                            // Enumerated
                                                            // INT32  min(0) max(19) span(20) datatype(Int32)
                                                            uint8_t* _tmp_414 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_414;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].dangerous_goods_type.value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000305\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].dangerous_goods_type.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].dangerous_goods_type.value);
                                                            }
                                                            
                                                            // Field name: special_transport_type
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            uint8_t* _tmp_415 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_415 + 4;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000306\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].special_transport_type.value: " << __aux64__;
                                                            
                                                            int _if__tmp_415 = __aux64__;
                                                            for(int g = 0; g < _if__tmp_415; g++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].special_transport_type.values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].special_transport_type.values[g] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                    }
                                                    else if(_choice_20 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                    {
                                                        its_container_v1_its_container_msgs::msg::VehicleRole _tmp_416;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].usage.push_back(_tmp_416);
                                                    
                                                        // Enumerated
                                                        // INT32  min(0) max(15) span(16) datatype(Int32)
                                                        uint8_t* _tmp_417 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_417;
                                                        __aux64__ += 0;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].usage[0].value = __aux64__;
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000307\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].usage[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].not_equal_to.elements[f].usage[0].value);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        uint16_t* _tmp_418 = (uint16_t*)buffer;  // OpenType length
                                                        buffer += 2 + int(*_tmp_418);            // Ignoring opentype data
                                                    }
                                                }
                                                
                                                // Field name: ranges
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(4) span(4)
                                                uint8_t* _ext_flag_152 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000308\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.: " << int(*_ext_flag_152);
                                                }
                                                
                                                int16_t* _tmp_419 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_419;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_419 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000309\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges. size: " << int(*_tmp_419);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int h = 0; h < _if__tmp_419; h++) {
                                                    dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRanges seqof_h;  // SEQUENCE
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements.push_back(seqof_h);
                                                
                                                        // VehicleCharacteristicsRanges  SEQUENCE
                                                            //  comparisonOperator ComparisonOperator                      
                                                            //  limits             VehicleCharacteristicsRanges_limits     
                                                        
                                                        // Field name: comparison_operator
                                                        // Integer
                                                        // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                                        uint8_t* _tmp_420 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_420;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].comparison_operator.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000310\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].comparison_operator.value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].comparison_operator.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].comparison_operator.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].comparison_operator.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        // Field name: limits
                                                        // Choice
                                                        uint8_t* _ext_flag_153 = (uint8_t*)buffer++; // ext flag
                                                        
                                                           // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles   
                                                           // #1  vehicleDimensions   VehicleDimensions   
                                                           // #2  vehicleWeightLimits   VehicleWeightLimits   
                                                           // #3  axleWeightLimits   AxleWeightLimits   
                                                           // #4  passengerCapacity   PassengerCapacity   
                                                           // #5  exhaustEmissionValues   ExhaustEmissionValues   
                                                           // #6  dieselEmissionValues   DieselEmissionValues   
                                                           // #7  soundLevel   SoundLevel   
                                                        uint8_t _choice_22 = *(buffer++);
                                                        
                                                        if(*_ext_flag_153)
                                                            _choice_22 += 7 + 1; // Ext addition
                                                        
                                                        if(_choice_22 == 0) {
                                                            dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRangesLimitsNumberOfAxles _tmp_421;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.number_of_axles.push_back(_tmp_421);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                            uint8_t* _tmp_422 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_422;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.number_of_axles[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000311\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.number_of_axles[0].value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.number_of_axles[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.number_of_axles[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.number_of_axles[0].value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_22 == 1)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_dimensions)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::VehicleDimensions _tmp_423;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions.push_back(_tmp_423);
                                                        
                                                                // VehicleDimensions  SEQUENCE
                                                                    //  vehicleLengthOverall Int1           
                                                                    //  vehicleHeigthOverall Int1           
                                                                    //  vehicleWidthOverall  Int1           
                                                                
                                                                // Field name: vehicle_length_overall
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_424 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_424;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_length_overall.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000312\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: vehicle_heigth_overall
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_425 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_425;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_heigth_overall.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000313\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: vehicle_width_overall
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_426 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_426;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_width_overall.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000314\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_22 == 2)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_weight_limits)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::VehicleWeightLimits _tmp_427;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits.push_back(_tmp_427);
                                                        
                                                                // VehicleWeightLimits  SEQUENCE
                                                                    //  vehicleMaxLadenWeight     Int2           
                                                                    //  vehicleTrainMaximumWeight Int2           
                                                                    //  vehicleWeightUnladen      Int2           
                                                                
                                                                // Field name: vehicle_max_laden_weight
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_428 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_428;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000315\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: vehicle_train_maximum_weight
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_429 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_429;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000316\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: vehicle_weight_unladen
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_430 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_430;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000317\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_22 == 3)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(axle_weight_limits)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::AxleWeightLimits _tmp_431;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits.push_back(_tmp_431);
                                                        
                                                                // AxleWeightLimits  SEQUENCE
                                                                    //  maxLadenweightOnAxle1 Int2           
                                                                    //  maxLadenweightOnAxle2 Int2           
                                                                    //  maxLadenweightOnAxle3 Int2           
                                                                    //  maxLadenweightOnAxle4 Int2           
                                                                    //  maxLadenweightOnAxle5 Int2           
                                                                
                                                                // Field name: max_ladenweight_on_axle1
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_432 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_432;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000318\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: max_ladenweight_on_axle2
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_433 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_433;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000319\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: max_ladenweight_on_axle3
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_434 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_434;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000320\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: max_ladenweight_on_axle4
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_435 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_435;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000321\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: max_ladenweight_on_axle5
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_436 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_436;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000322\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_22 == 4)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(passenger_capacity)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::PassengerCapacity _tmp_437;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity.push_back(_tmp_437);
                                                        
                                                                // PassengerCapacity  SEQUENCE
                                                                    //  numberOfSeats          Int1           
                                                                    //  numberOfStandingPlaces Int1           
                                                                
                                                                // Field name: number_of_seats
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_438 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_438;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_seats.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000323\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_seats.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: number_of_standing_places
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_439 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_439;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_standing_places.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000324\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_22 == 5)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(exhaust_emission_values)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::ExhaustEmissionValues _tmp_440;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values.push_back(_tmp_440);
                                                        
                                                                // ExhaustEmissionValues  SEQUENCE
                                                                    //  unitType      UnitType                             
                                                                    //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                    //  emissionHC    Int2                                 
                                                                    //  emissionNOX   Int2                                 
                                                                    //  emissionHCNOX Int2                                 
                                                                
                                                                // Field name: unit_type
                                                                // Enumerated
                                                                // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                uint8_t* _tmp_441 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_441;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].unit_type.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000325\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].unit_type.value);
                                                                }
                                                                
                                                                // Field name: emission_co
                                                                // Integer
                                                                // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                uint16_t* _tmp_442 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_442;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_co.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000326\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_co.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: emission_hc
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_443 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_443;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hc.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000327\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hc.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: emission_nox
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_444 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_444;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_nox.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000328\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_nox.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: emission_hcnox
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_445 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_445;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hcnox.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000329\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_22 == 6)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(diesel_emission_values)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::DieselEmissionValues _tmp_446;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values.push_back(_tmp_446);
                                                        
                                                                // DieselEmissionValues  SEQUENCE
                                                                    //  particulate     DieselEmissionValues_particulate     
                                                                    //  absorptionCoeff Int2                                 
                                                                
                                                                // Field name: particulate
                                                                    // DieselEmissionValues_particulate  SEQUENCE
                                                                        //  unitType   UnitType                                   
                                                                        //  value      DieselEmissionValues_particulate_value     
                                                                    
                                                                    // Field name: unit_type
                                                                    // Enumerated
                                                                    // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                    uint8_t* _tmp_447 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_447;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.unit_type.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000330\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                    }
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                    uint16_t* _tmp_448 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_448;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000331\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                        return false;
                                                                    }
                                                                
                                                                // Field name: absorption_coeff
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_449 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_449;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].absorption_coeff.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000332\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_22 == 7)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(sound_level)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::SoundLevel _tmp_450;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level.push_back(_tmp_450);
                                                        
                                                                // SoundLevel  SEQUENCE
                                                                    //  soundstationary Int1           
                                                                    //  sounddriveby    Int1           
                                                                
                                                                // Field name: soundstationary
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_451 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_451;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].soundstationary.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000333\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].soundstationary.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].soundstationary.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: sounddriveby
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_452 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_452;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].sounddriveby.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000334\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].sounddriveby.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].sounddriveby.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].vehicle_characteristics[0].elements[r].train[0].ranges.elements[h].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else
                                                        {
                                                            uint16_t* _tmp_453 = (uint16_t*)buffer;  // OpenType length
                                                            buffer += 2 + int(*_tmp_453);            // Ignoring opentype data
                                                        }
                                                }
                                        }
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics.size() != 0) {
                                // Field name: driver_characteristics
                                // Integer
                                // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                uint8_t* _tmp_454 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_454;
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics[0].value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000335\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics[0].value) << 
                                                 " ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics[0].value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].driver_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                    return false;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id.size() != 0) {
                                // Field name: layout_id
                                // Integer
                                // UINT8  min(1) max(4) span(4) datatype(UInt8)
                                uint8_t* _ext_flag_156 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000336\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].: " << int(*_ext_flag_156);
                                }
                                
                                if(*_ext_flag_156) {
                                    uint8_t* _tmp_456 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_456) {
                                        uint64_t* _tmp_457 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_457;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_457 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_457;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_455 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_455;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000337\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value) << 
                                                     " ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].layout_id[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                        return false;
                                    }
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id.size() != 0) {
                                // Field name: pre_storedlayout_id
                                // Integer
                                // UINT8  min(1) max(64) span(64) datatype(UInt8)
                                uint8_t* _ext_flag_157 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000338\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].: " << int(*_ext_flag_157);
                                }
                                
                                if(*_ext_flag_157) {
                                    uint8_t* _tmp_459 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_459) {
                                        uint64_t* _tmp_460 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_460;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_460 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_460;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_458 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_458;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000339\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value) << 
                                                     " ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 64) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].pre_storedlayout_id[0].value' " << (__aux64__) << " exceeds max allowable (64); message dropped.";
                                        return false;
                                    }
                                    
                                }
                            }
                            
                            // Field name: road_sign_codes
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(4) span(4)
                            uint8_t* _ext_flag_158 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000340\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.: " << int(*_ext_flag_158);
                            }
                            
                            int16_t* _tmp_461 = (int16_t*)buffer;
                            buffer += 2;
                            __aux64__ = *_tmp_461;
                            __aux64__ += 1;     // +min
                            
                            int _if__tmp_461 = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000341\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes. size: " << int(*_tmp_461);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                return false;
                            }
                            
                            
                            for(int i = 0; i < _if__tmp_461; i++) {
                                dsrc_v2_ivi_msgs::msg::RSCode seqof_i;  // SEQUENCE
                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements.push_back(seqof_i);
                            
                                    // RSCode  SEQUENCE
                                        //  layoutComponentId RSCode_layoutComponentId   OPTIONAL  
                                        //  code              RSCode_code                  
                                    if(*(buffer++)) { 
                                        dsrc_v2_ivi_msgs::msg::RSCodeLayoutComponentId _tmp_462;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id.push_back(_tmp_462);
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000342\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id " << tools::green("present");
                                    }
                                    
                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id.size() != 0) {
                                        // Field name: layout_component_id
                                        // Integer
                                        // UINT8  min(1) max(4) span(4) datatype(UInt8)
                                        uint8_t* _ext_flag_159 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].
                                        
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m000343\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].: " << int(*_ext_flag_159);
                                        }
                                        
                                        if(*_ext_flag_159) {
                                            uint8_t* _tmp_464 = (uint8_t*) buffer++;
                                            
                                            if(*_tmp_464) {
                                                uint64_t* _tmp_465 = (uint64_t*)buffer; buffer += 8;
                                                __aux64__ = *_tmp_465;
                                                __aux64__ += INT64_MIN;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value = __aux64__;
                                            }
                                            else
                                            {
                                                uint32_t* _tmp_465 = (uint32_t*) buffer; buffer += 4;
                                                __aux64__ = *_tmp_465;
                                                __aux64__ += INT32_MIN;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value = __aux64__;
                                            }
                                        }
                                        else
                                        {
                                            uint8_t* _tmp_463 = (uint8_t*) buffer++;
                                            __aux64__ = *_tmp_463;
                                            __aux64__ += 1;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value = __aux64__;
                                        
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000344\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value) << 
                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].layout_component_id[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                return false;
                                            }
                                            
                                        }
                                    }
                                    
                                    // Field name: code
                                    // Choice
                                    uint8_t* _ext_flag_160 = (uint8_t*)buffer++; // ext flag
                                    
                                       // #0  viennaConvention   VcCode   
                                       // #1  iso14823   ISO14823Code   
                                       // #2  itisCodes   RSCode_code_itisCodes   
                                       // #3  anyCatalogue   AnyCatalogue   
                                    uint8_t _choice_23 = *(buffer++);
                                    
                                    if(*_ext_flag_160)
                                        _choice_23 += 3 + 1; // Ext addition
                                    
                                    if(_choice_23 == 0) {
                                        dsrc_v2_ivi_msgs::msg::VcCode _tmp_466;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention.push_back(_tmp_466);
                                    
                                            // VcCode  SEQUENCE
                                                //  roadSignClass VcClass                 
                                                //  roadSignCode  VcCode_roadSignCode     
                                                //  vcOption      VcOption                
                                                //  validity      VcCode_validity       OPTIONAL  
                                                //  value         VcCode_value          OPTIONAL  
                                                //  unit          RSCUnit               OPTIONAL  
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::VcCodeValidity _tmp_467;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity.push_back(_tmp_467);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000345\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::VcCodeValue _tmp_468;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value.push_back(_tmp_468);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000346\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::RSCUnit _tmp_469;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit.push_back(_tmp_469);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000347\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit " << tools::green("present");
                                            }
                                            
                                            // Field name: road_sign_class
                                            // Integer
                                            // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                            uint8_t* _tmp_470 = (uint8_t*) buffer++;
                                            __aux64__ = *_tmp_470;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_class.value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000348\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_class.value) << 
                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_class.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_class.value);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_class.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_class.value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                return false;
                                            }
                                            
                                            // Field name: road_sign_code
                                            // Integer
                                            // UINT8  min(1) max(64) span(64) datatype(UInt8)
                                            uint8_t* _tmp_471 = (uint8_t*) buffer++;
                                            __aux64__ = *_tmp_471;
                                            __aux64__ += 1;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_code.value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000349\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_code.value) << 
                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_code.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_code.value);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_code.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 64) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].road_sign_code.value' " << (__aux64__) << " exceeds max allowable (64); message dropped.";
                                                return false;
                                            }
                                            
                                            // Field name: vc_option
                                            // Integer
                                            // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                            uint8_t* _tmp_472 = (uint8_t*) buffer++;
                                            __aux64__ = *_tmp_472;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].vc_option.value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000350\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].vc_option.value) << 
                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].vc_option.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].vc_option.value);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].vc_option.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].vc_option.value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                return false;
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity.size() != 0) {
                                                // Field name: validity
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8)
                                                uint8_t* _ext_flag_161 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000351\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].: " << int(*_ext_flag_161);
                                                }
                                                
                                                int16_t* _tmp_473 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_473;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_473 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000352\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0]. size: " << int(*_tmp_473);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int j = 0; j < _if__tmp_473; j++) {
                                                    dsrc_v2_ivi_msgs::msg::DTM seqof_j;  // SEQUENCE
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements.push_back(seqof_j);
                                                
                                                        // DTM  SEQUENCE
                                                            //  year        DTM_year          OPTIONAL  
                                                            //  month_day   DTM_month_day     OPTIONAL  
                                                            //  pmd         PMD               OPTIONAL  
                                                            //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                            //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                            //  period      HoursMinutes      OPTIONAL  
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::DTMYear _tmp_474;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year.push_back(_tmp_474);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000353\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year " << tools::green("present");
                                                        }
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::DTMMonthDay _tmp_475;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day.push_back(_tmp_475);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000354\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day " << tools::green("present");
                                                        }
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::PMD _tmp_476;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd.push_back(_tmp_476);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000355\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd " << tools::green("present");
                                                        }
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::DTMHourMinutes _tmp_477;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes.push_back(_tmp_477);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000356\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes " << tools::green("present");
                                                        }
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::DayOfWeek _tmp_478;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week.push_back(_tmp_478);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000357\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week " << tools::green("present");
                                                        }
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::HoursMinutes _tmp_479;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period.push_back(_tmp_479);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000358\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period " << tools::green("present");
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year.size() != 0) {
                                                            // Field name: year
                                                                // DTM_year  SEQUENCE
                                                                    //  syr        DTM_year_syr     
                                                                    //  eyr        DTM_year_eyr     
                                                                
                                                                // Field name: syr
                                                                // Integer
                                                                // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                uint8_t* _ext_flag_162 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000359\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.: " << int(*_ext_flag_162);
                                                                }
                                                                
                                                                if(*_ext_flag_162) {
                                                                    uint8_t* _tmp_481 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_481) {
                                                                        uint64_t* _tmp_482 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_482;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_482 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_482;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_480 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_480;
                                                                    __aux64__ += 2000;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000360\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].syr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                                
                                                                // Field name: eyr
                                                                // Integer
                                                                // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                uint8_t* _ext_flag_163 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000361\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.: " << int(*_ext_flag_163);
                                                                }
                                                                
                                                                if(*_ext_flag_163) {
                                                                    uint8_t* _tmp_484 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_484) {
                                                                        uint64_t* _tmp_485 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_485;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_485 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_485;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_483 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_483;
                                                                    __aux64__ += 2000;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000362\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].year[0].eyr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day.size() != 0) {
                                                            // Field name: month_day
                                                                // DTM_month_day  SEQUENCE
                                                                    //  smd        MonthDay       
                                                                    //  emd        MonthDay       
                                                                
                                                                // Field name: smd
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    
                                                                    // Field name: month
                                                                    // Integer
                                                                    // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                    uint8_t* _tmp_486 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_486;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.month.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000363\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.month.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.month.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: day
                                                                    // Integer
                                                                    // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                    uint8_t* _tmp_487 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_487;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.day.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000364\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.day.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.day.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].smd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                        return false;
                                                                    }
                                                                
                                                                // Field name: emd
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    
                                                                    // Field name: month
                                                                    // Integer
                                                                    // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                    uint8_t* _tmp_488 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_488;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.month.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000365\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.month.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.month.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: day
                                                                    // Integer
                                                                    // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                    uint8_t* _tmp_489 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_489;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.day.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000366\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.day.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.day.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].month_day[0].emd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                        return false;
                                                                    }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd.size() != 0) {
                                                            // Field name: pmd
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            uint8_t* _tmp_490 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_490 + 4;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000367\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd[0].value: " << __aux64__;
                                                            
                                                            int _if__tmp_490 = __aux64__;
                                                            for(int k = 0; k < _if__tmp_490; k++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd[0].values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd[0].values[k] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd[0].value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].pmd[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes.size() != 0) {
                                                            // Field name: hour_minutes
                                                                // DTM_hourMinutes  SEQUENCE
                                                                    //  shm        HoursMinutes     
                                                                    //  ehm        HoursMinutes     
                                                                
                                                                // Field name: shm
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_491 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_491;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000368\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_492 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_492;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000369\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].shm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                                
                                                                // Field name: ehm
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_493 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_493;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000370\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_494 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_494;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000371\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week.size() != 0) {
                                                            // Field name: day_of_week
                                                            // BitString
                                                            // BIT_STRING  min(8) max(8) span(1)
                                                            uint8_t* _tmp_495 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_495 + 8;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000372\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week[0].value: " << __aux64__;
                                                            
                                                            int _if__tmp_495 = __aux64__;
                                                            for(int l = 0; l < _if__tmp_495; l++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week[0].values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week[0].values[l] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week[0].value' " << (__aux64__) << " is less than allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].day_of_week[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period.size() != 0) {
                                                            // Field name: period
                                                                // HoursMinutes  SEQUENCE
                                                                    //  hours      HoursMinutes_hours     
                                                                    //  mins       HoursMinutes_mins      
                                                                
                                                                // Field name: hours
                                                                // Integer
                                                                // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                uint8_t* _tmp_496 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_496;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].hours.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000373\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].hours.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].hours.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: mins
                                                                // Integer
                                                                // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                uint8_t* _tmp_497 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_497;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].mins.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000374\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].mins.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].mins.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].validity[0].elements[j].period[0].mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value.size() != 0) {
                                                // Field name: value
                                                // Integer
                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                uint16_t* _tmp_498 = (uint16_t*) buffer; buffer += 2;
                                                __aux64__ = *_tmp_498;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value[0].value = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000375\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value[0].value) << 
                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value[0].value;
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].value[0].value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                    return false;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit.size() != 0) {
                                                // Field name: unit
                                                // Integer
                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                uint8_t* _tmp_499 = (uint8_t*) buffer++;
                                                __aux64__ = *_tmp_499;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit[0].value = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000376\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit[0].value) << 
                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit[0].value);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.vienna_convention[0].unit[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                    return false;
                                                }
                                            }
                                    }
                                    else if(_choice_23 == 1)  // CHOICE RSCode_code  fieldName(iso14823)
                                    {
                                        dsrc_v2_ivi_msgs::msg::ISO14823Code _tmp_500;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823.push_back(_tmp_500);
                                    
                                            // ISO14823Code  SEQUENCE
                                                //  pictogramCode ISO14823Code_pictogramCode     
                                                //  attributes    ISO14823Attributes           OPTIONAL  
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::ISO14823Attributes _tmp_501;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes.push_back(_tmp_501);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000377\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes " << tools::green("present");
                                            }
                                            
                                            // Field name: pictogram_code
                                                // ISO14823Code_pictogramCode  SEQUENCE
                                                    //  countryCode           ISO14823Code_pictogramCode_countryCode             OPTIONAL  
                                                    //  serviceCategoryCode   ISO14823Code_pictogramCode_serviceCategoryCode       
                                                    //  pictogramCategoryCode ISO14823Code_pictogramCode_pictogramCategoryCode     
                                                if(*(buffer++)) { 
                                                    dsrc_v2_ivi_msgs::msg::ISO14823CodePictogramCodeCountryCode _tmp_502;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code.push_back(_tmp_502);
                                                
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m000378\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code " << tools::green("present");
                                                }
                                                
                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code.size() != 0) {
                                                    // Field name: country_code
                                                    // OctetString
                                                    // min(2) max(2) span(1)
                                                    uint8_t* _tmp_503 = (uint8_t*)buffer;
                                                    buffer += 1;
                                                    __aux64__ = *_tmp_503 + 2;
                                                    
                                                    int _if__tmp_503 = __aux64__;
                                                    for(int m = 0; m < _if__tmp_503; m++) {
                                                        int8_t* __n__ = (int8_t*)buffer++;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.country_code[0].values.push_back(*__n__);
                                                    }
                                                }
                                                
                                                // Field name: service_category_code
                                                // Choice
                                                uint8_t* _ext_flag_164 = (uint8_t*)buffer++; // ext flag
                                                
                                                   // #0  trafficSignPictogram   ISO14823Code_pictogramCode_serviceCategoryCode_trafficSignPictogram   
                                                   // #1  publicFacilitiesPictogram   ISO14823Code_pictogramCode_serviceCategoryCode_publicFacilitiesPictogram   
                                                   // #2  ambientOrRoadConditionPictogram   ISO14823Code_pictogramCode_serviceCategoryCode_ambientOrRoadConditionPictogram   
                                                uint8_t _choice_24 = *(buffer++);
                                                
                                                if(*_ext_flag_164)
                                                    _choice_24 += 2 + 1; // Ext addition
                                                
                                                if(_choice_24 == 0) {
                                                    dsrc_v2_ivi_msgs::msg::ISO14823CodePictogramCodeServiceCategoryCodeTrafficSignPictogram _tmp_504;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram.push_back(_tmp_504);
                                                
                                                    // Enumerated
                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                    uint8_t* _ext_flag_165 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000379\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].: " << int(*_ext_flag_165);
                                                    }
                                                    
                                                    uint8_t* _tmp_505 = (uint8_t*) buffer++;
                                                    __aux64__ = *_tmp_505;
                                                    __aux64__ += 0;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value = __aux64__;
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000380\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value) << 
                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value);
                                                    }
                                                }
                                                else if(_choice_24 == 1)  // CHOICE ISO14823Code_pictogramCode_serviceCategoryCode  fieldName(public_facilities_pictogram)
                                                {
                                                    dsrc_v2_ivi_msgs::msg::ISO14823CodePictogramCodeServiceCategoryCodePublicFacilitiesPictogram _tmp_506;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram.push_back(_tmp_506);
                                                
                                                    // Enumerated
                                                    // INT32  min(0) max(0) span(1) datatype(Int32)
                                                    uint8_t* _ext_flag_166 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000381\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].: " << int(*_ext_flag_166);
                                                    }
                                                    
                                                    uint8_t* _tmp_507 = (uint8_t*) buffer++;
                                                    __aux64__ = *_tmp_507;
                                                    __aux64__ += 0;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value = __aux64__;
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value' " << (__aux64__) << " exceeds max allowable (0); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000382\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value) << 
                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value);
                                                    }
                                                }
                                                else if(_choice_24 == 2)  // CHOICE ISO14823Code_pictogramCode_serviceCategoryCode  fieldName(ambient_or_road_condition_pictogram)
                                                {
                                                    dsrc_v2_ivi_msgs::msg::ISO14823CodePictogramCodeServiceCategoryCodeAmbientOrRoadConditionPictogram _tmp_508;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram.push_back(_tmp_508);
                                                
                                                    // Enumerated
                                                    // INT32  min(0) max(1) span(2) datatype(Int32)
                                                    uint8_t* _ext_flag_167 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000383\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].: " << int(*_ext_flag_167);
                                                    }
                                                    
                                                    uint8_t* _tmp_509 = (uint8_t*) buffer++;
                                                    __aux64__ = *_tmp_509;
                                                    __aux64__ += 0;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value = __aux64__;
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000384\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value) << 
                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value);
                                                    }
                                                }
                                                else
                                                {
                                                    uint16_t* _tmp_510 = (uint16_t*)buffer;  // OpenType length
                                                    buffer += 2 + int(*_tmp_510);            // Ignoring opentype data
                                                }
                                                
                                                // Field name: pictogram_category_code
                                                    // ISO14823Code_pictogramCode_pictogramCategoryCode  SEQUENCE
                                                        //  nature       ISO14823Code_pictogramCode_pictogramCategoryCode_nature           
                                                        //  serialNumber ISO14823Code_pictogramCode_pictogramCategoryCode_serialNumber     
                                                    
                                                    // Field name: nature
                                                    // Integer
                                                    // UINT8  min(1) max(9) span(9) datatype(UInt8)
                                                    uint8_t* _tmp_511 = (uint8_t*) buffer++;
                                                    __aux64__ = *_tmp_511;
                                                    __aux64__ += 1;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000385\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value) << 
                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 9) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value' " << (__aux64__) << " exceeds max allowable (9); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    // Field name: serial_number
                                                    // Integer
                                                    // UINT8  min(0) max(99) span(100) datatype(UInt8)
                                                    uint8_t* _tmp_512 = (uint8_t*) buffer++;
                                                    __aux64__ = *_tmp_512;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000386\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value) << 
                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 99) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value' " << (__aux64__) << " exceeds max allowable (99); message dropped.";
                                                        return false;
                                                    }
                                            
                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes.size() != 0) {
                                                // Field name: attributes
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8)
                                                uint8_t* _ext_flag_168 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000387\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].: " << int(*_ext_flag_168);
                                                }
                                                
                                                int16_t* _tmp_513 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_513;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_513 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000388\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0]. size: " << int(*_tmp_513);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int n = 0; n < _if__tmp_513; n++) {
                                                    dsrc_v2_ivi_msgs::msg::ISO14823AttributesElement seqof_n;  // CHOICE
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements.push_back(seqof_n);
                                                
                                                    // Choice
                                                       // #0  dtm   DTM   
                                                       // #1  edt   EDT   
                                                       // #2  dfl   DFL   
                                                       // #3  ved   VED   
                                                       // #4  spe   SPE   
                                                       // #5  roi   ROI   
                                                       // #6  dbv   DBV   
                                                       // #7  ddd   DDD   
                                                    uint8_t _choice_25 = *(buffer++);
                                                    
                                                    if(_choice_25 == 0) {
                                                        dsrc_v2_ivi_msgs::msg::DTM _tmp_514;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm.push_back(_tmp_514);
                                                    
                                                            // DTM  SEQUENCE
                                                                //  year        DTM_year          OPTIONAL  
                                                                //  month_day   DTM_month_day     OPTIONAL  
                                                                //  pmd         PMD               OPTIONAL  
                                                                //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                                //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                                //  period      HoursMinutes      OPTIONAL  
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DTMYear _tmp_515;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year.push_back(_tmp_515);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000389\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DTMMonthDay _tmp_516;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day.push_back(_tmp_516);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000390\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::PMD _tmp_517;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd.push_back(_tmp_517);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000391\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DTMHourMinutes _tmp_518;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes.push_back(_tmp_518);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000392\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DayOfWeek _tmp_519;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week.push_back(_tmp_519);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000393\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::HoursMinutes _tmp_520;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period.push_back(_tmp_520);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000394\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year.size() != 0) {
                                                                // Field name: year
                                                                    // DTM_year  SEQUENCE
                                                                        //  syr        DTM_year_syr     
                                                                        //  eyr        DTM_year_eyr     
                                                                    
                                                                    // Field name: syr
                                                                    // Integer
                                                                    // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                    uint8_t* _ext_flag_170 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000395\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.: " << int(*_ext_flag_170);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_170) {
                                                                        uint8_t* _tmp_522 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_522) {
                                                                            uint64_t* _tmp_523 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_523;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_523 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_523;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_521 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_521;
                                                                        __aux64__ += 2000;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000396\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].syr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                    // Field name: eyr
                                                                    // Integer
                                                                    // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                    uint8_t* _ext_flag_171 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000397\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.: " << int(*_ext_flag_171);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_171) {
                                                                        uint8_t* _tmp_525 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_525) {
                                                                            uint64_t* _tmp_526 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_526;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_526 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_526;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_524 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_524;
                                                                        __aux64__ += 2000;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000398\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].year[0].eyr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day.size() != 0) {
                                                                // Field name: month_day
                                                                    // DTM_month_day  SEQUENCE
                                                                        //  smd        MonthDay       
                                                                        //  emd        MonthDay       
                                                                    
                                                                    // Field name: smd
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        
                                                                        // Field name: month
                                                                        // Integer
                                                                        // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                        uint8_t* _tmp_527 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_527;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.month.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000399\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.month.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.month.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: day
                                                                        // Integer
                                                                        // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                        uint8_t* _tmp_528 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_528;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.day.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000400\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.day.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.day.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].smd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                            return false;
                                                                        }
                                                                    
                                                                    // Field name: emd
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        
                                                                        // Field name: month
                                                                        // Integer
                                                                        // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                        uint8_t* _tmp_529 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_529;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.month.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000401\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.month.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.month.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: day
                                                                        // Integer
                                                                        // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                        uint8_t* _tmp_530 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_530;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.day.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000402\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.day.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.day.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].month_day[0].emd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                            return false;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd.size() != 0) {
                                                                // Field name: pmd
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                uint8_t* _tmp_531 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_531 + 4;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000403\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd[0].value: " << __aux64__;
                                                                
                                                                int _if__tmp_531 = __aux64__;
                                                                for(int o = 0; o < _if__tmp_531; o++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd[0].values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd[0].values[o] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd[0].value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].pmd[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes.size() != 0) {
                                                                // Field name: hour_minutes
                                                                    // DTM_hourMinutes  SEQUENCE
                                                                        //  shm        HoursMinutes     
                                                                        //  ehm        HoursMinutes     
                                                                    
                                                                    // Field name: shm
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        
                                                                        // Field name: hours
                                                                        // Integer
                                                                        // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                        uint8_t* _tmp_532 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_532;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.hours.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000404\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.hours.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.hours.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: mins
                                                                        // Integer
                                                                        // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                        uint8_t* _tmp_533 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_533;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.mins.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000405\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.mins.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.mins.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].shm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                            return false;
                                                                        }
                                                                    
                                                                    // Field name: ehm
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        
                                                                        // Field name: hours
                                                                        // Integer
                                                                        // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                        uint8_t* _tmp_534 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_534;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.hours.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000406\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.hours.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.hours.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: mins
                                                                        // Integer
                                                                        // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                        uint8_t* _tmp_535 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_535;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.mins.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000407\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.mins.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.mins.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                            return false;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week.size() != 0) {
                                                                // Field name: day_of_week
                                                                // BitString
                                                                // BIT_STRING  min(8) max(8) span(1)
                                                                uint8_t* _tmp_536 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_536 + 8;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000408\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week[0].value: " << __aux64__;
                                                                
                                                                int _if__tmp_536 = __aux64__;
                                                                for(int p = 0; p < _if__tmp_536; p++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week[0].values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week[0].values[p] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week[0].value' " << (__aux64__) << " is less than allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].day_of_week[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period.size() != 0) {
                                                                // Field name: period
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_537 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_537;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000409\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_538 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_538;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000410\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dtm[0].period[0].mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                    }
                                                    else if(_choice_25 == 1)  // CHOICE ISO14823Attributes_element  fieldName(edt)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::EDT _tmp_539;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt.push_back(_tmp_539);
                                                    
                                                            // EDT  SEQUENCE
                                                                //  year        DTM_year            
                                                                //  month_day   DTM_month_day       
                                                                //  pmd         PMD                 
                                                                //  hourMinutes DTM_hourMinutes     
                                                                //  dayOfWeek   DayOfWeek           
                                                                //  period      HoursMinutes        
                                                            
                                                            // Field name: year
                                                                // DTM_year  SEQUENCE
                                                                    //  syr        DTM_year_syr     
                                                                    //  eyr        DTM_year_eyr     
                                                                
                                                                // Field name: syr
                                                                // Integer
                                                                // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                uint8_t* _ext_flag_172 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000411\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.: " << int(*_ext_flag_172);
                                                                }
                                                                
                                                                if(*_ext_flag_172) {
                                                                    uint8_t* _tmp_541 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_541) {
                                                                        uint64_t* _tmp_542 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_542;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_542 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_542;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_540 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_540;
                                                                    __aux64__ += 2000;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000412\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.syr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                                
                                                                // Field name: eyr
                                                                // Integer
                                                                // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                uint8_t* _ext_flag_173 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000413\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.: " << int(*_ext_flag_173);
                                                                }
                                                                
                                                                if(*_ext_flag_173) {
                                                                    uint8_t* _tmp_544 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_544) {
                                                                        uint64_t* _tmp_545 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_545;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_545 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_545;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_543 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_543;
                                                                    __aux64__ += 2000;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000414\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].year.eyr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                            
                                                            // Field name: month_day
                                                                // DTM_month_day  SEQUENCE
                                                                    //  smd        MonthDay       
                                                                    //  emd        MonthDay       
                                                                
                                                                // Field name: smd
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    
                                                                    // Field name: month
                                                                    // Integer
                                                                    // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                    uint8_t* _tmp_546 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_546;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.month.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000415\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.month.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.month.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: day
                                                                    // Integer
                                                                    // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                    uint8_t* _tmp_547 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_547;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.day.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000416\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.day.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.day.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.smd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                        return false;
                                                                    }
                                                                
                                                                // Field name: emd
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    
                                                                    // Field name: month
                                                                    // Integer
                                                                    // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                    uint8_t* _tmp_548 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_548;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.month.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000417\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.month.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.month.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: day
                                                                    // Integer
                                                                    // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                    uint8_t* _tmp_549 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_549;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.day.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000418\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.day.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.day.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].month_day.emd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                        return false;
                                                                    }
                                                            
                                                            // Field name: pmd
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            uint8_t* _tmp_550 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_550 + 4;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000419\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].pmd.value: " << __aux64__;
                                                            
                                                            int _if__tmp_550 = __aux64__;
                                                            for(int q = 0; q < _if__tmp_550; q++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].pmd.values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].pmd.values[q] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].pmd.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].pmd.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: hour_minutes
                                                                // DTM_hourMinutes  SEQUENCE
                                                                    //  shm        HoursMinutes     
                                                                    //  ehm        HoursMinutes     
                                                                
                                                                // Field name: shm
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_551 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_551;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000420\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_552 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_552;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000421\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.shm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                                
                                                                // Field name: ehm
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_553 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_553;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000422\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_554 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_554;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000423\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].hour_minutes.ehm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                            
                                                            // Field name: day_of_week
                                                            // BitString
                                                            // BIT_STRING  min(8) max(8) span(1)
                                                            uint8_t* _tmp_555 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_555 + 8;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000424\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].day_of_week.value: " << __aux64__;
                                                            
                                                            int _if__tmp_555 = __aux64__;
                                                            for(int r = 0; r < _if__tmp_555; r++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].day_of_week.values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].day_of_week.values[r] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].day_of_week.value' " << (__aux64__) << " is less than allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].day_of_week.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: period
                                                                // HoursMinutes  SEQUENCE
                                                                    //  hours      HoursMinutes_hours     
                                                                    //  mins       HoursMinutes_mins      
                                                                
                                                                // Field name: hours
                                                                // Integer
                                                                // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                uint8_t* _tmp_556 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_556;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.hours.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000425\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.hours.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.hours.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: mins
                                                                // Integer
                                                                // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                uint8_t* _tmp_557 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_557;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.mins.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000426\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.mins.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.mins.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].edt[0].period.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                    return false;
                                                                }
                                                    }
                                                    else if(_choice_25 == 2)  // CHOICE ISO14823Attributes_element  fieldName(dfl)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::DFL _tmp_558;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dfl.push_back(_tmp_558);
                                                    
                                                        // Integer
                                                        // UINT8  min(1) max(8) span(8) datatype(UInt8)
                                                        uint8_t* _tmp_559 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_559;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dfl[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000427\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dfl[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dfl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dfl[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dfl[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dfl[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_25 == 3)  // CHOICE ISO14823Attributes_element  fieldName(ved)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::VED _tmp_560;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved.push_back(_tmp_560);
                                                    
                                                            // VED  SEQUENCE
                                                                //  hei        Distance     OPTIONAL  
                                                                //  wid        Distance     OPTIONAL  
                                                                //  vln        Distance     OPTIONAL  
                                                                //  wei        Weight       OPTIONAL  
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Distance _tmp_561;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei.push_back(_tmp_561);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000428\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Distance _tmp_562;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid.push_back(_tmp_562);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000429\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Distance _tmp_563;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln.push_back(_tmp_563);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000430\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Weight _tmp_564;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei.push_back(_tmp_564);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000431\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei.size() != 0) {
                                                                // Field name: hei
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_565 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_565;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000432\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_566 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_566;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000433\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].hei[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid.size() != 0) {
                                                                // Field name: wid
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_567 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_567;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000434\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_568 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_568;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000435\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wid[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln.size() != 0) {
                                                                // Field name: vln
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_569 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_569;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000436\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_570 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_570;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000437\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].vln[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei.size() != 0) {
                                                                // Field name: wei
                                                                    // Weight  SEQUENCE
                                                                        //  value      Weight_value     
                                                                        //  unit       RSCUnit          
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_571 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_571;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000438\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_572 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_572;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000439\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ved[0].wei[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                    }
                                                    else if(_choice_25 == 4)  // CHOICE ISO14823Attributes_element  fieldName(spe)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::SPE _tmp_573;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe.push_back(_tmp_573);
                                                    
                                                            // SPE  SEQUENCE
                                                                //  spm        SPE_spm            OPTIONAL  
                                                                //  mns        SPE_mns            OPTIONAL  
                                                                //  unit       SPE_RSCUnit_unit     
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::SPESpm _tmp_574;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm.push_back(_tmp_574);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000440\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::SPEMns _tmp_575;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns.push_back(_tmp_575);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000441\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm.size() != 0) {
                                                                // Field name: spm
                                                                // Integer
                                                                // UINT8  min(0) max(250) span(251) datatype(UInt8)
                                                                uint8_t* _tmp_576 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_576;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000442\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].spm[0].value' " << (__aux64__) << " exceeds max allowable (250); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns.size() != 0) {
                                                                // Field name: mns
                                                                // Integer
                                                                // UINT8  min(0) max(250) span(251) datatype(UInt8)
                                                                uint8_t* _tmp_577 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_577;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000443\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].mns[0].value' " << (__aux64__) << " exceeds max allowable (250); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            // Field name: unit
                                                            // Integer
                                                            // UINT8  min(0) max(1) span(2) datatype(UInt8)
                                                            uint8_t* _tmp_578 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_578;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].unit.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000444\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].unit.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].unit.value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].spe[0].unit.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                    }
                                                    else if(_choice_25 == 5)  // CHOICE ISO14823Attributes_element  fieldName(roi)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::ROI _tmp_579;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].roi.push_back(_tmp_579);
                                                    
                                                        // Integer
                                                        // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                                        uint8_t* _tmp_580 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_580;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].roi[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000445\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].roi[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].roi[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].roi[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].roi[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].roi[0].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_25 == 6)  // CHOICE ISO14823Attributes_element  fieldName(dbv)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::DBV _tmp_581;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv.push_back(_tmp_581);
                                                    
                                                            // DBV  SEQUENCE
                                                                //  value      Distance_value     
                                                                //  unit       RSCUnit            
                                                            
                                                            // Field name: value
                                                            // Integer
                                                            // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                            uint16_t* _tmp_582 = (uint16_t*) buffer; buffer += 2;
                                                            __aux64__ = *_tmp_582;
                                                            __aux64__ += 1;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].value.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000446\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].value.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].value.value;
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: unit
                                                            // Integer
                                                            // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                            uint8_t* _tmp_583 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_583;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].unit.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000447\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].unit.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].unit.value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].dbv[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                    }
                                                    else if(_choice_25 == 7)  // CHOICE ISO14823Attributes_element  fieldName(ddd)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::DDD _tmp_584;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd.push_back(_tmp_584);
                                                    
                                                            // DDD  SEQUENCE
                                                                //  dcj        DDD_dcj      OPTIONAL  
                                                                //  dcr        DDD_dcr      OPTIONAL  
                                                                //  tpl        DDD_tpl      OPTIONAL  
                                                                //  ioList     DDD_ioList     
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DDDDcj _tmp_585;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj.push_back(_tmp_585);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000448\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DDDDcr _tmp_586;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr.push_back(_tmp_586);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000449\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DDDTpl _tmp_587;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl.push_back(_tmp_587);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000450\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj.size() != 0) {
                                                                // Field name: dcj
                                                                // Integer
                                                                // UINT8  min(1) max(128) span(128) datatype(UInt8)
                                                                uint8_t* _tmp_588 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_588;
                                                                __aux64__ += 1;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000451\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcj[0].value' " << (__aux64__) << " exceeds max allowable (128); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr.size() != 0) {
                                                                // Field name: dcr
                                                                // Integer
                                                                // UINT8  min(1) max(128) span(128) datatype(UInt8)
                                                                uint8_t* _tmp_589 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_589;
                                                                __aux64__ += 1;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000452\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].dcr[0].value' " << (__aux64__) << " exceeds max allowable (128); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl.size() != 0) {
                                                                // Field name: tpl
                                                                // Integer
                                                                // UINT8  min(1) max(128) span(128) datatype(UInt8)
                                                                uint8_t* _tmp_590 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_590;
                                                                __aux64__ += 1;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000453\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].tpl[0].value' " << (__aux64__) << " exceeds max allowable (128); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            // Field name: io_list
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(8) span(8)
                                                            uint8_t* _ext_flag_174 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000454\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.: " << int(*_ext_flag_174);
                                                            }
                                                            
                                                            int16_t* _tmp_591 = (int16_t*)buffer;
                                                            buffer += 2;
                                                            __aux64__ = *_tmp_591;
                                                            __aux64__ += 1;     // +min
                                                            
                                                            int _if__tmp_591 = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000455\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list. size: " << int(*_tmp_591);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            for(int s = 0; s < _if__tmp_591; s++) {
                                                                dsrc_v2_ivi_msgs::msg::DDDIO seqof_s;  // SEQUENCE
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements.push_back(seqof_s);
                                                            
                                                                    // DDD_IO  SEQUENCE
                                                                        //  drn        DDD_IO_drn             
                                                                        //  dp         DDD_IO_dp            OPTIONAL  
                                                                        //  dr         DDD_IO_dr            OPTIONAL  
                                                                        //  rne        DDD_IO_rne           OPTIONAL  
                                                                        //  stnId      DDD_IO_stnId         OPTIONAL  
                                                                        //  stnText    DDD_IO_stnText       OPTIONAL  
                                                                        //  dcp        DistanceOrDuration   OPTIONAL  
                                                                        //  ddp        DistanceOrDuration   OPTIONAL  
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIODp _tmp_592;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp.push_back(_tmp_592);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000456\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIODr _tmp_593;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr.push_back(_tmp_593);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000457\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIORne _tmp_594;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne.push_back(_tmp_594);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000458\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIOStnId _tmp_595;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id.push_back(_tmp_595);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000459\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIOStnText _tmp_596;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text.push_back(_tmp_596);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000460\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DistanceOrDuration _tmp_597;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp.push_back(_tmp_597);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000461\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DistanceOrDuration _tmp_598;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp.push_back(_tmp_598);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000462\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp " << tools::green("present");
                                                                    }
                                                                    
                                                                    // Field name: drn
                                                                    // Integer
                                                                    // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                                    uint8_t* _tmp_599 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_599;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].drn.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000463\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].drn.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].drn.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].drn.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].drn.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].drn.value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp.size() != 0) {
                                                                        // Field name: dp
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                                        uint8_t* _ext_flag_175 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000464\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].: " << int(*_ext_flag_175);
                                                                        }
                                                                        
                                                                        int16_t* _tmp_600 = (int16_t*)buffer;
                                                                        buffer += 2;
                                                                        __aux64__ = *_tmp_600;
                                                                        __aux64__ += 1;     // +min
                                                                        
                                                                        int _if__tmp_600 = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000465\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0]. size: " << int(*_tmp_600);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        for(int t = 0; t < _if__tmp_600; t++) {
                                                                            dsrc_v2_ivi_msgs::msg::DestinationPlace seqof_t;  // SEQUENCE
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements.push_back(seqof_t);
                                                                        
                                                                                // DestinationPlace  SEQUENCE
                                                                                    //  depType    DDD_DEP                      
                                                                                    //  depBlob    DestinationPlace_depBlob   OPTIONAL  
                                                                                    //  plnId      DestinationPlace_plnId     OPTIONAL  
                                                                                    //  plnText    DestinationPlace_plnText   OPTIONAL  
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationPlaceDepBlob _tmp_601;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob.push_back(_tmp_601);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m000466\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob " << tools::green("present");
                                                                                }
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationPlacePlnId _tmp_602;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id.push_back(_tmp_602);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m000467\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id " << tools::green("present");
                                                                                }
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationPlacePlnText _tmp_603;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text.push_back(_tmp_603);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m000468\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text " << tools::green("present");
                                                                                }
                                                                                
                                                                                // Field name: dep_type
                                                                                // Integer
                                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                                uint8_t* _ext_flag_176 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.
                                                                                
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m000469\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.: " << int(*_ext_flag_176);
                                                                                }
                                                                                
                                                                                if(*_ext_flag_176) {
                                                                                    uint8_t* _tmp_605 = (uint8_t*) buffer++;
                                                                                    
                                                                                    if(*_tmp_605) {
                                                                                        uint64_t* _tmp_606 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = *_tmp_606;
                                                                                        __aux64__ += INT64_MIN;
                                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value = __aux64__;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        uint32_t* _tmp_606 = (uint32_t*) buffer; buffer += 4;
                                                                                        __aux64__ = *_tmp_606;
                                                                                        __aux64__ += INT32_MIN;
                                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value = __aux64__;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    uint8_t* _tmp_604 = (uint8_t*) buffer++;
                                                                                    __aux64__ = *_tmp_604;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value = __aux64__;
                                                                                
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m000470\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value) << 
                                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value);
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob.size() != 0) {
                                                                                    // Field name: dep_blob
                                                                                    // OctetString
                                                                                    // Indefinite length
                                                                                    // min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_607 = (uint16_t*)buffer;
                                                                                    buffer += 2;
                                                                                    __aux64__ = *_tmp_607;
                                                                                    
                                                                                    int _if__tmp_607 = __aux64__;
                                                                                    for(int u = 0; u < _if__tmp_607; u++) {
                                                                                        int8_t* __n__ = (int8_t*)buffer++;
                                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].dep_blob[0].values.push_back(*__n__);
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id.size() != 0) {
                                                                                    // Field name: pln_id
                                                                                    // Integer
                                                                                    // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                                    uint16_t* _tmp_608 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = *_tmp_608;
                                                                                    __aux64__ += 1;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id[0].value = __aux64__;
                                                                                    
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m000471\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id[0].value;
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_id[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text.size() != 0) {
                                                                                    // Field name: pln_text
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_609 = (uint16_t*)buffer;
                                                                                    __aux64__ = *_tmp_609;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int _if__tmp_609 = __aux64__;
                                                                                    for(int v = 0; v < _if__tmp_609; v++) {  // DestinationPlace_plnText
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dp[0].elements[t].pln_text[0].value += *__tmp__;
                                                                                    }
                                                                                }
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr.size() != 0) {
                                                                        // Field name: dr
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                                        uint8_t* _ext_flag_177 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000472\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].: " << int(*_ext_flag_177);
                                                                        }
                                                                        
                                                                        int16_t* _tmp_610 = (int16_t*)buffer;
                                                                        buffer += 2;
                                                                        __aux64__ = *_tmp_610;
                                                                        __aux64__ += 1;     // +min
                                                                        
                                                                        int _if__tmp_610 = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000473\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0]. size: " << int(*_tmp_610);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        for(int w = 0; w < _if__tmp_610; w++) {
                                                                            dsrc_v2_ivi_msgs::msg::DestinationRoad seqof_w;  // SEQUENCE
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements.push_back(seqof_w);
                                                                        
                                                                                // DestinationRoad  SEQUENCE
                                                                                    //  derType    DDD_DER                     
                                                                                    //  ronId      DestinationRoad_ronId     OPTIONAL  
                                                                                    //  ronText    DestinationRoad_ronText   OPTIONAL  
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationRoadRonId _tmp_611;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id.push_back(_tmp_611);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m000474\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id " << tools::green("present");
                                                                                }
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationRoadRonText _tmp_612;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text.push_back(_tmp_612);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m000475\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text " << tools::green("present");
                                                                                }
                                                                                
                                                                                // Field name: der_type
                                                                                // Integer
                                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                                uint8_t* _ext_flag_178 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.
                                                                                
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m000476\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.: " << int(*_ext_flag_178);
                                                                                }
                                                                                
                                                                                if(*_ext_flag_178) {
                                                                                    uint8_t* _tmp_614 = (uint8_t*) buffer++;
                                                                                    
                                                                                    if(*_tmp_614) {
                                                                                        uint64_t* _tmp_615 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = *_tmp_615;
                                                                                        __aux64__ += INT64_MIN;
                                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value = __aux64__;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        uint32_t* _tmp_615 = (uint32_t*) buffer; buffer += 4;
                                                                                        __aux64__ = *_tmp_615;
                                                                                        __aux64__ += INT32_MIN;
                                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value = __aux64__;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    uint8_t* _tmp_613 = (uint8_t*) buffer++;
                                                                                    __aux64__ = *_tmp_613;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value = __aux64__;
                                                                                
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m000477\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value) << 
                                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value);
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].der_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id.size() != 0) {
                                                                                    // Field name: ron_id
                                                                                    // Integer
                                                                                    // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                                    uint16_t* _tmp_616 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = *_tmp_616;
                                                                                    __aux64__ += 1;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id[0].value = __aux64__;
                                                                                    
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m000478\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id[0].value;
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_id[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text.size() != 0) {
                                                                                    // Field name: ron_text
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_617 = (uint16_t*)buffer;
                                                                                    __aux64__ = *_tmp_617;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int _if__tmp_617 = __aux64__;
                                                                                    for(int x = 0; x < _if__tmp_617; x++) {  // DestinationRoad_ronText
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dr[0].elements[w].ron_text[0].value += *__tmp__;
                                                                                    }
                                                                                }
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne.size() != 0) {
                                                                        // Field name: rne
                                                                        // Integer
                                                                        // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                        uint16_t* _tmp_618 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_618;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne[0].value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000479\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne[0].value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne[0].value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].rne[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                            return false;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id.size() != 0) {
                                                                        // Field name: stn_id
                                                                        // Integer
                                                                        // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                        uint16_t* _tmp_619 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_619;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id[0].value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000480\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id[0].value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id[0].value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_id[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                            return false;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text.size() != 0) {
                                                                        // Field name: stn_text
                                                                        // Text
                                                                        
                                                                        // Indefinite length
                                                                        // TEXT  min(0) max(16383) span(16384)
                                                                        uint16_t* _tmp_620 = (uint16_t*)buffer;
                                                                        __aux64__ = *_tmp_620;
                                                                        buffer += 2;
                                                                        
                                                                        int _if__tmp_620 = __aux64__;
                                                                        for(int y = 0; y < _if__tmp_620; y++) {  // DDD_IO_stnText
                                                                            char* __tmp__ = (char*)buffer++;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].stn_text[0].value += *__tmp__;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp.size() != 0) {
                                                                        // Field name: dcp
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            
                                                                            // Field name: value
                                                                            // Integer
                                                                            // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                            uint16_t* _tmp_621 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_621;
                                                                            __aux64__ += 1;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].value.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000481\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].value.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: unit
                                                                            // Integer
                                                                            // UINT8  min(2) max(9) span(8) datatype(UInt8)
                                                                            uint8_t* _tmp_622 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_622;
                                                                            __aux64__ += 2;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].unit.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000482\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].unit.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].unit.value' " << (__aux64__) << " is less than allowable (2); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].dcp[0].unit.value' " << (__aux64__) << " exceeds max allowable (9); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp.size() != 0) {
                                                                        // Field name: ddp
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            
                                                                            // Field name: value
                                                                            // Integer
                                                                            // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                            uint16_t* _tmp_623 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_623;
                                                                            __aux64__ += 1;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].value.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000483\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].value.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: unit
                                                                            // Integer
                                                                            // UINT8  min(2) max(9) span(8) datatype(UInt8)
                                                                            uint8_t* _tmp_624 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_624;
                                                                            __aux64__ += 2;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].unit.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000484\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].unit.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].unit.value' " << (__aux64__) << " is less than allowable (2); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n].ddd[0].io_list.elements[s].ddp[0].unit.value' " << (__aux64__) << " exceeds max allowable (9); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                            }
                                                    }
                                                    else
                                                    {
                                                        logger->warning() << "Wrong option (" << static_cast<int>(_choice_25) << ") selected in CHOICE ISO14823Attributes_element in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.iso14823[0].attributes[0].elements[n]'; message dropped.";
                                                        return false;
                                                    }
                                                }
                                            }
                                    }
                                    else if(_choice_23 == 2)  // CHOICE RSCode_code  fieldName(itis_codes)
                                    {
                                        dsrc_v2_ivi_msgs::msg::RSCodeCodeItisCodes _tmp_625;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.itis_codes.push_back(_tmp_625);
                                    
                                        // Integer
                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                        uint16_t* _tmp_626 = (uint16_t*) buffer; buffer += 2;
                                        __aux64__ = *_tmp_626;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.itis_codes[0].value = __aux64__;
                                        
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m000485\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.itis_codes[0].value) << 
                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.itis_codes[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.itis_codes[0].value;
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.itis_codes[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.itis_codes[0].value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                            return false;
                                        }
                                    }
                                    else if(_choice_23 == 3)  // CHOICE RSCode_code  fieldName(any_catalogue)
                                    {
                                        dsrc_v2_ivi_msgs::msg::AnyCatalogue _tmp_627;
                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue.push_back(_tmp_627);
                                    
                                            // AnyCatalogue  SEQUENCE
                                                //  owner         Provider                       
                                                //  version       AnyCatalogue_version           
                                                //  pictogramCode AnyCatalogue_pictogramCode     
                                                //  value         AnyCatalogue_value           OPTIONAL  
                                                //  unit          RSCUnit                      OPTIONAL  
                                                //  attributes    ISO14823Attributes           OPTIONAL  
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::AnyCatalogueValue _tmp_628;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value.push_back(_tmp_628);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000486\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::RSCUnit _tmp_629;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit.push_back(_tmp_629);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000487\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::ISO14823Attributes _tmp_630;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes.push_back(_tmp_630);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000488\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes " << tools::green("present");
                                            }
                                            
                                            // Field name: owner
                                                // Provider  SEQUENCE
                                                    //  countryCode        CountryCode          
                                                    //  providerIdentifier IssuerIdentifier     
                                                
                                                // Field name: country_code
                                                // BitString
                                                // BIT_STRING  min(10) max(10) span(1)
                                                uint8_t* _tmp_631 = (uint8_t*)buffer;
                                                __aux64__ = *_tmp_631 + 10;
                                                buffer += 1;
                                                
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000489\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.country_code.value: " << __aux64__;
                                                
                                                int _if__tmp_631 = __aux64__;
                                                for(int z = 0; z < _if__tmp_631; z++) {
                                                    uint8_t __c__;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.country_code.values.push_back(__c__);
                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.country_code.values[z] = (*__b__ == 1);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.country_code.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 10) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.country_code.value' " << (__aux64__) << " exceeds max allowable (10); message dropped.";
                                                    return false;
                                                }
                                                
                                                // Field name: provider_identifier
                                                // Integer
                                                // UINT16  min(0) max(16383) span(16384) datatype(UInt16)
                                                uint16_t* _tmp_632 = (uint16_t*) buffer; buffer += 2;
                                                __aux64__ = *_tmp_632;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.provider_identifier.value = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000490\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.provider_identifier.value) << 
                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.provider_identifier.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.provider_identifier.value;
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.provider_identifier.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 16383) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].owner.provider_identifier.value' " << (__aux64__) << " exceeds max allowable (16383); message dropped.";
                                                    return false;
                                                }
                                            
                                            // Field name: version
                                            // Integer
                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                            uint8_t* _tmp_633 = (uint8_t*) buffer++;
                                            __aux64__ = *_tmp_633;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].version.value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000491\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].version.value) << 
                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].version.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].version.value);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].version.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].version.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                return false;
                                            }
                                            
                                            // Field name: pictogram_code
                                            // Integer
                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                            uint16_t* _tmp_634 = (uint16_t*) buffer; buffer += 2;
                                            __aux64__ = *_tmp_634;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].pictogram_code.value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000492\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].pictogram_code.value) << 
                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].pictogram_code.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].pictogram_code.value;
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].pictogram_code.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].pictogram_code.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                return false;
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value.size() != 0) {
                                                // Field name: value
                                                // Integer
                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                uint16_t* _tmp_635 = (uint16_t*) buffer; buffer += 2;
                                                __aux64__ = *_tmp_635;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value[0].value = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000493\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value[0].value) << 
                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value[0].value;
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].value[0].value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                    return false;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit.size() != 0) {
                                                // Field name: unit
                                                // Integer
                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                uint8_t* _tmp_636 = (uint8_t*) buffer++;
                                                __aux64__ = *_tmp_636;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit[0].value = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000494\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit[0].value) << 
                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit[0].value);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].unit[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                    return false;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes.size() != 0) {
                                                // Field name: attributes
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8)
                                                uint8_t* _ext_flag_179 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000495\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].: " << int(*_ext_flag_179);
                                                }
                                                
                                                int16_t* _tmp_637 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_637;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_637 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000496\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0]. size: " << int(*_tmp_637);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int a = 0; a < _if__tmp_637; a++) {
                                                    dsrc_v2_ivi_msgs::msg::ISO14823AttributesElement seqof_a;  // CHOICE
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements.push_back(seqof_a);
                                                
                                                    // Choice
                                                       // #0  dtm   DTM   
                                                       // #1  edt   EDT   
                                                       // #2  dfl   DFL   
                                                       // #3  ved   VED   
                                                       // #4  spe   SPE   
                                                       // #5  roi   ROI   
                                                       // #6  dbv   DBV   
                                                       // #7  ddd   DDD   
                                                    uint8_t _choice_26 = *(buffer++);
                                                    
                                                    if(_choice_26 == 0) {
                                                        dsrc_v2_ivi_msgs::msg::DTM _tmp_638;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm.push_back(_tmp_638);
                                                    
                                                            // DTM  SEQUENCE
                                                                //  year        DTM_year          OPTIONAL  
                                                                //  month_day   DTM_month_day     OPTIONAL  
                                                                //  pmd         PMD               OPTIONAL  
                                                                //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                                //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                                //  period      HoursMinutes      OPTIONAL  
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DTMYear _tmp_639;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year.push_back(_tmp_639);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000497\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DTMMonthDay _tmp_640;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day.push_back(_tmp_640);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000498\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::PMD _tmp_641;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd.push_back(_tmp_641);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000499\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DTMHourMinutes _tmp_642;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes.push_back(_tmp_642);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000500\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DayOfWeek _tmp_643;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week.push_back(_tmp_643);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000501\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::HoursMinutes _tmp_644;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period.push_back(_tmp_644);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000502\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year.size() != 0) {
                                                                // Field name: year
                                                                    // DTM_year  SEQUENCE
                                                                        //  syr        DTM_year_syr     
                                                                        //  eyr        DTM_year_eyr     
                                                                    
                                                                    // Field name: syr
                                                                    // Integer
                                                                    // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                    uint8_t* _ext_flag_181 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000503\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.: " << int(*_ext_flag_181);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_181) {
                                                                        uint8_t* _tmp_646 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_646) {
                                                                            uint64_t* _tmp_647 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_647;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_647 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_647;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_645 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_645;
                                                                        __aux64__ += 2000;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000504\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].syr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                    // Field name: eyr
                                                                    // Integer
                                                                    // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                    uint8_t* _ext_flag_182 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000505\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.: " << int(*_ext_flag_182);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_182) {
                                                                        uint8_t* _tmp_649 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_649) {
                                                                            uint64_t* _tmp_650 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_650;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_650 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_650;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_648 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_648;
                                                                        __aux64__ += 2000;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000506\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].year[0].eyr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day.size() != 0) {
                                                                // Field name: month_day
                                                                    // DTM_month_day  SEQUENCE
                                                                        //  smd        MonthDay       
                                                                        //  emd        MonthDay       
                                                                    
                                                                    // Field name: smd
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        
                                                                        // Field name: month
                                                                        // Integer
                                                                        // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                        uint8_t* _tmp_651 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_651;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.month.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000507\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.month.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.month.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: day
                                                                        // Integer
                                                                        // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                        uint8_t* _tmp_652 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_652;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.day.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000508\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.day.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.day.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].smd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                            return false;
                                                                        }
                                                                    
                                                                    // Field name: emd
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        
                                                                        // Field name: month
                                                                        // Integer
                                                                        // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                        uint8_t* _tmp_653 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_653;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.month.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000509\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.month.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.month.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: day
                                                                        // Integer
                                                                        // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                        uint8_t* _tmp_654 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_654;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.day.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000510\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.day.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.day.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].month_day[0].emd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                            return false;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd.size() != 0) {
                                                                // Field name: pmd
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                uint8_t* _tmp_655 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_655 + 4;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000511\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd[0].value: " << __aux64__;
                                                                
                                                                int _if__tmp_655 = __aux64__;
                                                                for(int b = 0; b < _if__tmp_655; b++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd[0].values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd[0].values[b] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd[0].value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].pmd[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes.size() != 0) {
                                                                // Field name: hour_minutes
                                                                    // DTM_hourMinutes  SEQUENCE
                                                                        //  shm        HoursMinutes     
                                                                        //  ehm        HoursMinutes     
                                                                    
                                                                    // Field name: shm
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        
                                                                        // Field name: hours
                                                                        // Integer
                                                                        // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                        uint8_t* _tmp_656 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_656;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.hours.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000512\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.hours.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.hours.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: mins
                                                                        // Integer
                                                                        // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                        uint8_t* _tmp_657 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_657;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.mins.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000513\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.mins.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.mins.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].shm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                            return false;
                                                                        }
                                                                    
                                                                    // Field name: ehm
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        
                                                                        // Field name: hours
                                                                        // Integer
                                                                        // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                        uint8_t* _tmp_658 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_658;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.hours.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000514\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.hours.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.hours.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: mins
                                                                        // Integer
                                                                        // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                        uint8_t* _tmp_659 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_659;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.mins.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000515\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.mins.value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.mins.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                            return false;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week.size() != 0) {
                                                                // Field name: day_of_week
                                                                // BitString
                                                                // BIT_STRING  min(8) max(8) span(1)
                                                                uint8_t* _tmp_660 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_660 + 8;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000516\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week[0].value: " << __aux64__;
                                                                
                                                                int _if__tmp_660 = __aux64__;
                                                                for(int c = 0; c < _if__tmp_660; c++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week[0].values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week[0].values[c] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week[0].value' " << (__aux64__) << " is less than allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].day_of_week[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period.size() != 0) {
                                                                // Field name: period
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_661 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_661;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000517\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_662 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_662;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000518\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dtm[0].period[0].mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                    }
                                                    else if(_choice_26 == 1)  // CHOICE ISO14823Attributes_element  fieldName(edt)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::EDT _tmp_663;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt.push_back(_tmp_663);
                                                    
                                                            // EDT  SEQUENCE
                                                                //  year        DTM_year            
                                                                //  month_day   DTM_month_day       
                                                                //  pmd         PMD                 
                                                                //  hourMinutes DTM_hourMinutes     
                                                                //  dayOfWeek   DayOfWeek           
                                                                //  period      HoursMinutes        
                                                            
                                                            // Field name: year
                                                                // DTM_year  SEQUENCE
                                                                    //  syr        DTM_year_syr     
                                                                    //  eyr        DTM_year_eyr     
                                                                
                                                                // Field name: syr
                                                                // Integer
                                                                // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                uint8_t* _ext_flag_183 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000519\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.: " << int(*_ext_flag_183);
                                                                }
                                                                
                                                                if(*_ext_flag_183) {
                                                                    uint8_t* _tmp_665 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_665) {
                                                                        uint64_t* _tmp_666 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_666;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_666 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_666;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_664 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_664;
                                                                    __aux64__ += 2000;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000520\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.syr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                                
                                                                // Field name: eyr
                                                                // Integer
                                                                // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                uint8_t* _ext_flag_184 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000521\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.: " << int(*_ext_flag_184);
                                                                }
                                                                
                                                                if(*_ext_flag_184) {
                                                                    uint8_t* _tmp_668 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_668) {
                                                                        uint64_t* _tmp_669 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_669;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_669 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_669;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_667 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_667;
                                                                    __aux64__ += 2000;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000522\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].year.eyr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                            
                                                            // Field name: month_day
                                                                // DTM_month_day  SEQUENCE
                                                                    //  smd        MonthDay       
                                                                    //  emd        MonthDay       
                                                                
                                                                // Field name: smd
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    
                                                                    // Field name: month
                                                                    // Integer
                                                                    // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                    uint8_t* _tmp_670 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_670;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.month.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000523\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.month.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.month.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: day
                                                                    // Integer
                                                                    // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                    uint8_t* _tmp_671 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_671;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.day.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000524\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.day.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.day.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.smd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                        return false;
                                                                    }
                                                                
                                                                // Field name: emd
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    
                                                                    // Field name: month
                                                                    // Integer
                                                                    // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                    uint8_t* _tmp_672 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_672;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.month.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000525\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.month.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.month.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: day
                                                                    // Integer
                                                                    // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                    uint8_t* _tmp_673 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_673;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.day.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000526\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.day.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.day.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].month_day.emd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                        return false;
                                                                    }
                                                            
                                                            // Field name: pmd
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            uint8_t* _tmp_674 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_674 + 4;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000527\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].pmd.value: " << __aux64__;
                                                            
                                                            int _if__tmp_674 = __aux64__;
                                                            for(int d = 0; d < _if__tmp_674; d++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].pmd.values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].pmd.values[d] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].pmd.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].pmd.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: hour_minutes
                                                                // DTM_hourMinutes  SEQUENCE
                                                                    //  shm        HoursMinutes     
                                                                    //  ehm        HoursMinutes     
                                                                
                                                                // Field name: shm
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_675 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_675;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000528\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_676 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_676;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000529\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.shm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                                
                                                                // Field name: ehm
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_677 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_677;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000530\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.hours.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_678 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_678;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000531\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.mins.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].hour_minutes.ehm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                            
                                                            // Field name: day_of_week
                                                            // BitString
                                                            // BIT_STRING  min(8) max(8) span(1)
                                                            uint8_t* _tmp_679 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_679 + 8;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000532\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].day_of_week.value: " << __aux64__;
                                                            
                                                            int _if__tmp_679 = __aux64__;
                                                            for(int e = 0; e < _if__tmp_679; e++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].day_of_week.values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].day_of_week.values[e] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].day_of_week.value' " << (__aux64__) << " is less than allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].day_of_week.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: period
                                                                // HoursMinutes  SEQUENCE
                                                                    //  hours      HoursMinutes_hours     
                                                                    //  mins       HoursMinutes_mins      
                                                                
                                                                // Field name: hours
                                                                // Integer
                                                                // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                uint8_t* _tmp_680 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_680;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.hours.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000533\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.hours.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.hours.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: mins
                                                                // Integer
                                                                // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                uint8_t* _tmp_681 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_681;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.mins.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000534\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.mins.value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.mins.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].edt[0].period.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                    return false;
                                                                }
                                                    }
                                                    else if(_choice_26 == 2)  // CHOICE ISO14823Attributes_element  fieldName(dfl)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::DFL _tmp_682;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dfl.push_back(_tmp_682);
                                                    
                                                        // Integer
                                                        // UINT8  min(1) max(8) span(8) datatype(UInt8)
                                                        uint8_t* _tmp_683 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_683;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dfl[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000535\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dfl[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dfl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dfl[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dfl[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dfl[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_26 == 3)  // CHOICE ISO14823Attributes_element  fieldName(ved)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::VED _tmp_684;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved.push_back(_tmp_684);
                                                    
                                                            // VED  SEQUENCE
                                                                //  hei        Distance     OPTIONAL  
                                                                //  wid        Distance     OPTIONAL  
                                                                //  vln        Distance     OPTIONAL  
                                                                //  wei        Weight       OPTIONAL  
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Distance _tmp_685;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei.push_back(_tmp_685);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000536\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Distance _tmp_686;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid.push_back(_tmp_686);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000537\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Distance _tmp_687;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln.push_back(_tmp_687);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000538\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Weight _tmp_688;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei.push_back(_tmp_688);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000539\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei.size() != 0) {
                                                                // Field name: hei
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_689 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_689;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000540\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_690 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_690;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000541\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].hei[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid.size() != 0) {
                                                                // Field name: wid
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_691 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_691;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000542\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_692 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_692;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000543\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wid[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln.size() != 0) {
                                                                // Field name: vln
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_693 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_693;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000544\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_694 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_694;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000545\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].vln[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei.size() != 0) {
                                                                // Field name: wei
                                                                    // Weight  SEQUENCE
                                                                        //  value      Weight_value     
                                                                        //  unit       RSCUnit          
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_695 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_695;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000546\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_696 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_696;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000547\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ved[0].wei[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                    }
                                                    else if(_choice_26 == 4)  // CHOICE ISO14823Attributes_element  fieldName(spe)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::SPE _tmp_697;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe.push_back(_tmp_697);
                                                    
                                                            // SPE  SEQUENCE
                                                                //  spm        SPE_spm            OPTIONAL  
                                                                //  mns        SPE_mns            OPTIONAL  
                                                                //  unit       SPE_RSCUnit_unit     
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::SPESpm _tmp_698;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm.push_back(_tmp_698);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000548\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::SPEMns _tmp_699;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns.push_back(_tmp_699);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000549\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm.size() != 0) {
                                                                // Field name: spm
                                                                // Integer
                                                                // UINT8  min(0) max(250) span(251) datatype(UInt8)
                                                                uint8_t* _tmp_700 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_700;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000550\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].spm[0].value' " << (__aux64__) << " exceeds max allowable (250); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns.size() != 0) {
                                                                // Field name: mns
                                                                // Integer
                                                                // UINT8  min(0) max(250) span(251) datatype(UInt8)
                                                                uint8_t* _tmp_701 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_701;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000551\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].mns[0].value' " << (__aux64__) << " exceeds max allowable (250); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            // Field name: unit
                                                            // Integer
                                                            // UINT8  min(0) max(1) span(2) datatype(UInt8)
                                                            uint8_t* _tmp_702 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_702;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].unit.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000552\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].unit.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].unit.value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].spe[0].unit.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                    }
                                                    else if(_choice_26 == 5)  // CHOICE ISO14823Attributes_element  fieldName(roi)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::ROI _tmp_703;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].roi.push_back(_tmp_703);
                                                    
                                                        // Integer
                                                        // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                                        uint8_t* _tmp_704 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_704;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].roi[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000553\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].roi[0].value) << 
                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].roi[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].roi[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].roi[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].roi[0].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_26 == 6)  // CHOICE ISO14823Attributes_element  fieldName(dbv)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::DBV _tmp_705;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv.push_back(_tmp_705);
                                                    
                                                            // DBV  SEQUENCE
                                                                //  value      Distance_value     
                                                                //  unit       RSCUnit            
                                                            
                                                            // Field name: value
                                                            // Integer
                                                            // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                            uint16_t* _tmp_706 = (uint16_t*) buffer; buffer += 2;
                                                            __aux64__ = *_tmp_706;
                                                            __aux64__ += 1;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].value.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000554\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].value.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].value.value;
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: unit
                                                            // Integer
                                                            // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                            uint8_t* _tmp_707 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_707;
                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].unit.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000555\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].unit.value) << 
                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].unit.value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].dbv[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                    }
                                                    else if(_choice_26 == 7)  // CHOICE ISO14823Attributes_element  fieldName(ddd)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::DDD _tmp_708;
                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd.push_back(_tmp_708);
                                                    
                                                            // DDD  SEQUENCE
                                                                //  dcj        DDD_dcj      OPTIONAL  
                                                                //  dcr        DDD_dcr      OPTIONAL  
                                                                //  tpl        DDD_tpl      OPTIONAL  
                                                                //  ioList     DDD_ioList     
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DDDDcj _tmp_709;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj.push_back(_tmp_709);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000556\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DDDDcr _tmp_710;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr.push_back(_tmp_710);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000557\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DDDTpl _tmp_711;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl.push_back(_tmp_711);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000558\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj.size() != 0) {
                                                                // Field name: dcj
                                                                // Integer
                                                                // UINT8  min(1) max(128) span(128) datatype(UInt8)
                                                                uint8_t* _tmp_712 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_712;
                                                                __aux64__ += 1;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000559\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcj[0].value' " << (__aux64__) << " exceeds max allowable (128); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr.size() != 0) {
                                                                // Field name: dcr
                                                                // Integer
                                                                // UINT8  min(1) max(128) span(128) datatype(UInt8)
                                                                uint8_t* _tmp_713 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_713;
                                                                __aux64__ += 1;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000560\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].dcr[0].value' " << (__aux64__) << " exceeds max allowable (128); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl.size() != 0) {
                                                                // Field name: tpl
                                                                // Integer
                                                                // UINT8  min(1) max(128) span(128) datatype(UInt8)
                                                                uint8_t* _tmp_714 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_714;
                                                                __aux64__ += 1;
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000561\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl[0].value) << 
                                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].tpl[0].value' " << (__aux64__) << " exceeds max allowable (128); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            // Field name: io_list
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(8) span(8)
                                                            uint8_t* _ext_flag_185 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000562\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.: " << int(*_ext_flag_185);
                                                            }
                                                            
                                                            int16_t* _tmp_715 = (int16_t*)buffer;
                                                            buffer += 2;
                                                            __aux64__ = *_tmp_715;
                                                            __aux64__ += 1;     // +min
                                                            
                                                            int _if__tmp_715 = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000563\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list. size: " << int(*_tmp_715);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            for(int f = 0; f < _if__tmp_715; f++) {
                                                                dsrc_v2_ivi_msgs::msg::DDDIO seqof_f;  // SEQUENCE
                                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements.push_back(seqof_f);
                                                            
                                                                    // DDD_IO  SEQUENCE
                                                                        //  drn        DDD_IO_drn             
                                                                        //  dp         DDD_IO_dp            OPTIONAL  
                                                                        //  dr         DDD_IO_dr            OPTIONAL  
                                                                        //  rne        DDD_IO_rne           OPTIONAL  
                                                                        //  stnId      DDD_IO_stnId         OPTIONAL  
                                                                        //  stnText    DDD_IO_stnText       OPTIONAL  
                                                                        //  dcp        DistanceOrDuration   OPTIONAL  
                                                                        //  ddp        DistanceOrDuration   OPTIONAL  
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIODp _tmp_716;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp.push_back(_tmp_716);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000564\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIODr _tmp_717;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr.push_back(_tmp_717);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000565\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIORne _tmp_718;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne.push_back(_tmp_718);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000566\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIOStnId _tmp_719;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id.push_back(_tmp_719);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000567\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIOStnText _tmp_720;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text.push_back(_tmp_720);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000568\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DistanceOrDuration _tmp_721;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp.push_back(_tmp_721);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000569\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DistanceOrDuration _tmp_722;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp.push_back(_tmp_722);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000570\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp " << tools::green("present");
                                                                    }
                                                                    
                                                                    // Field name: drn
                                                                    // Integer
                                                                    // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                                    uint8_t* _tmp_723 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_723;
                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].drn.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000571\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].drn.value) << 
                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].drn.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].drn.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].drn.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].drn.value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp.size() != 0) {
                                                                        // Field name: dp
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                                        uint8_t* _ext_flag_186 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000572\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].: " << int(*_ext_flag_186);
                                                                        }
                                                                        
                                                                        int16_t* _tmp_724 = (int16_t*)buffer;
                                                                        buffer += 2;
                                                                        __aux64__ = *_tmp_724;
                                                                        __aux64__ += 1;     // +min
                                                                        
                                                                        int _if__tmp_724 = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000573\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0]. size: " << int(*_tmp_724);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        for(int g = 0; g < _if__tmp_724; g++) {
                                                                            dsrc_v2_ivi_msgs::msg::DestinationPlace seqof_g;  // SEQUENCE
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements.push_back(seqof_g);
                                                                        
                                                                                // DestinationPlace  SEQUENCE
                                                                                    //  depType    DDD_DEP                      
                                                                                    //  depBlob    DestinationPlace_depBlob   OPTIONAL  
                                                                                    //  plnId      DestinationPlace_plnId     OPTIONAL  
                                                                                    //  plnText    DestinationPlace_plnText   OPTIONAL  
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationPlaceDepBlob _tmp_725;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob.push_back(_tmp_725);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m000574\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob " << tools::green("present");
                                                                                }
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationPlacePlnId _tmp_726;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id.push_back(_tmp_726);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m000575\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id " << tools::green("present");
                                                                                }
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationPlacePlnText _tmp_727;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text.push_back(_tmp_727);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m000576\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text " << tools::green("present");
                                                                                }
                                                                                
                                                                                // Field name: dep_type
                                                                                // Integer
                                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                                uint8_t* _ext_flag_187 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.
                                                                                
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m000577\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.: " << int(*_ext_flag_187);
                                                                                }
                                                                                
                                                                                if(*_ext_flag_187) {
                                                                                    uint8_t* _tmp_729 = (uint8_t*) buffer++;
                                                                                    
                                                                                    if(*_tmp_729) {
                                                                                        uint64_t* _tmp_730 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = *_tmp_730;
                                                                                        __aux64__ += INT64_MIN;
                                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value = __aux64__;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        uint32_t* _tmp_730 = (uint32_t*) buffer; buffer += 4;
                                                                                        __aux64__ = *_tmp_730;
                                                                                        __aux64__ += INT32_MIN;
                                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value = __aux64__;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    uint8_t* _tmp_728 = (uint8_t*) buffer++;
                                                                                    __aux64__ = *_tmp_728;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value = __aux64__;
                                                                                
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m000578\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value) << 
                                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value);
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob.size() != 0) {
                                                                                    // Field name: dep_blob
                                                                                    // OctetString
                                                                                    // Indefinite length
                                                                                    // min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_731 = (uint16_t*)buffer;
                                                                                    buffer += 2;
                                                                                    __aux64__ = *_tmp_731;
                                                                                    
                                                                                    int _if__tmp_731 = __aux64__;
                                                                                    for(int h = 0; h < _if__tmp_731; h++) {
                                                                                        int8_t* __n__ = (int8_t*)buffer++;
                                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].dep_blob[0].values.push_back(*__n__);
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id.size() != 0) {
                                                                                    // Field name: pln_id
                                                                                    // Integer
                                                                                    // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                                    uint16_t* _tmp_732 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = *_tmp_732;
                                                                                    __aux64__ += 1;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id[0].value = __aux64__;
                                                                                    
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m000579\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id[0].value;
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_id[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text.size() != 0) {
                                                                                    // Field name: pln_text
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_733 = (uint16_t*)buffer;
                                                                                    __aux64__ = *_tmp_733;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int _if__tmp_733 = __aux64__;
                                                                                    for(int i = 0; i < _if__tmp_733; i++) {  // DestinationPlace_plnText
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dp[0].elements[g].pln_text[0].value += *__tmp__;
                                                                                    }
                                                                                }
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr.size() != 0) {
                                                                        // Field name: dr
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                                        uint8_t* _ext_flag_188 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000580\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].: " << int(*_ext_flag_188);
                                                                        }
                                                                        
                                                                        int16_t* _tmp_734 = (int16_t*)buffer;
                                                                        buffer += 2;
                                                                        __aux64__ = *_tmp_734;
                                                                        __aux64__ += 1;     // +min
                                                                        
                                                                        int _if__tmp_734 = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000581\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0]. size: " << int(*_tmp_734);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        for(int j = 0; j < _if__tmp_734; j++) {
                                                                            dsrc_v2_ivi_msgs::msg::DestinationRoad seqof_j;  // SEQUENCE
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements.push_back(seqof_j);
                                                                        
                                                                                // DestinationRoad  SEQUENCE
                                                                                    //  derType    DDD_DER                     
                                                                                    //  ronId      DestinationRoad_ronId     OPTIONAL  
                                                                                    //  ronText    DestinationRoad_ronText   OPTIONAL  
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationRoadRonId _tmp_735;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id.push_back(_tmp_735);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m000582\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id " << tools::green("present");
                                                                                }
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationRoadRonText _tmp_736;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text.push_back(_tmp_736);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m000583\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text " << tools::green("present");
                                                                                }
                                                                                
                                                                                // Field name: der_type
                                                                                // Integer
                                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                                uint8_t* _ext_flag_189 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.
                                                                                
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m000584\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.: " << int(*_ext_flag_189);
                                                                                }
                                                                                
                                                                                if(*_ext_flag_189) {
                                                                                    uint8_t* _tmp_738 = (uint8_t*) buffer++;
                                                                                    
                                                                                    if(*_tmp_738) {
                                                                                        uint64_t* _tmp_739 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = *_tmp_739;
                                                                                        __aux64__ += INT64_MIN;
                                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value = __aux64__;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        uint32_t* _tmp_739 = (uint32_t*) buffer; buffer += 4;
                                                                                        __aux64__ = *_tmp_739;
                                                                                        __aux64__ += INT32_MIN;
                                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value = __aux64__;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    uint8_t* _tmp_737 = (uint8_t*) buffer++;
                                                                                    __aux64__ = *_tmp_737;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value = __aux64__;
                                                                                
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m000585\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value) << 
                                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value);
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].der_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id.size() != 0) {
                                                                                    // Field name: ron_id
                                                                                    // Integer
                                                                                    // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                                    uint16_t* _tmp_740 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = *_tmp_740;
                                                                                    __aux64__ += 1;
                                                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id[0].value = __aux64__;
                                                                                    
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m000586\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id[0].value;
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_id[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text.size() != 0) {
                                                                                    // Field name: ron_text
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_741 = (uint16_t*)buffer;
                                                                                    __aux64__ = *_tmp_741;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int _if__tmp_741 = __aux64__;
                                                                                    for(int k = 0; k < _if__tmp_741; k++) {  // DestinationRoad_ronText
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dr[0].elements[j].ron_text[0].value += *__tmp__;
                                                                                    }
                                                                                }
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne.size() != 0) {
                                                                        // Field name: rne
                                                                        // Integer
                                                                        // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                        uint16_t* _tmp_742 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_742;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne[0].value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000587\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne[0].value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne[0].value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].rne[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                            return false;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id.size() != 0) {
                                                                        // Field name: stn_id
                                                                        // Integer
                                                                        // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                        uint16_t* _tmp_743 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_743;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id[0].value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000588\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id[0].value) << 
                                                                                         " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id[0].value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id[0].value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_id[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                            return false;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text.size() != 0) {
                                                                        // Field name: stn_text
                                                                        // Text
                                                                        
                                                                        // Indefinite length
                                                                        // TEXT  min(0) max(16383) span(16384)
                                                                        uint16_t* _tmp_744 = (uint16_t*)buffer;
                                                                        __aux64__ = *_tmp_744;
                                                                        buffer += 2;
                                                                        
                                                                        int _if__tmp_744 = __aux64__;
                                                                        for(int l = 0; l < _if__tmp_744; l++) {  // DDD_IO_stnText
                                                                            char* __tmp__ = (char*)buffer++;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].stn_text[0].value += *__tmp__;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp.size() != 0) {
                                                                        // Field name: dcp
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            
                                                                            // Field name: value
                                                                            // Integer
                                                                            // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                            uint16_t* _tmp_745 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_745;
                                                                            __aux64__ += 1;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].value.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000589\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].value.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: unit
                                                                            // Integer
                                                                            // UINT8  min(2) max(9) span(8) datatype(UInt8)
                                                                            uint8_t* _tmp_746 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_746;
                                                                            __aux64__ += 2;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].unit.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000590\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].unit.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].unit.value' " << (__aux64__) << " is less than allowable (2); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].dcp[0].unit.value' " << (__aux64__) << " exceeds max allowable (9); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp.size() != 0) {
                                                                        // Field name: ddp
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            
                                                                            // Field name: value
                                                                            // Integer
                                                                            // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                            uint16_t* _tmp_747 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_747;
                                                                            __aux64__ += 1;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].value.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000591\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].value.value: " << ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].value.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: unit
                                                                            // Integer
                                                                            // UINT8  min(2) max(9) span(8) datatype(UInt8)
                                                                            uint8_t* _tmp_748 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_748;
                                                                            __aux64__ += 2;
                                                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].unit.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000592\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].unit.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].unit.value' " << (__aux64__) << " is less than allowable (2); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a].ddd[0].io_list.elements[f].ddp[0].unit.value' " << (__aux64__) << " exceeds max allowable (9); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                            }
                                                    }
                                                    else
                                                    {
                                                        logger->warning() << "Wrong option (" << static_cast<int>(_choice_26) << ") selected in CHOICE ISO14823Attributes_element in 'ivi.optional[0].elements[c].giv[0].elements[m].road_sign_codes.elements[i].code.any_catalogue[0].attributes[0].elements[a]'; message dropped.";
                                                        return false;
                                                    }
                                                }
                                            }
                                    }
                                    else
                                    {
                                        uint16_t* _tmp_749 = (uint16_t*)buffer;  // OpenType length
                                        buffer += 2 + int(*_tmp_749);            // Ignoring opentype data
                                    }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text.size() != 0) {
                                // Field name: extra_text
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(4) span(4)
                                uint8_t* _ext_flag_190 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000593\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].: " << int(*_ext_flag_190);
                                }
                                
                                int16_t* _tmp_750 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_750;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_750 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000594\033[0m| SequenceOf ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0]. size: " << int(*_tmp_750);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int m = 0; m < _if__tmp_750; m++) {
                                    dsrc_v2_ivi_msgs::msg::Text seqof_m;  // SEQUENCE
                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements.push_back(seqof_m);
                                
                                        // Text  SEQUENCE
                                            //  layoutComponentId Text_layoutComponentId   OPTIONAL  
                                            //  language          Text_language              
                                            //  textContent       Text_textContent           
                                        if(*(buffer++)) { 
                                            dsrc_v2_ivi_msgs::msg::TextLayoutComponentId _tmp_751;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id.push_back(_tmp_751);
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m000595\033[0m| ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id " << tools::green("present");
                                        }
                                        
                                        if(ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id.size() != 0) {
                                            // Field name: layout_component_id
                                            // Integer
                                            // UINT8  min(1) max(4) span(4) datatype(UInt8)
                                            uint8_t* _ext_flag_191 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000596\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].: " << int(*_ext_flag_191);
                                            }
                                            
                                            if(*_ext_flag_191) {
                                                uint8_t* _tmp_753 = (uint8_t*) buffer++;
                                                
                                                if(*_tmp_753) {
                                                    uint64_t* _tmp_754 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = *_tmp_754;
                                                    __aux64__ += INT64_MIN;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value = __aux64__;
                                                }
                                                else
                                                {
                                                    uint32_t* _tmp_754 = (uint32_t*) buffer; buffer += 4;
                                                    __aux64__ = *_tmp_754;
                                                    __aux64__ += INT32_MIN;
                                                    ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value = __aux64__;
                                                }
                                            }
                                            else
                                            {
                                                uint8_t* _tmp_752 = (uint8_t*) buffer++;
                                                __aux64__ = *_tmp_752;
                                                __aux64__ += 1;
                                                ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value = __aux64__;
                                            
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000597\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value) << 
                                                                 " ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].layout_component_id[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                    return false;
                                                }
                                                
                                            }
                                        }
                                        
                                        // Field name: language
                                        // BitString
                                        // BIT_STRING  min(10) max(10) span(1)
                                        uint8_t* _tmp_755 = (uint8_t*)buffer;
                                        __aux64__ = *_tmp_755 + 10;
                                        buffer += 1;
                                        
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000598\033[0m| ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].language.value: " << __aux64__;
                                        
                                        int _if__tmp_755 = __aux64__;
                                        for(int n = 0; n < _if__tmp_755; n++) {
                                            uint8_t __c__;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].language.values.push_back(__c__);
                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].language.values[n] = (*__b__ == 1);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].language.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 10) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].language.value' " << (__aux64__) << " exceeds max allowable (10); message dropped.";
                                            return false;
                                        }
                                        
                                        // Field name: text_content
                                        // Text
                                        
                                        // Indefinite length
                                        // TEXT  min(0) max(16383) span(16384)
                                        uint16_t* _tmp_756 = (uint16_t*)buffer;
                                        __aux64__ = *_tmp_756;
                                        buffer += 2;
                                        
                                        int _if__tmp_756 = __aux64__;
                                        for(int o = 0; o < _if__tmp_756; o++) {  // Text_textContent
                                            char* __tmp__ = (char*)buffer++;
                                            ros->ivi.optional[0].elements[c].giv[0].elements[m].extra_text[0].elements[m].text_content.value += *__tmp__;
                                        }
                                }
                            }
                            if(*_ext_flag_58) { // from ros->ivi.optional[0].elements[c].giv[0].elements[m]. 
                                uint8_t* _tmp_757 = (uint8_t*) buffer++;  // number of extensions
                                bool _array_4[*_tmp_757];
                                
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000599\033[0m| Reading number of exts from ros->ivi.optional[0].elements[c].giv[0].elements[m].: " << static_cast<unsigned int>(*_tmp_757);
                                
                                // Extensions bytemap
                                for(int i = 0; i < *_tmp_757; i++)
                                    _array_4[i] = (*buffer++) != 0;
                                
                                // Discarding unknown OpenType containers
                                for(int i = 0; i < *_tmp_757; i++) {
                                    uint16_t* _tmp_758 = (uint16_t*)buffer;  // OpenType length
                                    buffer += 2;
                                
                                    if(debug) {
                                    }
                                
                                    for(int i = 0; i < *_tmp_758; i++)
                                        buffer++;
                                }
                                
                            }
                    }
                }
                else if(_choice_1 == 2)  // CHOICE IviContainer  fieldName(rcc)
                {
                    dsrc_v2_ivi_msgs::msg::RoadConfigurationContainer _tmp_759;
                    ros->ivi.optional[0].elements[c].rcc.push_back(_tmp_759);
                
                    // SequenceOf
                    // Data Type UInt8
                    // SEQUENCE_OF  min(1) max(16) span(16)
                    uint8_t* _ext_flag_192 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].
                    
                    if(debug) {
                        logger->debug() << "|\033[38;5;94m000600\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].: " << int(*_ext_flag_192);
                    }
                    
                    int16_t* _tmp_760 = (int16_t*)buffer;
                    buffer += 2;
                    __aux64__ = *_tmp_760;
                    __aux64__ += 1;     // +min
                    
                    int _if__tmp_760 = __aux64__;
                    
                    if(debug) {
                        logger->debug() << "|\033[38;5;94m000601\033[0m| SequenceOf ros->ivi.optional[0].elements[c].rcc[0]. size: " << int(*_tmp_760);
                    }
                    
                    // ******************* MIN validator *******************
                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                        return false;
                    }
                    // ******************* MAX validator *******************
                    if(VALIDATORS_ENABLED && __aux64__ > 16) {
                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].value' " << (__aux64__) << " exceeds max allowable (16); message dropped.";
                        return false;
                    }
                    
                    
                    for(int p = 0; p < _if__tmp_760; p++) {
                        dsrc_v2_ivi_msgs::msg::RccPart seqof_p;  // SEQUENCE
                        ros->ivi.optional[0].elements[c].rcc[0].elements.push_back(seqof_p);
                    
                            // RccPart  SEQUENCE
                                //  zoneIds           RccPart_zoneIds               
                                //  roadType          RoadType                      
                                //  laneConfiguration RccPart_laneConfiguration     
                                //  ...
                            uint8_t* _ext_flag_193 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000602\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].: " << int(*_ext_flag_193);
                            }
                            
                            
                            // Field name: zone_ids
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(8) span(8)
                            uint8_t* _ext_flag_194 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000603\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.: " << int(*_ext_flag_194);
                            }
                            
                            int16_t* _tmp_761 = (int16_t*)buffer;
                            buffer += 2;
                            __aux64__ = *_tmp_761;
                            __aux64__ += 1;     // +min
                            
                            int _if__tmp_761 = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000604\033[0m| SequenceOf ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids. size: " << int(*_tmp_761);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                return false;
                            }
                            
                            
                            for(int q = 0; q < _if__tmp_761; q++) {
                                dsrc_v2_ivi_msgs::msg::Zid seqof_q;  // INTEGER
                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements.push_back(seqof_q);
                            
                                // Integer
                                // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                uint8_t* _ext_flag_195 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000605\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].: " << int(*_ext_flag_195);
                                }
                                
                                if(*_ext_flag_195) {
                                    uint8_t* _tmp_763 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_763) {
                                        uint64_t* _tmp_764 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_764;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_764 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_764;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_762 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_762;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000606\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value) << 
                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].zone_ids.elements[q].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                        return false;
                                    }
                                    
                                }
                                
                                
                            }
                            
                            // Field name: road_type
                            // Enumerated
                            // INT32  min(0) max(3) span(4) datatype(Int32)
                            uint8_t* _tmp_765 = (uint8_t*) buffer++;
                            __aux64__ = *_tmp_765;
                            __aux64__ += 0;
                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].road_type.value = __aux64__;
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].road_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].road_type.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                return false;
                            }
                            
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000607\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].road_type.value) << 
                                             " ivi.optional[0].elements[c].rcc[0].elements[p].road_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].road_type.value);
                            }
                            
                            // Field name: lane_configuration
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(16) span(16)
                            uint8_t* _ext_flag_197 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000608\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.: " << int(*_ext_flag_197);
                            }
                            
                            int16_t* _tmp_766 = (int16_t*)buffer;
                            buffer += 2;
                            __aux64__ = *_tmp_766;
                            __aux64__ += 1;     // +min
                            
                            int _if__tmp_766 = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000609\033[0m| SequenceOf ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration. size: " << int(*_tmp_766);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 16) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.value' " << (__aux64__) << " exceeds max allowable (16); message dropped.";
                                return false;
                            }
                            
                            
                            for(int r = 0; r < _if__tmp_766; r++) {
                                dsrc_v2_ivi_msgs::msg::LaneInformation seqof_r;  // SEQUENCE
                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements.push_back(seqof_r);
                            
                                    // LaneInformation  SEQUENCE
                                        //  laneNumber        LanePosition                       
                                        //  direction         Direction                          
                                        //  validity          DTM                              OPTIONAL  
                                        //  laneType          LaneType                           
                                        //  laneTypeQualifier CompleteVehicleCharacteristics   OPTIONAL  
                                        //  laneStatus        LaneStatus                         
                                        //  laneWidth         IVILaneWidth                     OPTIONAL  
                                        //  ...
                                    uint8_t* _ext_flag_198 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000610\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].: " << int(*_ext_flag_198);
                                    }
                                    
                                    if(*(buffer++)) { 
                                        dsrc_v2_ivi_msgs::msg::DTM _tmp_767;
                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity.push_back(_tmp_767);
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000611\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity " << tools::green("present");
                                    }
                                    if(*(buffer++)) { 
                                        dsrc_v2_ivi_msgs::msg::CompleteVehicleCharacteristics _tmp_768;
                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier.push_back(_tmp_768);
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000612\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier " << tools::green("present");
                                    }
                                    if(*(buffer++)) { 
                                        dsrc_v2_ivi_msgs::msg::IVILaneWidth _tmp_769;
                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width.push_back(_tmp_769);
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000613\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width " << tools::green("present");
                                    }
                                    
                                    // Field name: lane_number
                                    // Integer
                                    // INT8  min(-1) max(14) span(16) datatype(Int8)
                                    uint8_t* _tmp_770 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_770;
                                    __aux64__ += -1;
                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_number.value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000614\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_number.value) << 
                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_number.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_number.value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_number.value' " << (__aux64__) << " is less than allowable (-1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_number.value' " << (__aux64__) << " exceeds max allowable (14); message dropped.";
                                        return false;
                                    }
                                    
                                    // Field name: direction
                                    // Integer
                                    // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                    uint8_t* _tmp_771 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_771;
                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].direction.value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000615\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].direction.value) << 
                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].direction.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].direction.value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].direction.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].direction.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                        return false;
                                    }
                                    
                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity.size() != 0) {
                                        // Field name: validity
                                            // DTM  SEQUENCE
                                                //  year        DTM_year          OPTIONAL  
                                                //  month_day   DTM_month_day     OPTIONAL  
                                                //  pmd         PMD               OPTIONAL  
                                                //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                //  period      HoursMinutes      OPTIONAL  
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::DTMYear _tmp_772;
                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year.push_back(_tmp_772);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000616\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::DTMMonthDay _tmp_773;
                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day.push_back(_tmp_773);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000617\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::PMD _tmp_774;
                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd.push_back(_tmp_774);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000618\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::DTMHourMinutes _tmp_775;
                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes.push_back(_tmp_775);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000619\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::DayOfWeek _tmp_776;
                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week.push_back(_tmp_776);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000620\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::HoursMinutes _tmp_777;
                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period.push_back(_tmp_777);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000621\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period " << tools::green("present");
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year.size() != 0) {
                                                // Field name: year
                                                    // DTM_year  SEQUENCE
                                                        //  syr        DTM_year_syr     
                                                        //  eyr        DTM_year_eyr     
                                                    
                                                    // Field name: syr
                                                    // Integer
                                                    // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                    uint8_t* _ext_flag_199 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000622\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.: " << int(*_ext_flag_199);
                                                    }
                                                    
                                                    if(*_ext_flag_199) {
                                                        uint8_t* _tmp_779 = (uint8_t*) buffer++;
                                                        
                                                        if(*_tmp_779) {
                                                            uint64_t* _tmp_780 = (uint64_t*)buffer; buffer += 8;
                                                            __aux64__ = *_tmp_780;
                                                            __aux64__ += INT64_MIN;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value = __aux64__;
                                                        }
                                                        else
                                                        {
                                                            uint32_t* _tmp_780 = (uint32_t*) buffer; buffer += 4;
                                                            __aux64__ = *_tmp_780;
                                                            __aux64__ += INT32_MIN;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value = __aux64__;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        uint8_t* _tmp_778 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_778;
                                                        __aux64__ += 2000;
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value = __aux64__;
                                                    
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000623\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].syr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                    }
                                                    
                                                    // Field name: eyr
                                                    // Integer
                                                    // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                    uint8_t* _ext_flag_200 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000624\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.: " << int(*_ext_flag_200);
                                                    }
                                                    
                                                    if(*_ext_flag_200) {
                                                        uint8_t* _tmp_782 = (uint8_t*) buffer++;
                                                        
                                                        if(*_tmp_782) {
                                                            uint64_t* _tmp_783 = (uint64_t*)buffer; buffer += 8;
                                                            __aux64__ = *_tmp_783;
                                                            __aux64__ += INT64_MIN;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value = __aux64__;
                                                        }
                                                        else
                                                        {
                                                            uint32_t* _tmp_783 = (uint32_t*) buffer; buffer += 4;
                                                            __aux64__ = *_tmp_783;
                                                            __aux64__ += INT32_MIN;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value = __aux64__;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        uint8_t* _tmp_781 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_781;
                                                        __aux64__ += 2000;
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value = __aux64__;
                                                    
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000625\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].year[0].eyr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                    }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day.size() != 0) {
                                                // Field name: month_day
                                                    // DTM_month_day  SEQUENCE
                                                        //  smd        MonthDay       
                                                        //  emd        MonthDay       
                                                    
                                                    // Field name: smd
                                                        // MonthDay  SEQUENCE
                                                            //  month      MonthDay_month     
                                                            //  day        MonthDay_day       
                                                        
                                                        // Field name: month
                                                        // Integer
                                                        // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                        uint8_t* _tmp_784 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_784;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.month.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000626\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.month.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.month.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        // Field name: day
                                                        // Integer
                                                        // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                        uint8_t* _tmp_785 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_785;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.day.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000627\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.day.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.day.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].smd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                            return false;
                                                        }
                                                    
                                                    // Field name: emd
                                                        // MonthDay  SEQUENCE
                                                            //  month      MonthDay_month     
                                                            //  day        MonthDay_day       
                                                        
                                                        // Field name: month
                                                        // Integer
                                                        // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                        uint8_t* _tmp_786 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_786;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.month.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000628\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.month.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.month.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        // Field name: day
                                                        // Integer
                                                        // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                        uint8_t* _tmp_787 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_787;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.day.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000629\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.day.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.day.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].month_day[0].emd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                            return false;
                                                        }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd.size() != 0) {
                                                // Field name: pmd
                                                // BitString
                                                // BIT_STRING  min(4) max(4) span(1)
                                                uint8_t* _tmp_788 = (uint8_t*)buffer;
                                                __aux64__ = *_tmp_788 + 4;
                                                buffer += 1;
                                                
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000630\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd[0].value: " << __aux64__;
                                                
                                                int _if__tmp_788 = __aux64__;
                                                for(int s = 0; s < _if__tmp_788; s++) {
                                                    uint8_t __c__;
                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd[0].values.push_back(__c__);
                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd[0].values[s] = (*__b__ == 1);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd[0].value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].pmd[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                    return false;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes.size() != 0) {
                                                // Field name: hour_minutes
                                                    // DTM_hourMinutes  SEQUENCE
                                                        //  shm        HoursMinutes     
                                                        //  ehm        HoursMinutes     
                                                    
                                                    // Field name: shm
                                                        // HoursMinutes  SEQUENCE
                                                            //  hours      HoursMinutes_hours     
                                                            //  mins       HoursMinutes_mins      
                                                        
                                                        // Field name: hours
                                                        // Integer
                                                        // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                        uint8_t* _tmp_789 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_789;
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.hours.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000631\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.hours.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.hours.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        // Field name: mins
                                                        // Integer
                                                        // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                        uint8_t* _tmp_790 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_790;
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.mins.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000632\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.mins.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.mins.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].shm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                            return false;
                                                        }
                                                    
                                                    // Field name: ehm
                                                        // HoursMinutes  SEQUENCE
                                                            //  hours      HoursMinutes_hours     
                                                            //  mins       HoursMinutes_mins      
                                                        
                                                        // Field name: hours
                                                        // Integer
                                                        // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                        uint8_t* _tmp_791 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_791;
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.hours.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000633\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.hours.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.hours.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        // Field name: mins
                                                        // Integer
                                                        // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                        uint8_t* _tmp_792 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_792;
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.mins.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000634\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.mins.value) << 
                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.mins.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                            return false;
                                                        }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week.size() != 0) {
                                                // Field name: day_of_week
                                                // BitString
                                                // BIT_STRING  min(8) max(8) span(1)
                                                uint8_t* _tmp_793 = (uint8_t*)buffer;
                                                __aux64__ = *_tmp_793 + 8;
                                                buffer += 1;
                                                
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000635\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week[0].value: " << __aux64__;
                                                
                                                int _if__tmp_793 = __aux64__;
                                                for(int t = 0; t < _if__tmp_793; t++) {
                                                    uint8_t __c__;
                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week[0].values.push_back(__c__);
                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week[0].values[t] = (*__b__ == 1);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 8) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week[0].value' " << (__aux64__) << " is less than allowable (8); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].day_of_week[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                    return false;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period.size() != 0) {
                                                // Field name: period
                                                    // HoursMinutes  SEQUENCE
                                                        //  hours      HoursMinutes_hours     
                                                        //  mins       HoursMinutes_mins      
                                                    
                                                    // Field name: hours
                                                    // Integer
                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                    uint8_t* _tmp_794 = (uint8_t*) buffer++;
                                                    __aux64__ = *_tmp_794;
                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].hours.value = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000636\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].hours.value) << 
                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].hours.value);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    // Field name: mins
                                                    // Integer
                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                    uint8_t* _tmp_795 = (uint8_t*) buffer++;
                                                    __aux64__ = *_tmp_795;
                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].mins.value = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000637\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].mins.value) << 
                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].mins.value);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].validity[0].period[0].mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                        return false;
                                                    }
                                            }
                                    }
                                    
                                    // Field name: lane_type
                                    // Integer
                                    // UINT8  min(0) max(31) span(32) datatype(UInt8)
                                    uint8_t* _tmp_796 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_796;
                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type.value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000638\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type.value) << 
                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type.value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                        return false;
                                    }
                                    
                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier.size() != 0) {
                                        // Field name: lane_type_qualifier
                                            // CompleteVehicleCharacteristics  SEQUENCE
                                                //  tractor    TractorCharacteristics                   OPTIONAL  
                                                //  trailer    CompleteVehicleCharacteristics_trailer   OPTIONAL  
                                                //  train      TrainCharacteristics                     OPTIONAL  
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::TractorCharacteristics _tmp_797;
                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor.push_back(_tmp_797);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000639\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::CompleteVehicleCharacteristicsTrailer _tmp_798;
                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer.push_back(_tmp_798);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000640\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::TrainCharacteristics _tmp_799;
                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train.push_back(_tmp_799);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m000641\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train " << tools::green("present");
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor.size() != 0) {
                                                // Field name: tractor
                                                    // TractorCharacteristics  SEQUENCE
                                                        //  equalTo    TractorCharacteristics_equalTo      OPTIONAL  
                                                        //  notEqualTo TractorCharacteristics_notEqualTo   OPTIONAL  
                                                        //  ranges     TractorCharacteristics_ranges       OPTIONAL  
                                                    if(*(buffer++)) { 
                                                        dsrc_v2_ivi_msgs::msg::TractorCharacteristicsEqualTo _tmp_800;
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to.push_back(_tmp_800);
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000642\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to " << tools::green("present");
                                                    }
                                                    if(*(buffer++)) { 
                                                        dsrc_v2_ivi_msgs::msg::TractorCharacteristicsNotEqualTo _tmp_801;
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to.push_back(_tmp_801);
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000643\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to " << tools::green("present");
                                                    }
                                                    if(*(buffer++)) { 
                                                        dsrc_v2_ivi_msgs::msg::TractorCharacteristicsRanges _tmp_802;
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges.push_back(_tmp_802);
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m000644\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges " << tools::green("present");
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to.size() != 0) {
                                                        // Field name: equal_to
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                        uint8_t* _ext_flag_201 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000645\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].: " << int(*_ext_flag_201);
                                                        }
                                                        
                                                        int16_t* _tmp_803 = (int16_t*)buffer;
                                                        buffer += 2;
                                                        __aux64__ = *_tmp_803;
                                                        __aux64__ += 1;     // +min
                                                        
                                                        int _if__tmp_803 = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000646\033[0m| SequenceOf ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0]. size: " << int(*_tmp_803);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        for(int u = 0; u < _if__tmp_803; u++) {
                                                            dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_u;  // CHOICE
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements.push_back(seqof_u);
                                                        
                                                            // Choice
                                                            uint8_t* _ext_flag_202 = (uint8_t*)buffer++; // ext flag
                                                            
                                                               // #0  simpleVehicleType   StationType   
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                               // #2  iso3833VehicleType   Iso3833VehicleType   
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                               // #4  engineCharacteristics   EngineCharacteristics   
                                                               // #5  loadType   LoadType   
                                                               // #6  usage   VehicleRole   
                                                            uint8_t _choice_27 = *(buffer++);
                                                            
                                                            if(*_ext_flag_202)
                                                                _choice_27 += 6 + 1; // Ext addition
                                                            
                                                            if(_choice_27 == 0) {
                                                                its_container_v1_its_container_msgs::msg::StationType _tmp_804;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].simple_vehicle_type.push_back(_tmp_804);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_805 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_805;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000647\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_27 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_806;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code.push_back(_tmp_806);
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                                uint8_t _choice_28 = *(buffer++);
                                                                
                                                                if(_choice_28 == 0) {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_807;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_807);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                    uint8_t* _tmp_808 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_808;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000648\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_28 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_809;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_809);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_810 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_810;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000649\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_28 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_811;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_811);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_812 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_812;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000650\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_28 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_813;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_813);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                    uint8_t* _tmp_814 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_814;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000651\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(_choice_28) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_27 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_815;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type.push_back(_tmp_815);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_816 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_816;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000652\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_27 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_817;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value.push_back(_tmp_817);
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    
                                                                    // Field name: euro_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                    uint8_t* _tmp_818 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_818;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000653\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    // Field name: cop_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                    uint8_t* _tmp_819 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_819;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000654\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                            }
                                                            else if(_choice_27 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_820;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].engine_characteristics.push_back(_tmp_820);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_821 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_821;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000655\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_27 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                            {
                                                                dsrc_v2_ivi_msgs::msg::LoadType _tmp_822;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type.push_back(_tmp_822);
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    
                                                                    // Field name: goods_type
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _ext_flag_210 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000656\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.: " << int(*_ext_flag_210);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_210) {
                                                                        uint8_t* _tmp_824 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_824) {
                                                                            uint64_t* _tmp_825 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_825;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_825 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_825;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_823 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_823;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000657\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                    // Field name: dangerous_goods_type
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                    uint8_t* _tmp_826 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_826;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000658\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    // Field name: special_transport_type
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    uint8_t* _tmp_827 = (uint8_t*)buffer;
                                                                    __aux64__ = *_tmp_827 + 4;
                                                                    buffer += 1;
                                                                    
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000659\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.value: " << __aux64__;
                                                                    
                                                                    int _if__tmp_827 = __aux64__;
                                                                    for(int v = 0; v < _if__tmp_827; v++) {
                                                                        uint8_t __c__;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values.push_back(__c__);
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.values[v] = (*__b__ == 1);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_27 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                            {
                                                                its_container_v1_its_container_msgs::msg::VehicleRole _tmp_828;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].usage.push_back(_tmp_828);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_829 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_829;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].usage[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000660\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].equal_to[0].elements[u].usage[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                uint16_t* _tmp_830 = (uint16_t*)buffer;  // OpenType length
                                                                buffer += 2 + int(*_tmp_830);            // Ignoring opentype data
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to.size() != 0) {
                                                        // Field name: not_equal_to
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                        uint8_t* _ext_flag_213 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000661\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].: " << int(*_ext_flag_213);
                                                        }
                                                        
                                                        int16_t* _tmp_831 = (int16_t*)buffer;
                                                        buffer += 2;
                                                        __aux64__ = *_tmp_831;
                                                        __aux64__ += 1;     // +min
                                                        
                                                        int _if__tmp_831 = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000662\033[0m| SequenceOf ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0]. size: " << int(*_tmp_831);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        for(int w = 0; w < _if__tmp_831; w++) {
                                                            dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_w;  // CHOICE
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements.push_back(seqof_w);
                                                        
                                                            // Choice
                                                            uint8_t* _ext_flag_214 = (uint8_t*)buffer++; // ext flag
                                                            
                                                               // #0  simpleVehicleType   StationType   
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                               // #2  iso3833VehicleType   Iso3833VehicleType   
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                               // #4  engineCharacteristics   EngineCharacteristics   
                                                               // #5  loadType   LoadType   
                                                               // #6  usage   VehicleRole   
                                                            uint8_t _choice_29 = *(buffer++);
                                                            
                                                            if(*_ext_flag_214)
                                                                _choice_29 += 6 + 1; // Ext addition
                                                            
                                                            if(_choice_29 == 0) {
                                                                its_container_v1_its_container_msgs::msg::StationType _tmp_832;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type.push_back(_tmp_832);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_833 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_833;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000663\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_29 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_834;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code.push_back(_tmp_834);
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                                uint8_t _choice_30 = *(buffer++);
                                                                
                                                                if(_choice_30 == 0) {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_835;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_835);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                    uint8_t* _tmp_836 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_836;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000664\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_30 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_837;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_837);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_838 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_838;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000665\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_30 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_839;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_839);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_840 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_840;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000666\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_30 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_841;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_841);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                    uint8_t* _tmp_842 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_842;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000667\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(_choice_30) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_29 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_843;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type.push_back(_tmp_843);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_844 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_844;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000668\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_29 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_845;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value.push_back(_tmp_845);
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    
                                                                    // Field name: euro_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                    uint8_t* _tmp_846 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_846;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000669\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    // Field name: cop_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                    uint8_t* _tmp_847 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_847;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000670\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                            }
                                                            else if(_choice_29 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_848;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].engine_characteristics.push_back(_tmp_848);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_849 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_849;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000671\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_29 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                            {
                                                                dsrc_v2_ivi_msgs::msg::LoadType _tmp_850;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type.push_back(_tmp_850);
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    
                                                                    // Field name: goods_type
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _ext_flag_222 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000672\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.: " << int(*_ext_flag_222);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_222) {
                                                                        uint8_t* _tmp_852 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_852) {
                                                                            uint64_t* _tmp_853 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_853;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_853 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_853;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_851 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_851;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000673\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                    // Field name: dangerous_goods_type
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                    uint8_t* _tmp_854 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_854;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000674\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    // Field name: special_transport_type
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    uint8_t* _tmp_855 = (uint8_t*)buffer;
                                                                    __aux64__ = *_tmp_855 + 4;
                                                                    buffer += 1;
                                                                    
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m000675\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.value: " << __aux64__;
                                                                    
                                                                    int _if__tmp_855 = __aux64__;
                                                                    for(int x = 0; x < _if__tmp_855; x++) {
                                                                        uint8_t __c__;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values.push_back(__c__);
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.values[x] = (*__b__ == 1);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_29 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                            {
                                                                its_container_v1_its_container_msgs::msg::VehicleRole _tmp_856;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].usage.push_back(_tmp_856);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_857 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_857;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].usage[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000676\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[w].usage[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                uint16_t* _tmp_858 = (uint16_t*)buffer;  // OpenType length
                                                                buffer += 2 + int(*_tmp_858);            // Ignoring opentype data
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges.size() != 0) {
                                                        // Field name: ranges
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                        uint8_t* _ext_flag_225 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000677\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].: " << int(*_ext_flag_225);
                                                        }
                                                        
                                                        int16_t* _tmp_859 = (int16_t*)buffer;
                                                        buffer += 2;
                                                        __aux64__ = *_tmp_859;
                                                        __aux64__ += 1;     // +min
                                                        
                                                        int _if__tmp_859 = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m000678\033[0m| SequenceOf ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0]. size: " << int(*_tmp_859);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        for(int y = 0; y < _if__tmp_859; y++) {
                                                            dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRanges seqof_y;  // SEQUENCE
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements.push_back(seqof_y);
                                                        
                                                                // VehicleCharacteristicsRanges  SEQUENCE
                                                                    //  comparisonOperator ComparisonOperator                      
                                                                    //  limits             VehicleCharacteristicsRanges_limits     
                                                                
                                                                // Field name: comparison_operator
                                                                // Integer
                                                                // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                                                uint8_t* _tmp_860 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_860;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].comparison_operator.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000679\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].comparison_operator.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].comparison_operator.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].comparison_operator.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].comparison_operator.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: limits
                                                                // Choice
                                                                uint8_t* _ext_flag_226 = (uint8_t*)buffer++; // ext flag
                                                                
                                                                   // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles   
                                                                   // #1  vehicleDimensions   VehicleDimensions   
                                                                   // #2  vehicleWeightLimits   VehicleWeightLimits   
                                                                   // #3  axleWeightLimits   AxleWeightLimits   
                                                                   // #4  passengerCapacity   PassengerCapacity   
                                                                   // #5  exhaustEmissionValues   ExhaustEmissionValues   
                                                                   // #6  dieselEmissionValues   DieselEmissionValues   
                                                                   // #7  soundLevel   SoundLevel   
                                                                uint8_t _choice_31 = *(buffer++);
                                                                
                                                                if(*_ext_flag_226)
                                                                    _choice_31 += 7 + 1; // Ext addition
                                                                
                                                                if(_choice_31 == 0) {
                                                                    dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRangesLimitsNumberOfAxles _tmp_861;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.number_of_axles.push_back(_tmp_861);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                                    uint8_t* _tmp_862 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_862;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000680\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.number_of_axles[0].value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_31 == 1)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_dimensions)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::VehicleDimensions _tmp_863;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions.push_back(_tmp_863);
                                                                
                                                                        // VehicleDimensions  SEQUENCE
                                                                            //  vehicleLengthOverall Int1           
                                                                            //  vehicleHeigthOverall Int1           
                                                                            //  vehicleWidthOverall  Int1           
                                                                        
                                                                        // Field name: vehicle_length_overall
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_864 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_864;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000681\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_heigth_overall
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_865 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_865;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000682\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_width_overall
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_866 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_866;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000683\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_31 == 2)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_weight_limits)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::VehicleWeightLimits _tmp_867;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits.push_back(_tmp_867);
                                                                
                                                                        // VehicleWeightLimits  SEQUENCE
                                                                            //  vehicleMaxLadenWeight     Int2           
                                                                            //  vehicleTrainMaximumWeight Int2           
                                                                            //  vehicleWeightUnladen      Int2           
                                                                        
                                                                        // Field name: vehicle_max_laden_weight
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_868 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_868;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000684\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_train_maximum_weight
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_869 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_869;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000685\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_weight_unladen
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_870 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_870;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000686\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_31 == 3)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(axle_weight_limits)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::AxleWeightLimits _tmp_871;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits.push_back(_tmp_871);
                                                                
                                                                        // AxleWeightLimits  SEQUENCE
                                                                            //  maxLadenweightOnAxle1 Int2           
                                                                            //  maxLadenweightOnAxle2 Int2           
                                                                            //  maxLadenweightOnAxle3 Int2           
                                                                            //  maxLadenweightOnAxle4 Int2           
                                                                            //  maxLadenweightOnAxle5 Int2           
                                                                        
                                                                        // Field name: max_ladenweight_on_axle1
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_872 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_872;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000687\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle2
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_873 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_873;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000688\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle3
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_874 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_874;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000689\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle4
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_875 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_875;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000690\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle5
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_876 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_876;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000691\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_31 == 4)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(passenger_capacity)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::PassengerCapacity _tmp_877;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity.push_back(_tmp_877);
                                                                
                                                                        // PassengerCapacity  SEQUENCE
                                                                            //  numberOfSeats          Int1           
                                                                            //  numberOfStandingPlaces Int1           
                                                                        
                                                                        // Field name: number_of_seats
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_878 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_878;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000692\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: number_of_standing_places
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_879 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_879;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000693\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_31 == 5)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(exhaust_emission_values)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::ExhaustEmissionValues _tmp_880;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values.push_back(_tmp_880);
                                                                
                                                                        // ExhaustEmissionValues  SEQUENCE
                                                                            //  unitType      UnitType                             
                                                                            //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                            //  emissionHC    Int2                                 
                                                                            //  emissionNOX   Int2                                 
                                                                            //  emissionHCNOX Int2                                 
                                                                        
                                                                        // Field name: unit_type
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                        uint8_t* _tmp_881 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_881;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000694\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value);
                                                                        }
                                                                        
                                                                        // Field name: emission_co
                                                                        // Integer
                                                                        // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                        uint16_t* _tmp_882 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_882;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000695\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: emission_hc
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_883 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_883;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000696\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: emission_nox
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_884 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_884;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000697\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: emission_hcnox
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_885 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_885;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000698\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_31 == 6)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(diesel_emission_values)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::DieselEmissionValues _tmp_886;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values.push_back(_tmp_886);
                                                                
                                                                        // DieselEmissionValues  SEQUENCE
                                                                            //  particulate     DieselEmissionValues_particulate     
                                                                            //  absorptionCoeff Int2                                 
                                                                        
                                                                        // Field name: particulate
                                                                            // DieselEmissionValues_particulate  SEQUENCE
                                                                                //  unitType   UnitType                                   
                                                                                //  value      DieselEmissionValues_particulate_value     
                                                                            
                                                                            // Field name: unit_type
                                                                            // Enumerated
                                                                            // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                            uint8_t* _tmp_887 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_887;
                                                                            __aux64__ += 0;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value = __aux64__;
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000699\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                            }
                                                                            
                                                                            // Field name: value
                                                                            // Integer
                                                                            // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                            uint16_t* _tmp_888 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_888;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000700\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                                return false;
                                                                            }
                                                                        
                                                                        // Field name: absorption_coeff
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_889 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_889;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000701\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_31 == 7)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(sound_level)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::SoundLevel _tmp_890;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level.push_back(_tmp_890);
                                                                
                                                                        // SoundLevel  SEQUENCE
                                                                            //  soundstationary Int1           
                                                                            //  sounddriveby    Int1           
                                                                        
                                                                        // Field name: soundstationary
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_891 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_891;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000702\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: sounddriveby
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_892 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_892;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000703\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].tractor[0].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else
                                                                {
                                                                    uint16_t* _tmp_893 = (uint16_t*)buffer;  // OpenType length
                                                                    buffer += 2 + int(*_tmp_893);            // Ignoring opentype data
                                                                }
                                                        }
                                                    }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer.size() != 0) {
                                                // Field name: trailer
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(3) span(3)
                                                int16_t* _tmp_894 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_894;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_894 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000704\033[0m| SequenceOf ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0]. size: " << int(*_tmp_894);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int z = 0; z < _if__tmp_894; z++) {
                                                    dsrc_v2_ivi_msgs::msg::TrailerCharacteristics seqof_z;  // SEQUENCE
                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements.push_back(seqof_z);
                                                
                                                        // TrailerCharacteristics  SEQUENCE
                                                            //  equalTo    TrailerCharacteristics_equalTo      OPTIONAL  
                                                            //  notEqualTo TrailerCharacteristics_notEqualTo   OPTIONAL  
                                                            //  ranges     TrailerCharacteristics_ranges       OPTIONAL  
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::TrailerCharacteristicsEqualTo _tmp_895;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to.push_back(_tmp_895);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000705\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to " << tools::green("present");
                                                        }
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::TrailerCharacteristicsNotEqualTo _tmp_896;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to.push_back(_tmp_896);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000706\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to " << tools::green("present");
                                                        }
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::TrailerCharacteristicsRanges _tmp_897;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges.push_back(_tmp_897);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m000707\033[0m| ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges " << tools::green("present");
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to.size() != 0) {
                                                            // Field name: equal_to
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(4) span(4)
                                                            uint8_t* _ext_flag_229 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000708\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].: " << int(*_ext_flag_229);
                                                            }
                                                            
                                                            int16_t* _tmp_898 = (int16_t*)buffer;
                                                            buffer += 2;
                                                            __aux64__ = *_tmp_898;
                                                            __aux64__ += 1;     // +min
                                                            
                                                            int _if__tmp_898 = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000709\033[0m| SequenceOf ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0]. size: " << int(*_tmp_898);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            for(int a = 0; a < _if__tmp_898; a++) {
                                                                dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_a;  // CHOICE
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements.push_back(seqof_a);
                                                            
                                                                // Choice
                                                                uint8_t* _ext_flag_230 = (uint8_t*)buffer++; // ext flag
                                                                
                                                                   // #0  simpleVehicleType   StationType   
                                                                   // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                                   // #2  iso3833VehicleType   Iso3833VehicleType   
                                                                   // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                                   // #4  engineCharacteristics   EngineCharacteristics   
                                                                   // #5  loadType   LoadType   
                                                                   // #6  usage   VehicleRole   
                                                                uint8_t _choice_32 = *(buffer++);
                                                                
                                                                if(*_ext_flag_230)
                                                                    _choice_32 += 6 + 1; // Ext addition
                                                                
                                                                if(_choice_32 == 0) {
                                                                    its_container_v1_its_container_msgs::msg::StationType _tmp_899;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type.push_back(_tmp_899);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_900 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_900;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000710\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_32 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_901;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code.push_back(_tmp_901);
                                                                
                                                                    // Choice
                                                                       // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                                       // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                                       // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                                       // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                                    uint8_t _choice_33 = *(buffer++);
                                                                    
                                                                    if(_choice_33 == 0) {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_902;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_902);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                        uint8_t* _tmp_903 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_903;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000711\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                        }
                                                                    }
                                                                    else if(_choice_33 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                                    {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_904;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_904);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                        uint8_t* _tmp_905 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_905;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000712\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                        }
                                                                    }
                                                                    else if(_choice_33 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                                    {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_906;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_906);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                        uint8_t* _tmp_907 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_907;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000713\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                        }
                                                                    }
                                                                    else if(_choice_33 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                                    {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_908;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_908);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                        uint8_t* _tmp_909 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_909;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000714\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        logger->warning() << "Wrong option (" << static_cast<int>(_choice_33) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].eu_vehicle_category_code[0]'; message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_32 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_910;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type.push_back(_tmp_910);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_911 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_911;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000715\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_32 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_912;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value.push_back(_tmp_912);
                                                                
                                                                        // EnvironmentalCharacteristics  SEQUENCE
                                                                            //  euroValue  EuroValue      
                                                                            //  copValue   CopValue       
                                                                        
                                                                        // Field name: euro_value
                                                                        // Enumerated
                                                                        // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                        uint8_t* _tmp_913 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_913;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000716\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].euro_value.value);
                                                                        }
                                                                        
                                                                        // Field name: cop_value
                                                                        // Enumerated
                                                                        // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                        uint8_t* _tmp_914 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_914;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000717\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].euro_and_co2value[0].cop_value.value);
                                                                        }
                                                                }
                                                                else if(_choice_32 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_915;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics.push_back(_tmp_915);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_916 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_916;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000718\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_32 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                                {
                                                                    dsrc_v2_ivi_msgs::msg::LoadType _tmp_917;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type.push_back(_tmp_917);
                                                                
                                                                        // LoadType  SEQUENCE
                                                                            //  goodsType            GoodsType                
                                                                            //  dangerousGoodsType   DangerousGoodsBasic      
                                                                            //  specialTransportType SpecialTransportType     
                                                                        
                                                                        // Field name: goods_type
                                                                        // Integer
                                                                        // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                        uint8_t* _ext_flag_238 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000719\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.: " << int(*_ext_flag_238);
                                                                        }
                                                                        
                                                                        if(*_ext_flag_238) {
                                                                            uint8_t* _tmp_919 = (uint8_t*) buffer++;
                                                                            
                                                                            if(*_tmp_919) {
                                                                                uint64_t* _tmp_920 = (uint64_t*)buffer; buffer += 8;
                                                                                __aux64__ = *_tmp_920;
                                                                                __aux64__ += INT64_MIN;
                                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value = __aux64__;
                                                                            }
                                                                            else
                                                                            {
                                                                                uint32_t* _tmp_920 = (uint32_t*) buffer; buffer += 4;
                                                                                __aux64__ = *_tmp_920;
                                                                                __aux64__ += INT32_MIN;
                                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value = __aux64__;
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            uint8_t* _tmp_918 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_918;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value = __aux64__;
                                                                        
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000720\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                        }
                                                                        
                                                                        // Field name: dangerous_goods_type
                                                                        // Enumerated
                                                                        // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                        uint8_t* _tmp_921 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_921;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000721\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].dangerous_goods_type.value);
                                                                        }
                                                                        
                                                                        // Field name: special_transport_type
                                                                        // BitString
                                                                        // BIT_STRING  min(4) max(4) span(1)
                                                                        uint8_t* _tmp_922 = (uint8_t*)buffer;
                                                                        __aux64__ = *_tmp_922 + 4;
                                                                        buffer += 1;
                                                                        
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000722\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.value: " << __aux64__;
                                                                        
                                                                        int _if__tmp_922 = __aux64__;
                                                                        for(int b = 0; b < _if__tmp_922; b++) {
                                                                            uint8_t __c__;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values.push_back(__c__);
                                                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.values[b] = (*__b__ == 1);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_32 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                                {
                                                                    its_container_v1_its_container_msgs::msg::VehicleRole _tmp_923;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].usage.push_back(_tmp_923);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                    uint8_t* _tmp_924 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_924;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000723\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].equal_to[0].elements[a].usage[0].value);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint16_t* _tmp_925 = (uint16_t*)buffer;  // OpenType length
                                                                    buffer += 2 + int(*_tmp_925);            // Ignoring opentype data
                                                                }
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to.size() != 0) {
                                                            // Field name: not_equal_to
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(4) span(4)
                                                            uint8_t* _ext_flag_241 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000724\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].: " << int(*_ext_flag_241);
                                                            }
                                                            
                                                            int16_t* _tmp_926 = (int16_t*)buffer;
                                                            buffer += 2;
                                                            __aux64__ = *_tmp_926;
                                                            __aux64__ += 1;     // +min
                                                            
                                                            int _if__tmp_926 = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000725\033[0m| SequenceOf ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0]. size: " << int(*_tmp_926);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            for(int c = 0; c < _if__tmp_926; c++) {
                                                                dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_c;  // CHOICE
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements.push_back(seqof_c);
                                                            
                                                                // Choice
                                                                uint8_t* _ext_flag_242 = (uint8_t*)buffer++; // ext flag
                                                                
                                                                   // #0  simpleVehicleType   StationType   
                                                                   // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                                   // #2  iso3833VehicleType   Iso3833VehicleType   
                                                                   // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                                   // #4  engineCharacteristics   EngineCharacteristics   
                                                                   // #5  loadType   LoadType   
                                                                   // #6  usage   VehicleRole   
                                                                uint8_t _choice_34 = *(buffer++);
                                                                
                                                                if(*_ext_flag_242)
                                                                    _choice_34 += 6 + 1; // Ext addition
                                                                
                                                                if(_choice_34 == 0) {
                                                                    its_container_v1_its_container_msgs::msg::StationType _tmp_927;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type.push_back(_tmp_927);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_928 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_928;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000726\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_34 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_929;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code.push_back(_tmp_929);
                                                                
                                                                    // Choice
                                                                       // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                                       // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                                       // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                                       // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                                    uint8_t _choice_35 = *(buffer++);
                                                                    
                                                                    if(_choice_35 == 0) {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_930;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_930);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                        uint8_t* _tmp_931 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_931;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000727\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                        }
                                                                    }
                                                                    else if(_choice_35 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                                    {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_932;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_932);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                        uint8_t* _tmp_933 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_933;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000728\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                        }
                                                                    }
                                                                    else if(_choice_35 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                                    {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_934;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_934);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                        uint8_t* _tmp_935 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_935;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000729\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                        }
                                                                    }
                                                                    else if(_choice_35 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                                    {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_936;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_936);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                        uint8_t* _tmp_937 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_937;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000730\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        logger->warning() << "Wrong option (" << static_cast<int>(_choice_35) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].eu_vehicle_category_code[0]'; message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_34 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_938;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type.push_back(_tmp_938);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_939 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_939;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000731\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_34 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_940;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value.push_back(_tmp_940);
                                                                
                                                                        // EnvironmentalCharacteristics  SEQUENCE
                                                                            //  euroValue  EuroValue      
                                                                            //  copValue   CopValue       
                                                                        
                                                                        // Field name: euro_value
                                                                        // Enumerated
                                                                        // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                        uint8_t* _tmp_941 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_941;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000732\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].euro_value.value);
                                                                        }
                                                                        
                                                                        // Field name: cop_value
                                                                        // Enumerated
                                                                        // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                        uint8_t* _tmp_942 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_942;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000733\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].euro_and_co2value[0].cop_value.value);
                                                                        }
                                                                }
                                                                else if(_choice_34 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_943;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics.push_back(_tmp_943);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_944 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_944;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000734\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_34 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                                {
                                                                    dsrc_v2_ivi_msgs::msg::LoadType _tmp_945;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type.push_back(_tmp_945);
                                                                
                                                                        // LoadType  SEQUENCE
                                                                            //  goodsType            GoodsType                
                                                                            //  dangerousGoodsType   DangerousGoodsBasic      
                                                                            //  specialTransportType SpecialTransportType     
                                                                        
                                                                        // Field name: goods_type
                                                                        // Integer
                                                                        // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                        uint8_t* _ext_flag_250 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000735\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.: " << int(*_ext_flag_250);
                                                                        }
                                                                        
                                                                        if(*_ext_flag_250) {
                                                                            uint8_t* _tmp_947 = (uint8_t*) buffer++;
                                                                            
                                                                            if(*_tmp_947) {
                                                                                uint64_t* _tmp_948 = (uint64_t*)buffer; buffer += 8;
                                                                                __aux64__ = *_tmp_948;
                                                                                __aux64__ += INT64_MIN;
                                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value = __aux64__;
                                                                            }
                                                                            else
                                                                            {
                                                                                uint32_t* _tmp_948 = (uint32_t*) buffer; buffer += 4;
                                                                                __aux64__ = *_tmp_948;
                                                                                __aux64__ += INT32_MIN;
                                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value = __aux64__;
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            uint8_t* _tmp_946 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_946;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value = __aux64__;
                                                                        
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000736\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                        }
                                                                        
                                                                        // Field name: dangerous_goods_type
                                                                        // Enumerated
                                                                        // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                        uint8_t* _tmp_949 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_949;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000737\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].dangerous_goods_type.value);
                                                                        }
                                                                        
                                                                        // Field name: special_transport_type
                                                                        // BitString
                                                                        // BIT_STRING  min(4) max(4) span(1)
                                                                        uint8_t* _tmp_950 = (uint8_t*)buffer;
                                                                        __aux64__ = *_tmp_950 + 4;
                                                                        buffer += 1;
                                                                        
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m000738\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.value: " << __aux64__;
                                                                        
                                                                        int _if__tmp_950 = __aux64__;
                                                                        for(int d = 0; d < _if__tmp_950; d++) {
                                                                            uint8_t __c__;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values.push_back(__c__);
                                                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.values[d] = (*__b__ == 1);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_34 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                                {
                                                                    its_container_v1_its_container_msgs::msg::VehicleRole _tmp_951;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].usage.push_back(_tmp_951);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                    uint8_t* _tmp_952 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_952;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000739\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].not_equal_to[0].elements[c].usage[0].value);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint16_t* _tmp_953 = (uint16_t*)buffer;  // OpenType length
                                                                    buffer += 2 + int(*_tmp_953);            // Ignoring opentype data
                                                                }
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges.size() != 0) {
                                                            // Field name: ranges
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(4) span(4)
                                                            uint8_t* _ext_flag_253 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000740\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].: " << int(*_ext_flag_253);
                                                            }
                                                            
                                                            int16_t* _tmp_954 = (int16_t*)buffer;
                                                            buffer += 2;
                                                            __aux64__ = *_tmp_954;
                                                            __aux64__ += 1;     // +min
                                                            
                                                            int _if__tmp_954 = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000741\033[0m| SequenceOf ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0]. size: " << int(*_tmp_954);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            for(int e = 0; e < _if__tmp_954; e++) {
                                                                dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRanges seqof_e;  // SEQUENCE
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements.push_back(seqof_e);
                                                            
                                                                    // VehicleCharacteristicsRanges  SEQUENCE
                                                                        //  comparisonOperator ComparisonOperator                      
                                                                        //  limits             VehicleCharacteristicsRanges_limits     
                                                                    
                                                                    // Field name: comparison_operator
                                                                    // Integer
                                                                    // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                                                    uint8_t* _tmp_955 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_955;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000742\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].comparison_operator.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: limits
                                                                    // Choice
                                                                    uint8_t* _ext_flag_254 = (uint8_t*)buffer++; // ext flag
                                                                    
                                                                       // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles   
                                                                       // #1  vehicleDimensions   VehicleDimensions   
                                                                       // #2  vehicleWeightLimits   VehicleWeightLimits   
                                                                       // #3  axleWeightLimits   AxleWeightLimits   
                                                                       // #4  passengerCapacity   PassengerCapacity   
                                                                       // #5  exhaustEmissionValues   ExhaustEmissionValues   
                                                                       // #6  dieselEmissionValues   DieselEmissionValues   
                                                                       // #7  soundLevel   SoundLevel   
                                                                    uint8_t _choice_36 = *(buffer++);
                                                                    
                                                                    if(*_ext_flag_254)
                                                                        _choice_36 += 7 + 1; // Ext addition
                                                                    
                                                                    if(_choice_36 == 0) {
                                                                        dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRangesLimitsNumberOfAxles _tmp_956;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles.push_back(_tmp_956);
                                                                    
                                                                        // Integer
                                                                        // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                                        uint8_t* _tmp_957 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_957;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000743\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.number_of_axles[0].value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                            return false;
                                                                        }
                                                                    }
                                                                    else if(_choice_36 == 1)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_dimensions)
                                                                    {
                                                                        dsrc_v2_efcdsrcapplication_msgs::msg::VehicleDimensions _tmp_958;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions.push_back(_tmp_958);
                                                                    
                                                                            // VehicleDimensions  SEQUENCE
                                                                                //  vehicleLengthOverall Int1           
                                                                                //  vehicleHeigthOverall Int1           
                                                                                //  vehicleWidthOverall  Int1           
                                                                            
                                                                            // Field name: vehicle_length_overall
                                                                            // Integer
                                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                            uint8_t* _tmp_959 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_959;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000744\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: vehicle_heigth_overall
                                                                            // Integer
                                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                            uint8_t* _tmp_960 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_960;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000745\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: vehicle_width_overall
                                                                            // Integer
                                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                            uint8_t* _tmp_961 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_961;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000746\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    else if(_choice_36 == 2)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_weight_limits)
                                                                    {
                                                                        dsrc_v2_efcdsrcapplication_msgs::msg::VehicleWeightLimits _tmp_962;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits.push_back(_tmp_962);
                                                                    
                                                                            // VehicleWeightLimits  SEQUENCE
                                                                                //  vehicleMaxLadenWeight     Int2           
                                                                                //  vehicleTrainMaximumWeight Int2           
                                                                                //  vehicleWeightUnladen      Int2           
                                                                            
                                                                            // Field name: vehicle_max_laden_weight
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_963 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_963;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000747\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: vehicle_train_maximum_weight
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_964 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_964;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000748\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: vehicle_weight_unladen
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_965 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_965;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000749\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    else if(_choice_36 == 3)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(axle_weight_limits)
                                                                    {
                                                                        dsrc_v2_efcdsrcapplication_msgs::msg::AxleWeightLimits _tmp_966;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits.push_back(_tmp_966);
                                                                    
                                                                            // AxleWeightLimits  SEQUENCE
                                                                                //  maxLadenweightOnAxle1 Int2           
                                                                                //  maxLadenweightOnAxle2 Int2           
                                                                                //  maxLadenweightOnAxle3 Int2           
                                                                                //  maxLadenweightOnAxle4 Int2           
                                                                                //  maxLadenweightOnAxle5 Int2           
                                                                            
                                                                            // Field name: max_ladenweight_on_axle1
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_967 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_967;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000750\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: max_ladenweight_on_axle2
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_968 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_968;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000751\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: max_ladenweight_on_axle3
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_969 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_969;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000752\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: max_ladenweight_on_axle4
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_970 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_970;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000753\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: max_ladenweight_on_axle5
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_971 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_971;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000754\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    else if(_choice_36 == 4)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(passenger_capacity)
                                                                    {
                                                                        dsrc_v2_efcdsrcapplication_msgs::msg::PassengerCapacity _tmp_972;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity.push_back(_tmp_972);
                                                                    
                                                                            // PassengerCapacity  SEQUENCE
                                                                                //  numberOfSeats          Int1           
                                                                                //  numberOfStandingPlaces Int1           
                                                                            
                                                                            // Field name: number_of_seats
                                                                            // Integer
                                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                            uint8_t* _tmp_973 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_973;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000755\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: number_of_standing_places
                                                                            // Integer
                                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                            uint8_t* _tmp_974 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_974;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000756\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    else if(_choice_36 == 5)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(exhaust_emission_values)
                                                                    {
                                                                        dsrc_v2_efcdsrcapplication_msgs::msg::ExhaustEmissionValues _tmp_975;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values.push_back(_tmp_975);
                                                                    
                                                                            // ExhaustEmissionValues  SEQUENCE
                                                                                //  unitType      UnitType                             
                                                                                //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                                //  emissionHC    Int2                                 
                                                                                //  emissionNOX   Int2                                 
                                                                                //  emissionHCNOX Int2                                 
                                                                            
                                                                            // Field name: unit_type
                                                                            // Enumerated
                                                                            // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                            uint8_t* _tmp_976 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_976;
                                                                            __aux64__ += 0;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value = __aux64__;
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000757\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].unit_type.value);
                                                                            }
                                                                            
                                                                            // Field name: emission_co
                                                                            // Integer
                                                                            // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                            uint16_t* _tmp_977 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_977;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000758\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: emission_hc
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_978 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_978;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000759\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: emission_nox
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_979 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_979;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000760\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: emission_hcnox
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_980 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_980;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000761\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    else if(_choice_36 == 6)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(diesel_emission_values)
                                                                    {
                                                                        dsrc_v2_efcdsrcapplication_msgs::msg::DieselEmissionValues _tmp_981;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values.push_back(_tmp_981);
                                                                    
                                                                            // DieselEmissionValues  SEQUENCE
                                                                                //  particulate     DieselEmissionValues_particulate     
                                                                                //  absorptionCoeff Int2                                 
                                                                            
                                                                            // Field name: particulate
                                                                                // DieselEmissionValues_particulate  SEQUENCE
                                                                                    //  unitType   UnitType                                   
                                                                                    //  value      DieselEmissionValues_particulate_value     
                                                                                
                                                                                // Field name: unit_type
                                                                                // Enumerated
                                                                                // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                                uint8_t* _tmp_982 = (uint8_t*) buffer++;
                                                                                __aux64__ = *_tmp_982;
                                                                                __aux64__ += 0;
                                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value = __aux64__;
                                                                                // ******************* MIN validator *******************
                                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                    return false;
                                                                                }
                                                                                // ******************* MAX validator *******************
                                                                                if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                                    return false;
                                                                                }
                                                                                
                                                                                
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m000762\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                                }
                                                                                
                                                                                // Field name: value
                                                                                // Integer
                                                                                // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                                uint16_t* _tmp_983 = (uint16_t*) buffer; buffer += 2;
                                                                                __aux64__ = *_tmp_983;
                                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value = __aux64__;
                                                                                
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m000763\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value;
                                                                                }
                                                                                
                                                                                // ******************* MIN validator *******************
                                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                    return false;
                                                                                }
                                                                                // ******************* MAX validator *******************
                                                                                if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                                    return false;
                                                                                }
                                                                            
                                                                            // Field name: absorption_coeff
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_984 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_984;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000764\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    else if(_choice_36 == 7)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(sound_level)
                                                                    {
                                                                        dsrc_v2_efcdsrcapplication_msgs::msg::SoundLevel _tmp_985;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level.push_back(_tmp_985);
                                                                    
                                                                            // SoundLevel  SEQUENCE
                                                                                //  soundstationary Int1           
                                                                                //  sounddriveby    Int1           
                                                                            
                                                                            // Field name: soundstationary
                                                                            // Integer
                                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                            uint8_t* _tmp_986 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_986;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000765\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: sounddriveby
                                                                            // Integer
                                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                            uint8_t* _tmp_987 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_987;
                                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m000766\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value) << 
                                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].trailer[0].elements[z].ranges[0].elements[e].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint16_t* _tmp_988 = (uint16_t*)buffer;  // OpenType length
                                                                        buffer += 2 + int(*_tmp_988);            // Ignoring opentype data
                                                                    }
                                                            }
                                                        }
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train.size() != 0) {
                                                // Field name: train
                                                    // TrainCharacteristics  SEQUENCE
                                                        //  equalTo    TractorCharacteristics_equalTo        
                                                        //  notEqualTo TractorCharacteristics_notEqualTo     
                                                        //  ranges     TractorCharacteristics_ranges         
                                                    
                                                    // Field name: equal_to
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4)
                                                    uint8_t* _ext_flag_257 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000767\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.: " << int(*_ext_flag_257);
                                                    }
                                                    
                                                    int16_t* _tmp_989 = (int16_t*)buffer;
                                                    buffer += 2;
                                                    __aux64__ = *_tmp_989;
                                                    __aux64__ += 1;     // +min
                                                    
                                                    int _if__tmp_989 = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000768\033[0m| SequenceOf ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to. size: " << int(*_tmp_989);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    for(int f = 0; f < _if__tmp_989; f++) {
                                                        dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_f;  // CHOICE
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements.push_back(seqof_f);
                                                    
                                                        // Choice
                                                        uint8_t* _ext_flag_258 = (uint8_t*)buffer++; // ext flag
                                                        
                                                           // #0  simpleVehicleType   StationType   
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                           // #2  iso3833VehicleType   Iso3833VehicleType   
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                           // #4  engineCharacteristics   EngineCharacteristics   
                                                           // #5  loadType   LoadType   
                                                           // #6  usage   VehicleRole   
                                                        uint8_t _choice_37 = *(buffer++);
                                                        
                                                        if(*_ext_flag_258)
                                                            _choice_37 += 6 + 1; // Ext addition
                                                        
                                                        if(_choice_37 == 0) {
                                                            its_container_v1_its_container_msgs::msg::StationType _tmp_990;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].simple_vehicle_type.push_back(_tmp_990);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_991 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_991;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].simple_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000769\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_37 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_992;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code.push_back(_tmp_992);
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                            uint8_t _choice_38 = *(buffer++);
                                                            
                                                            if(_choice_38 == 0) {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_993;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_993);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                uint8_t* _tmp_994 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_994;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000770\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                            }
                                                            else if(_choice_38 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_995;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_995);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_996 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_996;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000771\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                            }
                                                            else if(_choice_38 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_997;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_997);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_998 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_998;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000772\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                            }
                                                            else if(_choice_38 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_999;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_999);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                uint8_t* _tmp_1000 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_1000;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000773\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(_choice_38) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].eu_vehicle_category_code[0]'; message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_37 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_1001;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].iso3833_vehicle_type.push_back(_tmp_1001);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_1002 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_1002;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000774\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_37 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_1003;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value.push_back(_tmp_1003);
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                
                                                                // Field name: euro_value
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_1004 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_1004;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000775\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                // Field name: cop_value
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                uint8_t* _tmp_1005 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_1005;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000776\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].euro_and_co2value[0].cop_value.value);
                                                                }
                                                        }
                                                        else if(_choice_37 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_1006;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].engine_characteristics.push_back(_tmp_1006);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_1007 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_1007;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].engine_characteristics[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000777\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].engine_characteristics[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_37 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                        {
                                                            dsrc_v2_ivi_msgs::msg::LoadType _tmp_1008;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type.push_back(_tmp_1008);
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                
                                                                // Field name: goods_type
                                                                // Integer
                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                uint8_t* _ext_flag_266 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000778\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.: " << int(*_ext_flag_266);
                                                                }
                                                                
                                                                if(*_ext_flag_266) {
                                                                    uint8_t* _tmp_1010 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_1010) {
                                                                        uint64_t* _tmp_1011 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_1011;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_1011 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_1011;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_1009 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_1009;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000779\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                                
                                                                // Field name: dangerous_goods_type
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                uint8_t* _tmp_1012 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_1012;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000780\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                // Field name: special_transport_type
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                uint8_t* _tmp_1013 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_1013 + 4;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000781\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].special_transport_type.value: " << __aux64__;
                                                                
                                                                int _if__tmp_1013 = __aux64__;
                                                                for(int g = 0; g < _if__tmp_1013; g++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].special_transport_type.values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].special_transport_type.values[g] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_37 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                        {
                                                            its_container_v1_its_container_msgs::msg::VehicleRole _tmp_1014;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].usage.push_back(_tmp_1014);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) datatype(Int32)
                                                            uint8_t* _tmp_1015 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_1015;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].usage[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000782\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].usage[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].equal_to.elements[f].usage[0].value);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            uint16_t* _tmp_1016 = (uint16_t*)buffer;  // OpenType length
                                                            buffer += 2 + int(*_tmp_1016);            // Ignoring opentype data
                                                        }
                                                    }
                                                    
                                                    // Field name: not_equal_to
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4)
                                                    uint8_t* _ext_flag_269 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000783\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.: " << int(*_ext_flag_269);
                                                    }
                                                    
                                                    int16_t* _tmp_1017 = (int16_t*)buffer;
                                                    buffer += 2;
                                                    __aux64__ = *_tmp_1017;
                                                    __aux64__ += 1;     // +min
                                                    
                                                    int _if__tmp_1017 = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000784\033[0m| SequenceOf ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to. size: " << int(*_tmp_1017);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    for(int h = 0; h < _if__tmp_1017; h++) {
                                                        dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_h;  // CHOICE
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements.push_back(seqof_h);
                                                    
                                                        // Choice
                                                        uint8_t* _ext_flag_270 = (uint8_t*)buffer++; // ext flag
                                                        
                                                           // #0  simpleVehicleType   StationType   
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                           // #2  iso3833VehicleType   Iso3833VehicleType   
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                           // #4  engineCharacteristics   EngineCharacteristics   
                                                           // #5  loadType   LoadType   
                                                           // #6  usage   VehicleRole   
                                                        uint8_t _choice_39 = *(buffer++);
                                                        
                                                        if(*_ext_flag_270)
                                                            _choice_39 += 6 + 1; // Ext addition
                                                        
                                                        if(_choice_39 == 0) {
                                                            its_container_v1_its_container_msgs::msg::StationType _tmp_1018;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].simple_vehicle_type.push_back(_tmp_1018);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_1019 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_1019;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000785\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_39 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_1020;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code.push_back(_tmp_1020);
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                            uint8_t _choice_40 = *(buffer++);
                                                            
                                                            if(_choice_40 == 0) {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_1021;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_1021);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                uint8_t* _tmp_1022 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_1022;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000786\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                            }
                                                            else if(_choice_40 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_1023;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_1023);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_1024 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_1024;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000787\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                            }
                                                            else if(_choice_40 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_1025;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_1025);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_1026 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_1026;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000788\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                            }
                                                            else if(_choice_40 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_1027;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_1027);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                uint8_t* _tmp_1028 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_1028;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000789\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(_choice_40) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].eu_vehicle_category_code[0]'; message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_39 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_1029;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].iso3833_vehicle_type.push_back(_tmp_1029);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_1030 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_1030;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000790\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_39 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_1031;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value.push_back(_tmp_1031);
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                
                                                                // Field name: euro_value
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_1032 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_1032;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000791\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                // Field name: cop_value
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                uint8_t* _tmp_1033 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_1033;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000792\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].euro_and_co2value[0].cop_value.value);
                                                                }
                                                        }
                                                        else if(_choice_39 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_1034;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].engine_characteristics.push_back(_tmp_1034);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_1035 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_1035;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].engine_characteristics[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000793\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].engine_characteristics[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_39 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                        {
                                                            dsrc_v2_ivi_msgs::msg::LoadType _tmp_1036;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type.push_back(_tmp_1036);
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                
                                                                // Field name: goods_type
                                                                // Integer
                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                uint8_t* _ext_flag_278 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000794\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.: " << int(*_ext_flag_278);
                                                                }
                                                                
                                                                if(*_ext_flag_278) {
                                                                    uint8_t* _tmp_1038 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_1038) {
                                                                        uint64_t* _tmp_1039 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_1039;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_1039 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_1039;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_1037 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_1037;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000795\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                                
                                                                // Field name: dangerous_goods_type
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                uint8_t* _tmp_1040 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_1040;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000796\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                // Field name: special_transport_type
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                uint8_t* _tmp_1041 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_1041 + 4;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m000797\033[0m| ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.value: " << __aux64__;
                                                                
                                                                int _if__tmp_1041 = __aux64__;
                                                                for(int i = 0; i < _if__tmp_1041; i++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.values[i] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_39 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                        {
                                                            its_container_v1_its_container_msgs::msg::VehicleRole _tmp_1042;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].usage.push_back(_tmp_1042);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) datatype(Int32)
                                                            uint8_t* _tmp_1043 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_1043;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].usage[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000798\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].usage[0].value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].not_equal_to.elements[h].usage[0].value);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            uint16_t* _tmp_1044 = (uint16_t*)buffer;  // OpenType length
                                                            buffer += 2 + int(*_tmp_1044);            // Ignoring opentype data
                                                        }
                                                    }
                                                    
                                                    // Field name: ranges
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4)
                                                    uint8_t* _ext_flag_281 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000799\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.: " << int(*_ext_flag_281);
                                                    }
                                                    
                                                    int16_t* _tmp_1045 = (int16_t*)buffer;
                                                    buffer += 2;
                                                    __aux64__ = *_tmp_1045;
                                                    __aux64__ += 1;     // +min
                                                    
                                                    int _if__tmp_1045 = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m000800\033[0m| SequenceOf ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges. size: " << int(*_tmp_1045);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    for(int j = 0; j < _if__tmp_1045; j++) {
                                                        dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRanges seqof_j;  // SEQUENCE
                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements.push_back(seqof_j);
                                                    
                                                            // VehicleCharacteristicsRanges  SEQUENCE
                                                                //  comparisonOperator ComparisonOperator                      
                                                                //  limits             VehicleCharacteristicsRanges_limits     
                                                            
                                                            // Field name: comparison_operator
                                                            // Integer
                                                            // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                                            uint8_t* _tmp_1046 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_1046;
                                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].comparison_operator.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m000801\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].comparison_operator.value) << 
                                                                             " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].comparison_operator.value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].comparison_operator.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].comparison_operator.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: limits
                                                            // Choice
                                                            uint8_t* _ext_flag_282 = (uint8_t*)buffer++; // ext flag
                                                            
                                                               // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles   
                                                               // #1  vehicleDimensions   VehicleDimensions   
                                                               // #2  vehicleWeightLimits   VehicleWeightLimits   
                                                               // #3  axleWeightLimits   AxleWeightLimits   
                                                               // #4  passengerCapacity   PassengerCapacity   
                                                               // #5  exhaustEmissionValues   ExhaustEmissionValues   
                                                               // #6  dieselEmissionValues   DieselEmissionValues   
                                                               // #7  soundLevel   SoundLevel   
                                                            uint8_t _choice_41 = *(buffer++);
                                                            
                                                            if(*_ext_flag_282)
                                                                _choice_41 += 7 + 1; // Ext addition
                                                            
                                                            if(_choice_41 == 0) {
                                                                dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRangesLimitsNumberOfAxles _tmp_1047;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.number_of_axles.push_back(_tmp_1047);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                                uint8_t* _tmp_1048 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_1048;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.number_of_axles[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m000802\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.number_of_axles[0].value) << 
                                                                                 " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.number_of_axles[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.number_of_axles[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.number_of_axles[0].value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_41 == 1)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_dimensions)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::VehicleDimensions _tmp_1049;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions.push_back(_tmp_1049);
                                                            
                                                                    // VehicleDimensions  SEQUENCE
                                                                        //  vehicleLengthOverall Int1           
                                                                        //  vehicleHeigthOverall Int1           
                                                                        //  vehicleWidthOverall  Int1           
                                                                    
                                                                    // Field name: vehicle_length_overall
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_1050 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_1050;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000803\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_heigth_overall
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_1051 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_1051;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000804\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_width_overall
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_1052 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_1052;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000805\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_41 == 2)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_weight_limits)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::VehicleWeightLimits _tmp_1053;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits.push_back(_tmp_1053);
                                                            
                                                                    // VehicleWeightLimits  SEQUENCE
                                                                        //  vehicleMaxLadenWeight     Int2           
                                                                        //  vehicleTrainMaximumWeight Int2           
                                                                        //  vehicleWeightUnladen      Int2           
                                                                    
                                                                    // Field name: vehicle_max_laden_weight
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_1054 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_1054;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000806\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_train_maximum_weight
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_1055 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_1055;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000807\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_weight_unladen
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_1056 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_1056;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000808\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_41 == 3)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(axle_weight_limits)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::AxleWeightLimits _tmp_1057;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits.push_back(_tmp_1057);
                                                            
                                                                    // AxleWeightLimits  SEQUENCE
                                                                        //  maxLadenweightOnAxle1 Int2           
                                                                        //  maxLadenweightOnAxle2 Int2           
                                                                        //  maxLadenweightOnAxle3 Int2           
                                                                        //  maxLadenweightOnAxle4 Int2           
                                                                        //  maxLadenweightOnAxle5 Int2           
                                                                    
                                                                    // Field name: max_ladenweight_on_axle1
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_1058 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_1058;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000809\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle2
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_1059 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_1059;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000810\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle3
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_1060 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_1060;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000811\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle4
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_1061 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_1061;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000812\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle5
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_1062 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_1062;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000813\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_41 == 4)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(passenger_capacity)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::PassengerCapacity _tmp_1063;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity.push_back(_tmp_1063);
                                                            
                                                                    // PassengerCapacity  SEQUENCE
                                                                        //  numberOfSeats          Int1           
                                                                        //  numberOfStandingPlaces Int1           
                                                                    
                                                                    // Field name: number_of_seats
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_1064 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_1064;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000814\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: number_of_standing_places
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_1065 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_1065;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000815\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_41 == 5)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(exhaust_emission_values)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::ExhaustEmissionValues _tmp_1066;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values.push_back(_tmp_1066);
                                                            
                                                                    // ExhaustEmissionValues  SEQUENCE
                                                                        //  unitType      UnitType                             
                                                                        //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                        //  emissionHC    Int2                                 
                                                                        //  emissionNOX   Int2                                 
                                                                        //  emissionHCNOX Int2                                 
                                                                    
                                                                    // Field name: unit_type
                                                                    // Enumerated
                                                                    // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                    uint8_t* _tmp_1067 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_1067;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000816\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].unit_type.value);
                                                                    }
                                                                    
                                                                    // Field name: emission_co
                                                                    // Integer
                                                                    // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                    uint16_t* _tmp_1068 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_1068;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000817\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: emission_hc
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_1069 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_1069;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000818\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: emission_nox
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_1070 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_1070;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000819\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: emission_hcnox
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_1071 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_1071;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000820\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_41 == 6)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(diesel_emission_values)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::DieselEmissionValues _tmp_1072;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values.push_back(_tmp_1072);
                                                            
                                                                    // DieselEmissionValues  SEQUENCE
                                                                        //  particulate     DieselEmissionValues_particulate     
                                                                        //  absorptionCoeff Int2                                 
                                                                    
                                                                    // Field name: particulate
                                                                        // DieselEmissionValues_particulate  SEQUENCE
                                                                            //  unitType   UnitType                                   
                                                                            //  value      DieselEmissionValues_particulate_value     
                                                                        
                                                                        // Field name: unit_type
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                        uint8_t* _tmp_1073 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_1073;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000821\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                        }
                                                                        
                                                                        // Field name: value
                                                                        // Integer
                                                                        // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                        uint16_t* _tmp_1074 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_1074;
                                                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m000822\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                            return false;
                                                                        }
                                                                    
                                                                    // Field name: absorption_coeff
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_1075 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_1075;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000823\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_41 == 7)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(sound_level)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::SoundLevel _tmp_1076;
                                                                ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level.push_back(_tmp_1076);
                                                            
                                                                    // SoundLevel  SEQUENCE
                                                                        //  soundstationary Int1           
                                                                        //  sounddriveby    Int1           
                                                                    
                                                                    // Field name: soundstationary
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_1077 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_1077;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000824\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: sounddriveby
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_1078 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_1078;
                                                                    ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m000825\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value) << 
                                                                                     " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_type_qualifier[0].train[0].ranges.elements[j].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else
                                                            {
                                                                uint16_t* _tmp_1079 = (uint16_t*)buffer;  // OpenType length
                                                                buffer += 2 + int(*_tmp_1079);            // Ignoring opentype data
                                                            }
                                                    }
                                            }
                                    }
                                    
                                    // Field name: lane_status
                                    // Integer
                                    // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                    uint8_t* _ext_flag_285 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000826\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.: " << int(*_ext_flag_285);
                                    }
                                    
                                    if(*_ext_flag_285) {
                                        uint8_t* _tmp_1081 = (uint8_t*) buffer++;
                                        
                                        if(*_tmp_1081) {
                                            uint64_t* _tmp_1082 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = *_tmp_1082;
                                            __aux64__ += INT64_MIN;
                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value = __aux64__;
                                        }
                                        else
                                        {
                                            uint32_t* _tmp_1082 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = *_tmp_1082;
                                            __aux64__ += INT32_MIN;
                                            ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value = __aux64__;
                                        }
                                    }
                                    else
                                    {
                                        uint8_t* _tmp_1080 = (uint8_t*) buffer++;
                                        __aux64__ = *_tmp_1080;
                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value = __aux64__;
                                    
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m000827\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value) << 
                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_status.value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                            return false;
                                        }
                                        
                                    }
                                    
                                    if(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width.size() != 0) {
                                        // Field name: lane_width
                                        // Integer
                                        // UINT16  min(0) max(1023) span(1024) datatype(UInt16)
                                        uint16_t* _tmp_1083 = (uint16_t*) buffer; buffer += 2;
                                        __aux64__ = *_tmp_1083;
                                        ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width[0].value = __aux64__;
                                        
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m000828\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width[0].value) << 
                                                         " ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width[0].value: " << ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width[0].value;
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 1023) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].lane_width[0].value' " << (__aux64__) << " exceeds max allowable (1023); message dropped.";
                                            return false;
                                        }
                                    }
                                    if(*_ext_flag_198) { // from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r]. 
                                        uint8_t* _tmp_1084 = (uint8_t*) buffer++;  // number of extensions
                                        bool _array_5[*_tmp_1084];
                                        
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000829\033[0m| Reading number of exts from ros->ivi.optional[0].elements[c].rcc[0].elements[p].lane_configuration.elements[r].: " << static_cast<unsigned int>(*_tmp_1084);
                                        
                                        // Extensions bytemap
                                        for(int i = 0; i < *_tmp_1084; i++)
                                            _array_5[i] = (*buffer++) != 0;
                                        
                                        // Discarding unknown OpenType containers
                                        for(int i = 0; i < *_tmp_1084; i++) {
                                            uint16_t* _tmp_1085 = (uint16_t*)buffer;  // OpenType length
                                            buffer += 2;
                                        
                                            if(debug) {
                                            }
                                        
                                            for(int i = 0; i < *_tmp_1085; i++)
                                                buffer++;
                                        }
                                        
                                    }
                            }
                            if(*_ext_flag_193) { // from ros->ivi.optional[0].elements[c].rcc[0].elements[p]. 
                                uint8_t* _tmp_1086 = (uint8_t*) buffer++;  // number of extensions
                                bool _array_6[*_tmp_1086];
                                
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000830\033[0m| Reading number of exts from ros->ivi.optional[0].elements[c].rcc[0].elements[p].: " << static_cast<unsigned int>(*_tmp_1086);
                                
                                // Extensions bytemap
                                for(int i = 0; i < *_tmp_1086; i++)
                                    _array_6[i] = (*buffer++) != 0;
                                
                                // Discarding unknown OpenType containers
                                for(int i = 0; i < *_tmp_1086; i++) {
                                    uint16_t* _tmp_1087 = (uint16_t*)buffer;  // OpenType length
                                    buffer += 2;
                                
                                    if(debug) {
                                    }
                                
                                    for(int i = 0; i < *_tmp_1087; i++)
                                        buffer++;
                                }
                                
                            }
                    }
                }
                else if(_choice_1 == 3)  // CHOICE IviContainer  fieldName(tc)
                {
                    dsrc_v2_ivi_msgs::msg::TextContainer _tmp_1088;
                    ros->ivi.optional[0].elements[c].tc.push_back(_tmp_1088);
                
                    // SequenceOf
                    // Data Type UInt8
                    // SEQUENCE_OF  min(1) max(16) span(16)
                    uint8_t* _ext_flag_286 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].tc[0].
                    
                    if(debug) {
                        logger->debug() << "|\033[38;5;94m000831\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].tc[0].: " << int(*_ext_flag_286);
                    }
                    
                    int16_t* _tmp_1089 = (int16_t*)buffer;
                    buffer += 2;
                    __aux64__ = *_tmp_1089;
                    __aux64__ += 1;     // +min
                    
                    int _if__tmp_1089 = __aux64__;
                    
                    if(debug) {
                        logger->debug() << "|\033[38;5;94m000832\033[0m| SequenceOf ros->ivi.optional[0].elements[c].tc[0]. size: " << int(*_tmp_1089);
                    }
                    
                    // ******************* MIN validator *******************
                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                        return false;
                    }
                    // ******************* MAX validator *******************
                    if(VALIDATORS_ENABLED && __aux64__ > 16) {
                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].value' " << (__aux64__) << " exceeds max allowable (16); message dropped.";
                        return false;
                    }
                    
                    
                    for(int k = 0; k < _if__tmp_1089; k++) {
                        dsrc_v2_ivi_msgs::msg::TcPart seqof_k;  // SEQUENCE
                        ros->ivi.optional[0].elements[c].tc[0].elements.push_back(seqof_k);
                    
                            // TcPart  SEQUENCE
                                //  detectionZoneIds       TcPart_detectionZoneIds         OPTIONAL  
                                //  relevanceZoneIds       TcPart_relevanceZoneIds           
                                //  direction              Direction                       OPTIONAL  
                                //  driverAwarenessZoneIds TcPart_driverAwarenessZoneIds   OPTIONAL  
                                //  minimumAwarenessTime   TcPart_minimumAwarenessTime     OPTIONAL  
                                //  applicableLanes        TcPart_applicableLanes          OPTIONAL  
                                //  layoutId               TcPart_layoutId                 OPTIONAL  
                                //  preStoredlayoutId      TcPart_preStoredlayoutId        OPTIONAL  
                                //  text                   TcPart_text                     OPTIONAL  
                                //  data                   TcPart_data                       
                                //  ...
                            uint8_t* _ext_flag_287 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000833\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].: " << int(*_ext_flag_287);
                            }
                            
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::TcPartDetectionZoneIds _tmp_1090;
                                ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids.push_back(_tmp_1090);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000834\033[0m| ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::Direction _tmp_1091;
                                ros->ivi.optional[0].elements[c].tc[0].elements[k].direction.push_back(_tmp_1091);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000835\033[0m| ros->ivi.optional[0].elements[c].tc[0].elements[k].direction " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::TcPartDriverAwarenessZoneIds _tmp_1092;
                                ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids.push_back(_tmp_1092);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000836\033[0m| ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::TcPartMinimumAwarenessTime _tmp_1093;
                                ros->ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time.push_back(_tmp_1093);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000837\033[0m| ros->ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::TcPartApplicableLanes _tmp_1094;
                                ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes.push_back(_tmp_1094);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000838\033[0m| ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::TcPartLayoutId _tmp_1095;
                                ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id.push_back(_tmp_1095);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000839\033[0m| ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::TcPartPreStoredlayoutId _tmp_1096;
                                ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id.push_back(_tmp_1096);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000840\033[0m| ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::TcPartText _tmp_1097;
                                ros->ivi.optional[0].elements[c].tc[0].elements[k].text.push_back(_tmp_1097);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000841\033[0m| ros->ivi.optional[0].elements[c].tc[0].elements[k].text " << tools::green("present");
                            }
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids.size() != 0) {
                                // Field name: detection_zone_ids
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_288 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000842\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].: " << int(*_ext_flag_288);
                                }
                                
                                int16_t* _tmp_1098 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_1098;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_1098 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000843\033[0m| SequenceOf ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0]. size: " << int(*_tmp_1098);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int l = 0; l < _if__tmp_1098; l++) {
                                    dsrc_v2_ivi_msgs::msg::Zid seqof_l;  // INTEGER
                                    ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements.push_back(seqof_l);
                                
                                    // Integer
                                    // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                    uint8_t* _ext_flag_289 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000844\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].: " << int(*_ext_flag_289);
                                    }
                                    
                                    if(*_ext_flag_289) {
                                        uint8_t* _tmp_1100 = (uint8_t*) buffer++;
                                        
                                        if(*_tmp_1100) {
                                            uint64_t* _tmp_1101 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = *_tmp_1101;
                                            __aux64__ += INT64_MIN;
                                            ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value = __aux64__;
                                        }
                                        else
                                        {
                                            uint32_t* _tmp_1101 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = *_tmp_1101;
                                            __aux64__ += INT32_MIN;
                                            ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value = __aux64__;
                                        }
                                    }
                                    else
                                    {
                                        uint8_t* _tmp_1099 = (uint8_t*) buffer++;
                                        __aux64__ = *_tmp_1099;
                                        __aux64__ += 1;
                                        ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value = __aux64__;
                                    
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m000845\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value) << 
                                                         " ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].detection_zone_ids[0].elements[l].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                            return false;
                                        }
                                        
                                    }
                                    
                                    
                                }
                            }
                            
                            // Field name: relevance_zone_ids
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(8) span(8)
                            uint8_t* _ext_flag_290 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000846\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.: " << int(*_ext_flag_290);
                            }
                            
                            int16_t* _tmp_1102 = (int16_t*)buffer;
                            buffer += 2;
                            __aux64__ = *_tmp_1102;
                            __aux64__ += 1;     // +min
                            
                            int _if__tmp_1102 = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000847\033[0m| SequenceOf ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids. size: " << int(*_tmp_1102);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                return false;
                            }
                            
                            
                            for(int m = 0; m < _if__tmp_1102; m++) {
                                dsrc_v2_ivi_msgs::msg::Zid seqof_m;  // INTEGER
                                ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements.push_back(seqof_m);
                            
                                // Integer
                                // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                uint8_t* _ext_flag_291 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000848\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].: " << int(*_ext_flag_291);
                                }
                                
                                if(*_ext_flag_291) {
                                    uint8_t* _tmp_1104 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_1104) {
                                        uint64_t* _tmp_1105 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_1105;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_1105 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_1105;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_1103 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_1103;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000849\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value) << 
                                                     " ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].relevance_zone_ids.elements[m].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                        return false;
                                    }
                                    
                                }
                                
                                
                            }
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].direction.size() != 0) {
                                // Field name: direction
                                // Integer
                                // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                uint8_t* _tmp_1106 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_1106;
                                ros->ivi.optional[0].elements[c].tc[0].elements[k].direction[0].value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000850\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].direction[0].value) << 
                                                 " ivi.optional[0].elements[c].tc[0].elements[k].direction[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].direction[0].value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].direction[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].direction[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                    return false;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids.size() != 0) {
                                // Field name: driver_awareness_zone_ids
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_292 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000851\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].: " << int(*_ext_flag_292);
                                }
                                
                                int16_t* _tmp_1107 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_1107;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_1107 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000852\033[0m| SequenceOf ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0]. size: " << int(*_tmp_1107);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int n = 0; n < _if__tmp_1107; n++) {
                                    dsrc_v2_ivi_msgs::msg::Zid seqof_n;  // INTEGER
                                    ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements.push_back(seqof_n);
                                
                                    // Integer
                                    // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                    uint8_t* _ext_flag_293 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000853\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].: " << int(*_ext_flag_293);
                                    }
                                    
                                    if(*_ext_flag_293) {
                                        uint8_t* _tmp_1109 = (uint8_t*) buffer++;
                                        
                                        if(*_tmp_1109) {
                                            uint64_t* _tmp_1110 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = *_tmp_1110;
                                            __aux64__ += INT64_MIN;
                                            ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value = __aux64__;
                                        }
                                        else
                                        {
                                            uint32_t* _tmp_1110 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = *_tmp_1110;
                                            __aux64__ += INT32_MIN;
                                            ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value = __aux64__;
                                        }
                                    }
                                    else
                                    {
                                        uint8_t* _tmp_1108 = (uint8_t*) buffer++;
                                        __aux64__ = *_tmp_1108;
                                        __aux64__ += 1;
                                        ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value = __aux64__;
                                    
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m000854\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value) << 
                                                         " ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].driver_awareness_zone_ids[0].elements[n].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                            return false;
                                        }
                                        
                                    }
                                    
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time.size() != 0) {
                                // Field name: minimum_awareness_time
                                // Integer
                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                uint8_t* _tmp_1111 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_1111;
                                ros->ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time[0].value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000855\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time[0].value) << 
                                                 " ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time[0].value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].minimum_awareness_time[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                    return false;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes.size() != 0) {
                                // Field name: applicable_lanes
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_294 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000856\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].: " << int(*_ext_flag_294);
                                }
                                
                                int16_t* _tmp_1112 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_1112;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_1112 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000857\033[0m| SequenceOf ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0]. size: " << int(*_tmp_1112);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int o = 0; o < _if__tmp_1112; o++) {
                                    its_container_v1_its_container_msgs::msg::LanePosition seqof_o;  // INTEGER
                                    ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].elements.push_back(seqof_o);
                                
                                    // Integer
                                    // INT8  min(-1) max(14) span(16) datatype(Int8)
                                    uint8_t* _tmp_1113 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_1113;
                                    __aux64__ += -1;
                                    ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].elements[o].value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000858\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].elements[o].value) << 
                                                     " ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].elements[o].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].elements[o].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].elements[o].value' " << (__aux64__) << " is less than allowable (-1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].applicable_lanes[0].elements[o].value' " << (__aux64__) << " exceeds max allowable (14); message dropped.";
                                        return false;
                                    }
                                    
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id.size() != 0) {
                                // Field name: layout_id
                                // Integer
                                // UINT8  min(1) max(4) span(4) datatype(UInt8)
                                uint8_t* _ext_flag_295 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000859\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].: " << int(*_ext_flag_295);
                                }
                                
                                if(*_ext_flag_295) {
                                    uint8_t* _tmp_1115 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_1115) {
                                        uint64_t* _tmp_1116 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_1116;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_1116 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_1116;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_1114 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_1114;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000860\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value) << 
                                                     " ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].layout_id[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                        return false;
                                    }
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id.size() != 0) {
                                // Field name: pre_storedlayout_id
                                // Integer
                                // UINT8  min(1) max(64) span(64) datatype(UInt8)
                                uint8_t* _ext_flag_296 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000861\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].: " << int(*_ext_flag_296);
                                }
                                
                                if(*_ext_flag_296) {
                                    uint8_t* _tmp_1118 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_1118) {
                                        uint64_t* _tmp_1119 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_1119;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_1119 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_1119;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_1117 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_1117;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000862\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value) << 
                                                     " ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 64) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].pre_storedlayout_id[0].value' " << (__aux64__) << " exceeds max allowable (64); message dropped.";
                                        return false;
                                    }
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[c].tc[0].elements[k].text.size() != 0) {
                                // Field name: text
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(4) span(4)
                                uint8_t* _ext_flag_297 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000863\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].: " << int(*_ext_flag_297);
                                }
                                
                                int16_t* _tmp_1120 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_1120;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_1120 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000864\033[0m| SequenceOf ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0]. size: " << int(*_tmp_1120);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].text[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].text[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int p = 0; p < _if__tmp_1120; p++) {
                                    dsrc_v2_ivi_msgs::msg::Text seqof_p;  // SEQUENCE
                                    ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements.push_back(seqof_p);
                                
                                        // Text  SEQUENCE
                                            //  layoutComponentId Text_layoutComponentId   OPTIONAL  
                                            //  language          Text_language              
                                            //  textContent       Text_textContent           
                                        if(*(buffer++)) { 
                                            dsrc_v2_ivi_msgs::msg::TextLayoutComponentId _tmp_1121;
                                            ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id.push_back(_tmp_1121);
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m000865\033[0m| ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id " << tools::green("present");
                                        }
                                        
                                        if(ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id.size() != 0) {
                                            // Field name: layout_component_id
                                            // Integer
                                            // UINT8  min(1) max(4) span(4) datatype(UInt8)
                                            uint8_t* _ext_flag_298 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m000866\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].: " << int(*_ext_flag_298);
                                            }
                                            
                                            if(*_ext_flag_298) {
                                                uint8_t* _tmp_1123 = (uint8_t*) buffer++;
                                                
                                                if(*_tmp_1123) {
                                                    uint64_t* _tmp_1124 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = *_tmp_1124;
                                                    __aux64__ += INT64_MIN;
                                                    ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value = __aux64__;
                                                }
                                                else
                                                {
                                                    uint32_t* _tmp_1124 = (uint32_t*) buffer; buffer += 4;
                                                    __aux64__ = *_tmp_1124;
                                                    __aux64__ += INT32_MIN;
                                                    ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value = __aux64__;
                                                }
                                            }
                                            else
                                            {
                                                uint8_t* _tmp_1122 = (uint8_t*) buffer++;
                                                __aux64__ = *_tmp_1122;
                                                __aux64__ += 1;
                                                ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value = __aux64__;
                                            
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m000867\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value) << 
                                                                 " ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].layout_component_id[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                    return false;
                                                }
                                                
                                            }
                                        }
                                        
                                        // Field name: language
                                        // BitString
                                        // BIT_STRING  min(10) max(10) span(1)
                                        uint8_t* _tmp_1125 = (uint8_t*)buffer;
                                        __aux64__ = *_tmp_1125 + 10;
                                        buffer += 1;
                                        
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m000868\033[0m| ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].language.value: " << __aux64__;
                                        
                                        int _if__tmp_1125 = __aux64__;
                                        for(int q = 0; q < _if__tmp_1125; q++) {
                                            uint8_t __c__;
                                            ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].language.values.push_back(__c__);
                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                            ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].language.values[q] = (*__b__ == 1);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].language.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 10) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].language.value' " << (__aux64__) << " exceeds max allowable (10); message dropped.";
                                            return false;
                                        }
                                        
                                        // Field name: text_content
                                        // Text
                                        
                                        // Indefinite length
                                        // TEXT  min(0) max(16383) span(16384)
                                        uint16_t* _tmp_1126 = (uint16_t*)buffer;
                                        __aux64__ = *_tmp_1126;
                                        buffer += 2;
                                        
                                        int _if__tmp_1126 = __aux64__;
                                        for(int r = 0; r < _if__tmp_1126; r++) {  // Text_textContent
                                            char* __tmp__ = (char*)buffer++;
                                            ros->ivi.optional[0].elements[c].tc[0].elements[k].text[0].elements[p].text_content.value += *__tmp__;
                                        }
                                }
                            }
                            
                            // Field name: data
                            // OctetString
                            // Indefinite length
                            // min(0) max(16383) span(16384)
                            uint16_t* _tmp_1127 = (uint16_t*)buffer;
                            buffer += 2;
                            __aux64__ = *_tmp_1127;
                            
                            int _if__tmp_1127 = __aux64__;
                            for(int s = 0; s < _if__tmp_1127; s++) {
                                int8_t* __n__ = (int8_t*)buffer++;
                                ros->ivi.optional[0].elements[c].tc[0].elements[k].data.values.push_back(*__n__);
                            }
                            if(*_ext_flag_287) { // from ros->ivi.optional[0].elements[c].tc[0].elements[k]. 
                                uint8_t* _tmp_1128 = (uint8_t*) buffer++;  // number of extensions
                                bool _array_7[*_tmp_1128];
                                
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m000869\033[0m| Reading number of exts from ros->ivi.optional[0].elements[c].tc[0].elements[k].: " << static_cast<unsigned int>(*_tmp_1128);
                                
                                // Extensions bytemap
                                for(int i = 0; i < *_tmp_1128; i++)
                                    _array_7[i] = (*buffer++) != 0;
                                
                                // Discarding unknown OpenType containers
                                for(int i = 0; i < *_tmp_1128; i++) {
                                    uint16_t* _tmp_1129 = (uint16_t*)buffer;  // OpenType length
                                    buffer += 2;
                                
                                    if(debug) {
                                    }
                                
                                    for(int i = 0; i < *_tmp_1129; i++)
                                        buffer++;
                                }
                                
                            }
                    }
                }
                else if(_choice_1 == 4)  // CHOICE IviContainer  fieldName(lac)
                {
                    dsrc_v2_ivi_msgs::msg::LayoutContainer _tmp_1130;
                    ros->ivi.optional[0].elements[c].lac.push_back(_tmp_1130);
                
                        // LayoutContainer  SEQUENCE
                            //  layoutId         LayoutContainer_layoutId             
                            //  height           LayoutContainer_height             OPTIONAL  
                            //  width            LayoutContainer_width              OPTIONAL  
                            //  layoutComponents LayoutContainer_layoutComponents     
                            //  ...
                        uint8_t* _ext_flag_299 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].lac[0].
                        
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m000870\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].lac[0].: " << int(*_ext_flag_299);
                        }
                        
                        if(*(buffer++)) { 
                            dsrc_v2_ivi_msgs::msg::LayoutContainerHeight _tmp_1131;
                            ros->ivi.optional[0].elements[c].lac[0].height.push_back(_tmp_1131);
                        
                            if(debug)
                                logger->debug() << "|\033[38;5;94m000871\033[0m| ros->ivi.optional[0].elements[c].lac[0].height " << tools::green("present");
                        }
                        if(*(buffer++)) { 
                            dsrc_v2_ivi_msgs::msg::LayoutContainerWidth _tmp_1132;
                            ros->ivi.optional[0].elements[c].lac[0].width.push_back(_tmp_1132);
                        
                            if(debug)
                                logger->debug() << "|\033[38;5;94m000872\033[0m| ros->ivi.optional[0].elements[c].lac[0].width " << tools::green("present");
                        }
                        
                        // Field name: layout_id
                        // Integer
                        // UINT8  min(1) max(4) span(4) datatype(UInt8)
                        uint8_t* _ext_flag_300 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].lac[0].layout_id.
                        
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m000873\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].lac[0].layout_id.: " << int(*_ext_flag_300);
                        }
                        
                        if(*_ext_flag_300) {
                            uint8_t* _tmp_1134 = (uint8_t*) buffer++;
                            
                            if(*_tmp_1134) {
                                uint64_t* _tmp_1135 = (uint64_t*)buffer; buffer += 8;
                                __aux64__ = *_tmp_1135;
                                __aux64__ += INT64_MIN;
                                ros->ivi.optional[0].elements[c].lac[0].layout_id.value = __aux64__;
                            }
                            else
                            {
                                uint32_t* _tmp_1135 = (uint32_t*) buffer; buffer += 4;
                                __aux64__ = *_tmp_1135;
                                __aux64__ += INT32_MIN;
                                ros->ivi.optional[0].elements[c].lac[0].layout_id.value = __aux64__;
                            }
                        }
                        else
                        {
                            uint8_t* _tmp_1133 = (uint8_t*) buffer++;
                            __aux64__ = *_tmp_1133;
                            __aux64__ += 1;
                            ros->ivi.optional[0].elements[c].lac[0].layout_id.value = __aux64__;
                        
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000874\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].layout_id.value) << 
                                             " ivi.optional[0].elements[c].lac[0].layout_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].layout_id.value);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_id.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_id.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                return false;
                            }
                            
                        }
                        
                        if(ros->ivi.optional[0].elements[c].lac[0].height.size() != 0) {
                            // Field name: height
                            // Integer
                            // UINT8  min(10) max(73) span(64) datatype(UInt8)
                            uint8_t* _tmp_1136 = (uint8_t*) buffer++;
                            __aux64__ = *_tmp_1136;
                            __aux64__ += 10;
                            ros->ivi.optional[0].elements[c].lac[0].height[0].value = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000875\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].height[0].value) << 
                                             " ivi.optional[0].elements[c].lac[0].height[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].height[0].value);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].height[0].value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 73) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].height[0].value' " << (__aux64__) << " exceeds max allowable (73); message dropped.";
                                return false;
                            }
                        }
                        
                        if(ros->ivi.optional[0].elements[c].lac[0].width.size() != 0) {
                            // Field name: width
                            // Integer
                            // UINT16  min(10) max(265) span(256) datatype(UInt16)
                            uint8_t* _tmp_1137 = (uint8_t*) buffer++;
                            __aux64__ = *_tmp_1137;
                            __aux64__ += 10;
                            ros->ivi.optional[0].elements[c].lac[0].width[0].value = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m000876\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].width[0].value) << 
                                             " ivi.optional[0].elements[c].lac[0].width[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].width[0].value);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].width[0].value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 265) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].width[0].value' " << (__aux64__) << " exceeds max allowable (265); message dropped.";
                                return false;
                            }
                        }
                        
                        // Field name: layout_components
                        // SequenceOf
                        // Data Type UInt8
                        // SEQUENCE_OF  min(1) max(4) span(4)
                        uint8_t* _ext_flag_301 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].lac[0].layout_components.
                        
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m000877\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].lac[0].layout_components.: " << int(*_ext_flag_301);
                        }
                        
                        int16_t* _tmp_1138 = (int16_t*)buffer;
                        buffer += 2;
                        __aux64__ = *_tmp_1138;
                        __aux64__ += 1;     // +min
                        
                        int _if__tmp_1138 = __aux64__;
                        
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m000878\033[0m| SequenceOf ros->ivi.optional[0].elements[c].lac[0].layout_components. size: " << int(*_tmp_1138);
                        }
                        
                        // ******************* MIN validator *******************
                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                            return false;
                        }
                        // ******************* MAX validator *******************
                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                            return false;
                        }
                        
                        
                        for(int t = 0; t < _if__tmp_1138; t++) {
                            dsrc_v2_ivi_msgs::msg::LayoutComponent seqof_t;  // SEQUENCE
                            ros->ivi.optional[0].elements[c].lac[0].layout_components.elements.push_back(seqof_t);
                        
                                // LayoutComponent  SEQUENCE
                                    //  layoutComponentId LayoutComponent_layoutComponentId     
                                    //  height            LayoutComponent_height                
                                    //  width             LayoutComponent_width                 
                                    //  x                 LayoutComponent_x                     
                                    //  y                 LayoutComponent_y                     
                                    //  textScripting     LayoutComponent_textScripting         
                                
                                // Field name: layout_component_id
                                // Integer
                                // UINT8  min(1) max(8) span(8) datatype(UInt8)
                                uint8_t* _ext_flag_302 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000879\033[0m| Reading ext flag from ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.: " << int(*_ext_flag_302);
                                }
                                
                                if(*_ext_flag_302) {
                                    uint8_t* _tmp_1140 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_1140) {
                                        uint64_t* _tmp_1141 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_1141;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_1141 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_1141;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_1139 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_1139;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m000880\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value) << 
                                                     " ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].layout_component_id.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                        return false;
                                    }
                                    
                                }
                                
                                // Field name: height
                                // Integer
                                // UINT8  min(10) max(73) span(64) datatype(UInt8)
                                uint8_t* _tmp_1142 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_1142;
                                __aux64__ += 10;
                                ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].height.value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000881\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].height.value) << 
                                                 " ivi.optional[0].elements[c].lac[0].layout_components.elements[t].height.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].height.value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].height.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 73) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].height.value' " << (__aux64__) << " exceeds max allowable (73); message dropped.";
                                    return false;
                                }
                                
                                // Field name: width
                                // Integer
                                // UINT16  min(10) max(265) span(256) datatype(UInt16)
                                uint8_t* _tmp_1143 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_1143;
                                __aux64__ += 10;
                                ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].width.value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000882\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].width.value) << 
                                                 " ivi.optional[0].elements[c].lac[0].layout_components.elements[t].width.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].width.value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].width.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 265) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].width.value' " << (__aux64__) << " exceeds max allowable (265); message dropped.";
                                    return false;
                                }
                                
                                // Field name: x
                                // Integer
                                // UINT16  min(10) max(265) span(256) datatype(UInt16)
                                uint8_t* _tmp_1144 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_1144;
                                __aux64__ += 10;
                                ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].x.value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000883\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].x.value) << 
                                                 " ivi.optional[0].elements[c].lac[0].layout_components.elements[t].x.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].x.value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].x.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 265) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].x.value' " << (__aux64__) << " exceeds max allowable (265); message dropped.";
                                    return false;
                                }
                                
                                // Field name: y
                                // Integer
                                // UINT8  min(10) max(73) span(64) datatype(UInt8)
                                uint8_t* _tmp_1145 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_1145;
                                __aux64__ += 10;
                                ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].y.value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000884\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].y.value) << 
                                                 " ivi.optional[0].elements[c].lac[0].layout_components.elements[t].y.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].y.value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].y.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 73) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].y.value' " << (__aux64__) << " exceeds max allowable (73); message dropped.";
                                    return false;
                                }
                                
                                // Field name: text_scripting
                                // Integer
                                // UINT8  min(0) max(1) span(2) datatype(UInt8)
                                uint8_t* _tmp_1146 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_1146;
                                ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].text_scripting.value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m000885\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].text_scripting.value) << 
                                                 " ivi.optional[0].elements[c].lac[0].layout_components.elements[t].text_scripting.value: " << static_cast<int>(ros->ivi.optional[0].elements[c].lac[0].layout_components.elements[t].text_scripting.value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].text_scripting.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[c].lac[0].layout_components.elements[t].text_scripting.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                    return false;
                                }
                        }
                        if(*_ext_flag_299) { // from ros->ivi.optional[0].elements[c].lac[0]. 
                            uint8_t* _tmp_1147 = (uint8_t*) buffer++;  // number of extensions
                            bool _array_8[*_tmp_1147];
                            
                            if(debug)
                                logger->debug() << "|\033[38;5;94m000886\033[0m| Reading number of exts from ros->ivi.optional[0].elements[c].lac[0].: " << static_cast<unsigned int>(*_tmp_1147);
                            
                            // Extensions bytemap
                            for(int i = 0; i < *_tmp_1147; i++)
                                _array_8[i] = (*buffer++) != 0;
                            
                            // Discarding unknown OpenType containers
                            for(int i = 0; i < *_tmp_1147; i++) {
                                uint16_t* _tmp_1148 = (uint16_t*)buffer;  // OpenType length
                                buffer += 2;
                            
                                if(debug) {
                                }
                            
                                for(int i = 0; i < *_tmp_1148; i++)
                                    buffer++;
                            }
                            
                        }
                }
                else
                {
                    uint16_t* _tmp_1149 = (uint16_t*)buffer;  // OpenType length
                    buffer += 2 + int(*_tmp_1149);            // Ignoring opentype data
                }
            }
        }
	
	        return true;
        }
    }
}